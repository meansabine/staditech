<summary>

<header>
Repopack Output File
This file was generated by Repopack on: 2025-05-04T02:38:28.951Z
</header>

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository structure
3. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the file path attributes to distinguish
  between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation.


</notes>

<additional_info>
For more information about Repopack, visit: https://github.com/yamadashy/repopack
</additional_info>

</summary>

<repository_structure>
.gitattributes
data/heroes.js
data/universalItems.js
index.html
js/app.js
landing.css
landing.html
LICENSE
README.md
styles.css
</repository_structure>

<repository_files>

<file path=".gitattributes">
# Auto detect text files and perform LF normalization
* text=auto
</file>

<file path="data/heroes.js">
const heroes = {
    reaper: {
        name: "Reaper",
        role: "Damage",
        health: 250,
        armor: 0,
        shield: 0,
        abilities: [
            {
                name: "Hellfire Shotguns",
                description: "Reaper fires dual shotguns at short range, dealing massive damage to enemies at close quarters.",
                stats: [
                    { label: "Damage", value: "6 per pellet, 20 pellets per shot" },
                    { label: "Fire Rate", value: "1.5 shots per second" },
                    { label: "Ammo", value: "8" },
                    { label: "Reload Time", value: "1.5 seconds" }
                ]
            },
            {
                name: "Wraith Form",
                description: "Reaper becomes a shadow for a short period, making him invulnerable and increasing his speed.",
                stats: [
                    { label: "Duration", value: "3 seconds" },
                    { label: "Speed Boost", value: "+50%" },
                    { label: "Cooldown", value: "8 seconds" }
                ]
            },
            {
                name: "Shadow Step",
                description: "Reaper marks a destination and teleports to it.",
                stats: [
                    { label: "Range", value: "35 meters" },
                    { label: "Cooldown", value: "10 seconds" }
                ]
            },
            {
                name: "The Reaping (Passive)",
                description: "Reaper restores his health as he damages enemies.",
                stats: [
                    { label: "Life Steal", value: "35% of damage dealt" }
                ]
            },
            {
                name: "Death Blossom (Ultimate)",
                description: "Reaper spins in a circle while rapidly firing his shotguns, dealing massive damage to all nearby enemies.",
                stats: [
                    { label: "Damage", value: "170 per second" },
                    { label: "Duration", value: "3 seconds" },
                    { label: "Radius", value: "8 meters" },
                    { label: "Ultimate Cost", value: "2100 points" }
                ]
            }
        ],
        powers: [
            {
                name: "Revolving Ruin",
                description: "Close-range Hellfire Shotgun hits grant 5% Attack Speed for 1s, stacking up to 8 times"
            },
            {
                name: "Shrouded Shrapnel",
                description: "Using Wraith Form increases the number of pellets per shot in your next magazine and its spread"
            },
            {
                name: "Death Step",
                description: "After using Shadow Step, cast Death Blossom for 1.5s with 50% reduced damage"
            },
            {
                name: "Strangle Step",
                description: "After using Shadow Step, double your Lifesteal for 3s"
            },
            {
                name: "Spirited To Slay",
                description: "Eliminations reset your cooldowns"
            },
            {
                name: "Backstabber",
                description: "After using an ability, your next shot deals additional damage over 3s to enemies struck from behind"
            },
            {
                name: "Wraith Renewal",
                description: "While in Wraith Form, restore your Life every 1s"
            },
            {
                name: "Ghosted",
                description: "While in Wraith Form, passing through enemies slows their Move Speed and Attack Speed"
            },
            {
                name: "Silent As The Grave",
                description: "Your footsteps and Shadow Step are significantly quieter"
            },
            {
                name: "Shared Siphon",
                description: "The Reaping also heals the nearest ally by a portion of Reaper's damage dealt"
            },
            {
                name: "Harvest Fest",
                description: "Hellfire Shotgun hits have a chance to spawn a Soul Globe. When picked up, restore Life, Ammo, and gain Move Speed for a short duration"
            },
            {
                name: "Vampiric Touch",
                description: "Hits with Quick Melee mark enemies for 5s. Allies gain Lifesteal against marked enemies"
            }
        ],
        items: {
            weapon: [
                {
                    name: "Neverfrost", cost: 10000,
                    description: "+25 Health, +5% Weapon Power, reduce effectiveness of enemy slows by 50%"
                },
                {
                    name: "Pocket Mist", cost: 4000,
                    description: "+25 Health, while below 50% Life, gain 20% Move Speed"
                },
                {
                    name: "Wretched Wings", cost: 10000,
                    description: "+25 Health, While in Wraith Form, gain the ability to fly and gain increased Move Speed"
                }
            ],
            ability: [
                {
                    name: "Dauntless Draught", cost: 10000,
                    description: "+50 Health, +15% Move Speed during Wraith Form, +33% Wraith Form Duration"
                },
                {
                    name: "Spectral Slugs", cost: 4000,
                    description: "+5% Attack Speed, +25% Magazine Size, using Shadow Step restores 100% of your ammo"
                },
                {
                    name: "Nightcreeper", cost: 9500,
                    description: "+10% Move Speed, +30% Shadow Step Cast Speed, using Wraith Form reduces the cooldown of Shadow Step by 2s"
                }
            ],
            survival: [
                {
                    name: "Devastation",
                    cost: 4000,
                    description: "Increased Ability Lifesteal, each Death Blossom elimination increases your Health by 25 until the end of the round, up to 100 Health"
                },
                {
                    name: "Crimson Cloak", cost: 11000,
                    description: "+25 Health, +10% Ability Power, gain 15% of max Health as Overhealth while using Death Blossom"
                },
                {
                    name: "Crowd Control", cost: 11000,
                    description: "+15% Ability Power, Death Blossom gains 5% Ability Power for each enemy within its range"
                },
                {
                    name: "Wreath Of Ruin",
                    cost: 4000,
                    description: "+20% Ability Power, +25% Death Blossom Radius, +20% Move Speed during Death Blossom"
                },
                {
                    name: "Onslaught", cost: 10000,
                    description: "+25% Max Ammo, every 3rd shot fires both of your Hellfire Shotguns. The extra shot does not consume ammo but deals 80% reduced damage"
                }
            ]
        }
    },
    dva: {
        name: "D.Va",
        role: "Tank",
        health: 300,
        armor: 300,
        shield: 0,
        abilities: [
            {
                name: "Fusion Cannons",
                description: "D.Va's mech is equipped with twin short-range rotating cannons that fire continuously without needing to reload.",
                stats: [
                    { label: "Damage", value: "2 per pellet, 11 pellets per shot" },
                    { label: "Fire Rate", value: "6.67 shots per second" },
                    { label: "Movement Speed", value: "-30% while firing" }
                ]
            },
            {
                name: "Light Gun",
                description: "While outside her mech, D.Va uses a small automatic pistol.",
                stats: [
                    { label: "Damage", value: "14 per shot" },
                    { label: "Fire Rate", value: "7 rounds per second" },
                    { label: "Ammo", value: "20" },
                    { label: "Reload Time", value: "1.4 seconds" }
                ]
            },
            {
                name: "Boosters",
                description: "D.Va's mech engages thrusters to fly in the direction she's facing.",
                stats: [
                    { label: "Damage", value: "10 on impact" },
                    { label: "Duration", value: "2 seconds" },
                    { label: "Speed Boost", value: "+125%" },
                    { label: "Cooldown", value: "4 seconds" }
                ]
            },
            {
                name: "Defense Matrix",
                description: "D.Va projects a forward-facing matrix that blocks enemy projectiles for a brief period.",
                stats: [
                    { label: "Duration", value: "2 seconds maximum" },
                    { label: "Recharge Rate", value: "12.5% per second" },
                    { label: "Range", value: "10 meters" },
                    { label: "Width", value: "4 meters" }
                ]
            },
            {
                name: "Micro Missiles",
                description: "D.Va launches a barrage of small rockets that deal damage in a small area on impact.",
                stats: [
                    { label: "Damage", value: "7 per missile, 18 missiles total" },
                    { label: "Duration", value: "1.5 seconds" },
                    { label: "Cooldown", value: "8 seconds" }
                ]
            },
            {
                name: "Self-Destruct (Ultimate)",
                description: "D.Va ejects and overloads her mech's fusion core, causing it to explode after a short delay.",
                stats: [
                    { label: "Damage", value: "1000 at center, scales down with distance" },
                    { label: "Radius", value: "20 meters" },
                    { label: "Detonation Time", value: "3 seconds" },
                    { label: "Ultimate Cost", value: "1848 points" }
                ]
            },
            {
                name: "Call Mech",
                description: "While outside her mech, D.Va can call down a new mech.",
                stats: [
                    { label: "Damage", value: "250 on impact" },
                    { label: "Ultimate Cost", value: "750 points" }
                ]
            }
        ],
        powers: [
            {
                name: "Focused Fusion",
                description: "Fusion Cannon's spread is reduced by 66% and damage falloff range is 20m farther"
            },
            {
                name: "Legendary Loadout",
                description: "Micro Missiles are replaced with 6 Heavy Rockets, which deal 350% more explosive damage and have 100% increased radius"
            },
            {
                name: "Overstocked",
                description: "Gain 1 extra charge of Micro Missiles"
            },
            {
                name: "Countermeasures",
                description: "When you mitigate 150 damage with Defense Matrix, automatically fire 2 Micro Missiles"
            },
            {
                name: "Ignition Burst",
                description: "Boosters leave a trail of lava that deals 30 damage every 1s"
            },
            {
                name: "MEKA Punch",
                description: "While using Boosters, Quick Melee deals 75% more damage. Quick Melee eliminations reset the cooldown of Boosters"
            },
            {
                name: "Tokki Slam",
                description: "During Boosters, use crouch to slam the ground, dealing damage equal to 20% of your max Armor and knocking up enemies hit"
            },
            {
                name: "Facetanking",
                description: "Defense Matrix heals you for 30% of the damage it blocks"
            },
            {
                name: "Ultrawide Matrix",
                description: "Increase the size of Defense Matrix by 20% and its duration by 20%"
            },
            {
                name: "Stat Boost",
                description: "During the first 2s of Boosters, Defense Matrix recovers 100% faster"
            },
            {
                name: "Party Protector",
                description: "When you use Self-Destruct, allies within Self-Destruct radius gains 250 Overhealth for 8s"
            },
            {
                name: "Express Detonation",
                description: "Self-Destruct explosion is triggered 15% faster"
            }
        ],
        items: {
            weapon: [
                {
                    name: "Busan Blaster",
                    cost: 10000,
                    description: "+20% Ability Power, Light Gun gains a secondary fire, which charges up to fire a piercing shot that deals 80 piercing damage"
                },
                {
                    name: "Nano Cola™ Nitrous",
                    cost: 11000,
                    description: "+25 Health, when you eject from your Mech, gain 5% increased max Health and gain Nano Boost for 4s"
                },
                {
                    name: "Chip-Damage Diverter",
                    cost: 10000,
                    description: "+50 Health, when you deal damage to Barriers while in your Mech, gain Shields equal to 10% of the damage dealt, up to 200. Resets when your Mech is destroyed"
                }
            ],
            ability: [
                {
                    name: "Multi-Task Mod",
                    cost: 10000,
                    description: "+10% Weapon Power, Fusion Cannons can now be fired while using Defense Matrix"
                },
                {
                    name: "Solo Spec",
                    cost: 4000,
                    description: "+25 Health, when you mitigate damage with Defense Matrix, gain Shields equal to 10% of the damage mitigated, up to 100. Resets when your Mech is destroyed"
                },
                {
                    name: "Plot Armor",
                    cost: 4000,
                    description: "+25 Armor, while Defense Matrix is active, gain 30% damage reduction against beams"
                }
            ],
            survival: [
                {
                    name: "Singijeon's Pulse Plating",
                    cost: 10000,
                    description: "+50 Health, gain 5% of damage mitigated by Defense Matrix as Ultimate Charge"
                },
                {
                    name: "Galvanized Core",
                    cost: 4000,
                    description: "+25 Health, 25% Boosters Duration"
                },
                {
                    name: "APM AMP",
                    cost: 9000,
                    description: "+50 Shield, when you use Boosters, allies within 16m gain 25% Move Speed for 2s"
                },
                {
                    name: "Mastermind's Mitigator",
                    cost: 10000,
                    description: "Every 300 damage you mitigate with Defense Matrix reduces Micro Missiles cooldown by 1s"
                },
                {
                    name: "Onslaught Ordinance",
                    cost: 4500,
                    description: "+15% Ability Power, the quantity and duration of Micro Missiles is increased by 20%"
                },
                {
                    name: "Macro Missiles",
                    cost: 12000,
                    description: "Micro Missiles deal 25% increased damage and have significantly increased knockback"
                },
                {
                    name: "Dae-hyun's Detonator",
                    cost: 4000,
                    description: "+15% Ability Lifesteal, if your Mech detonates while mid-air, increase Self-Destruct explosion damage and range by 200%"
                },
                {
                    name: "Vesuvius Protocol",
                    cost: 4000,
                    description: "+10% Ability Power, using Self-Destruct drops lava nearby that deals 30 damage every 1s"
                }
            ]
        }
    },
    moira: {
        name: "Moira",
        role: "Support",
        health: 200,
        armor: 0,
        shield: 0,
        abilities: [
            {
                name: "Biotic Grasp",
                description: "Moira's primary fire heals allies in front of her, consuming biotic energy. Her secondary fire damages enemies and restores biotic energy.",
                stats: [
                    { label: "Primary Fire Healing", value: "70 per second" },
                    { label: "Primary Fire Range", value: "15 meters" },
                    { label: "Secondary Fire Damage", value: "50 per second" },
                    { label: "Secondary Fire Range", value: "20 meters" },
                    { label: "Secondary Fire Self-Healing", value: "24 per second" }
                ]
            },
            {
                name: "Biotic Orb",
                description: "Moira launches a rebounding orb that either heals allies or damages enemies.",
                stats: [
                    { label: "Healing Orb", value: "65 per second, 300 total" },
                    { label: "Damage Orb", value: "50 per second, 200 total" },
                    { label: "Duration", value: "7 seconds" },
                    { label: "Cooldown", value: "8 seconds" }
                ]
            },
            {
                name: "Fade",
                description: "Moira becomes invulnerable and gains increased speed for a brief period.",
                stats: [
                    { label: "Duration", value: "0.8 seconds" },
                    { label: "Speed Boost", value: "+250%" },
                    { label: "Cooldown", value: "6 seconds" }
                ]
            },
            {
                name: "Coalescence (Ultimate)",
                description: "Moira channels a long-range beam that heals allies and damages enemies.",
                stats: [
                    { label: "Healing", value: "140 per second" },
                    { label: "Damage", value: "70 per second" },
                    { label: "Self-Healing", value: "50 per second" },
                    { label: "Duration", value: "8 seconds" },
                    { label: "Movement Speed", value: "+40%" },
                    { label: "Ultimate Cost", value: "2380 points" }
                ]
            }
        ],
        powers: [
            {
                name: "Optimal Overflow",
                description: "After you spend 50 Biotic Energy, launch the last selected Biotic Orb with 75% reduced duration"
            },
            {
                name: "Precarious Potency",
                description: "Allies healed by your Biotic Grasp are healed for an additional 20% of Biotic Grasp's healing over 5s"
            },
            {
                name: "Deconstruction",
                description: "After you spend 50 Biotic Energy, deal 20% increased damage for 6s"
            },
            {
                name: "Ethereal Excision",
                description: "While aiming at an enemy's head with Biotic Grasp's secondary fire, gain 30% Lifesteal, 30% Move Speed, and restore 100% increased Biotic Energy"
            },
            {
                name: "Chain Grasp",
                description: "After using Biotic Orb, Biotic Grasp's secondary fire chains to 2 additional targets within 20m for 3s"
            },
            {
                name: "Empowering You",
                description: "Biotic Grasp's secondary fire can target allies, increasing their damage by 15%"
            },
            {
                name: "Cross-Orbal",
                description: "Biotic Orb launches an additional Biotic Orb of the other type with 50% reduced capacity"
            },
            {
                name: "Multiball",
                description: "Biotic Orb launches 2 additional orbs of the chosen type with 85% reduced effectiveness"
            },
            {
                name: "Phantasm",
                description: "When you use Fade, spawn a stationary copy of the last selected Biotic Orb with 50% reduced duration"
            },
            {
                name: "Scientific Deathod",
                description: "While using Fade, passing through enemies grants 5% Ultimate Charge and permanent Overhealth equal to 15% of your max Life"
            },
            {
                name: "Voidhoppers",
                description: "Fade phases other allies within 8m for 0.25s and grants them Overhealth equal to 20% of your max Life"
            },
            {
                name: "Destruction's Divide",
                description: "+25% Coalescence Duration, Coalescence can be toggled between pure healing or pure damage, with 25% greater effect"
            }
        ],
        items: {
            weapon: [
                {
                    name: "High Capacity Tubing", cost: 4000,
                    description: "+10% Weapon Power, Moira can store an additional 50 Biotic Energy, beyond her base maximum of 100"
                },
                {
                    name: "Bio-Needles", cost: 4000,
                    description: "+10% Attack Speed, Biotic Grasp's secondary fire restores 50% more Biotic Energy"
                },
                {
                    name: "Subatomic Splitter", cost: 10000,
                    description: "+10% Weapon Power, +15% Biotic Grasp Secondary Fire Range"
                }
            ],
            ability: [
                {
                    name: "Smart Orbs", cost: 4000,
                    description: "+5% Ability Power, Biotic Orb moves 50% slower while it is healing or dealing damage"
                },
                {
                    name: "Extendrils", cost: 11000,
                    description: "+10% Ability Power, +30% Biotic Orb Tendril Range"
                },
                {
                    name: "Abyss Boots", cost: 4000,
                    description: "+25 Health, while using Fade, you jump 30% higher"
                }
            ],
            survival: [
                {
                    name: "Alternative Energy", cost: 10000,
                    description: "+10% Ability Power, +15% Attack Speed, when you use Fade, refill your Biotic Energy"
                },
                {
                    name: "Levitation Shawl", cost: 4000,
                    description: "+10% Ability Power, coalescence grants free flight while active"
                },
                {
                    name: "Coalegion", cost: 10000,
                    description: "+25 Health, +15% Ability Power, allies healed by Coalescence deal 15% increased damage"
                }
            ]
        }
    },
    reinhardt: {
        name: "Reinhardt",
        role: "Tank",
        health: 500,
        armor: 125,
        shield: 1600,
        abilities: [
            {
                name: "Rocket Hammer",
                description: "Reinhardt's Rocket Hammer is a massive melee weapon with a wide arc that can strike multiple enemies at once.",
                stats: [
                    { label: "Damage", value: "85 per swing" },
                    { label: "Rate of Fire", value: "1 swing per 0.9 seconds" },
                    { label: "Range", value: "5 meters" }
                ]
            },
            {
                name: "Barrier Field",
                description: "Reinhardt deploys a broad, rectangular energy barrier in front of him that blocks enemy attacks.",
                stats: [
                    { label: "Shield Health", value: "1600" },
                    { label: "Regen Rate", value: "144 per second" },
                    { label: "Regen Delay", value: "2 seconds after shield down" }
                ]
            },
            {
                name: "Charge",
                description: "Reinhardt charges forward in a straight line, pinning the first enemy he hits against a wall for massive damage.",
                stats: [
                    { label: "Pin Damage", value: "300" },
                    { label: "Knockback Damage", value: "50" },
                    { label: "Speed", value: "16.7 meters per second" },
                    { label: "Range", value: "Up to 55 meters" },
                    { label: "Cooldown", value: "10 seconds" }
                ]
            },
            {
                name: "Fire Strike",
                description: "Reinhardt launches a flaming projectile that pierces through enemies and barriers, damaging all enemies it passes through.",
                stats: [
                    { label: "Damage", value: "100" },
                    { label: "Speed", value: "25 meters per second" },
                    { label: "Cooldown", value: "6 seconds" }
                ]
            },
            {
                name: "Earthshatter (Ultimate)",
                description: "Reinhardt slams his hammer into the ground, knocking down all enemies in front of him.",
                stats: [
                    { label: "Damage", value: "50" },
                    { label: "Stun Duration", value: "2.5 seconds" },
                    { label: "Range", value: "20 meters forward, 6 meters wide" },
                    { label: "Ultimate Cost", value: "1650 points" }
                ]
            }
        ],
        powers: [
            {
                name: "Smashing!",
                description: "When you deal damage with Rocket Hammer, gain 3% Move Speed and 5% Weapon Lifesteal for 3s, stacking up to 5 times."
            },
            {
                name: "Feeling The Burn",
                description: "Every 3rd Rocket Hammer swing burns the target, dealing 30% extra damage over 2s."
            },
            {
                name: "Wilhelmwagen",
                description: "While Barrier Field is deployed, you heal for 5% of the damage it mitigates and gain 30% Move Speed."
            },
            {
                name: "To Me, My Friends!",
                description: "While Barrier Field is deployed, allies within 5m are healed equal to 3% of your max Life every 1s."
            },
            {
                name: "Amplification Barrier",
                description: "Friendly projectiles that pass through your Barrier Field deal 15% more damage."
            },
            {
                name: "Barrier Reconstruction",
                description: "When you deal damage with Rocket Hammer or Fire Strike, restore health to Barrier Field equal to 10% of its max Health."
            },
            {
                name: "Vanguard",
                description: "Charge grants nearby allies Overhealth equal to 10% of your max Life and 20% Move Speed for 3s."
            },
            {
                name: "Shield Stampede",
                description: "+50% Charge Knockback Power During Charge, automatically deploy Barrier Field."
            },
            {
                name: "Vroom Boom Boom",
                description: "During Charge, colliding with a wall triggers an explosion that deals 30% of Charge's pin damage."
            },
            {
                name: "Impact Burst",
                description: "Fire Strike triggers an explosion the first time it hits an enemy, dealing 20% of its damage in a 3m radius."
            },
            {
                name: "Magma Strike",
                description: "If Fire Strike is cast twice within 2s, the second strike leaves a trail of lava that Burns enemies."
            },
            {
                name: "Blazing Blitz",
                description: "After using Earthshatter, every Rocket Hammer swing launches a Fire Strike for 4s."
            }
        ],
        items: {
            weapon: [
                {
                    name: "Ironclad Cleats", cost: 3750,
                    description: "+25 Armor, +5% Weapon Power, +40% Knockback Resist"
                },
                {
                    name: "Rocket Boots", cost: 4000,
                    description: "+25 Health, holding crouch increases the height of your next jump by up to 200%"
                },
                {
                    name: "Dampener Grip", cost: 10000,
                    description: "+10% Ability Power, +10% Attack Speed, when you deal damage with Rocket Hammer, reduce the cooldown of your abilities by 1s"
                }
            ],
            ability: [
                {
                    name: "Plan Z", cost: 11000,
                    description: "+10% Weapon Power, Gain 5% Attack Speed for every 100 missing Life, up to 25%"
                },
                {
                    name: "Boost Recycler", cost: 4000,
                    description: "+10% Ability Power, if Charge is interrupted by stun, sleep, or hinder, refund 50% of Charge's cooldown"
                },
                {
                    name: "Crusader's Cure",
                    cost: 3750,
                    description: "+25 Health, using Charge cleanses all negative effects"
                }
            ],
            survival: [
                {
                    name: "Gryphon Glider", cost: 10000,
                    description: "+25 Health, +10% Ability Lifesteal, you can now fly during Charge"
                },
                {
                    name: "Overclocked Barrier",
                    cost: 4000,
                    description: "+25 Health, +20% Barrier Field Health, +20% Barrier Field Size"
                },
                {
                    name: "Infusion Generator", cost: 10000,
                    description: "+25 Health, Increase Barrier Field Health by 100% of your max Life"
                },
                {
                    name: "Phoenix Protocol", cost: 10000,
                    description: "+50 Health, Barrier Field regenerates 50% faster and begins regenerating 50% sooner after being destroyed"
                },
                {
                    name: "Chimera's Maw",
                    cost: 4000,
                    description: "+10% Ability Power, +35% Fire Strike Radius"
                },
                {
                    name: "Rocket Strike", cost: 10000,
                    description: "+20% Ability Power, +50% Fire Strike Projectile Speed"
                }
            ]
        }
    },
    soldier76: {
        name: "Soldier: 76",
        role: "Damage",
        health: 200,
        armor: 0,
        shield: 0,
        abilities: [
            {
                name: "Heavy Pulse Rifle",
                description: "Soldier: 76's primary weapon is an automatic rifle with good accuracy and medium range.",
                stats: [
                    { label: "Damage", value: "20 per shot" },
                    { label: "Fire Rate", value: "9 rounds per second" },
                    { label: "Ammo", value: "30" },
                    { label: "Reload Time", value: "1.5 seconds" }
                ]
            },
            {
                name: "Helix Rockets",
                description: "Soldier: 76 fires a burst of rockets that spiral outward and explode on impact, dealing significant damage.",
                stats: [
                    { label: "Damage", value: "120 direct hit, 80 splash" },
                    { label: "Splash Radius", value: "3 meters" },
                    { label: "Cooldown", value: "6 seconds" }
                ]
            },
            {
                name: "Sprint",
                description: "Soldier: 76 can run faster for as long as the ability is active.",
                stats: [
                    { label: "Speed Boost", value: "+50%" },
                    { label: "Duration", value: "Unlimited (toggle)" }
                ]
            },
            {
                name: "Biotic Field",
                description: "Soldier: 76 deploys a biotic emitter that heals himself and allies within its area of effect.",
                stats: [
                    { label: "Healing", value: "40 health per second" },
                    { label: "Duration", value: "5 seconds" },
                    { label: "Radius", value: "4.5 meters" },
                    { label: "Cooldown", value: "15 seconds" }
                ]
            },
            {
                name: "Tactical Visor (Ultimate)",
                description: "Soldier: 76's tactical visor automatically aims his weapon at targets in view, allowing for perfect tracking.",
                stats: [
                    { label: "Duration", value: "6 seconds" },
                    { label: "Ultimate Cost", value: "2310 points" }
                ]
            }
        ],
        powers: [
            {
                name: "Rocket Visor",
                description: "After using Helix Rocket, activate Tactical Visor briefly"
            },
            {
                name: "Chaingun",
                description: "While continuously shooting Pulse Rifle, each shot grants 0.5% Weapon Power, stacking up to 100 times"
            },
            {
                name: "Biotic Bullseye",
                description: "While in Biotic Field, critical hits restore 10% Max Ammo and extend the field's duration by 0.5s (up to 5s)"
            },
            {
                name: "Back Off",
                description: "Enemies within your Biotic Field take damage equal to 100% of its healing output"
            },
            {
                name: "On Me!",
                description: "Biotic Field moves with you and grants you 20% increased max Health while active"
            },
            {
                name: "Frontliners",
                description: "Allies in range of your Biotic Field when it spawns gain Overhealth equal to 40% of your max Life for 3s"
            },
            {
                name: "Hunker Down",
                description: "Helix Rocket damage creates a Biotic Field with shorter duration at your position"
            },
            {
                name: "Cratered",
                description: "Increase Helix Rocket explosion radius and explosion damage"
            },
            {
                name: "Double Helix",
                description: "Helix Rocket fires a second homing Helix Rocket that deals 70% reduced damage"
            },
            {
                name: "Man On The Run",
                description: "During Sprint, restore 10% of your Ammo every 1s and increase your Max Ammo by 10% until you reload, stacking up to 10 times"
            },
            {
                name: "Track and Field",
                description: "During Sprint, Biotic Field cooldown refreshes 150% faster"
            },
            {
                name: "Peripheral Pulse",
                description: "During Tactical Visor, Pulse Rifle shoots at 1 additional enemy, dealing 50% damage"
            }
        ],
        items: {
            weapon: [
                {
                    name: "Battery Pack",
                    cost: 4000,
                    description: "+10% Ability Power, +30% Biotic Field Duration"
                },
                {
                    name: "Rapid Response Radius",
                    cost: 10000,
                    description: "+10% Ability Power, +30% Biotic Field Radius, Biotic Field heals allies below 50% Life for 20% more"
                },
                {
                    name: "Bomb Diffusal Boots",
                    cost: 4000,
                    description: "+25 Health, +5% Weapon Power, Helix Rocket self-knockback is increased by 200% and no longer damages yourself"
                }
            ],
            ability: [
                {
                    name: "Pulse Converter",
                    cost: 4000,
                    description: "+5% Attack Speed, +5% Cooldown Reduction, Helix Rocket damage restores 20% of your ammo"
                },
                {
                    name: "Compression Fatigues",
                    cost: 4000,
                    description: "+25 Health, +5% Attack Speed, +25% Sprint Move Speed"
                },
                {
                    name: "Iron Lung",
                    cost: 4000,
                    description: "+25 Health, while using Sprint, gain Overhealth equal to 5% of your max Life every 1s, up to 25%, for 5s"
                }
            ],
            survival: [
                {
                    name: "Endgame Equalizer",
                    cost: 10000,
                    description: "+25 Health, +15% Ability Power, when you spend your Ultimate Charge, reset all ability cooldowns. While Tactical Visor is active, gain 20% Cooldown Reduction"
                }
            ]
        }
    },
    kiriko: {
        name: "Kiriko",
        role: "Support",
        health: 200,
        armor: 0,
        shield: 0,
        abilities: [
            {
                name: "Healing Ofuda",
                description: "Kiriko throws healing talismans that seek out and heal allies.",
                stats: [
                    { label: "Healing", value: "30 per ofuda" },
                    { label: "Rate of Fire", value: "5 per second" },
                    { label: "Ammo", value: "10" },
                    { label: "Reload Time", value: "1.5 seconds" }
                ]
            },
            {
                name: "Kunai",
                description: "Kiriko throws kunai that deal increased damage on headshots.",
                stats: [
                    { label: "Damage", value: "40 body, 120 headshot" },
                    { label: "Fire Rate", value: "2.5 per second" },
                    { label: "Projectile Speed", value: "50 meters per second" }
                ]
            },
            {
                name: "Swift Step",
                description: "Kiriko teleports to an ally, phasing out of existence during the teleport and cleansing debuffs.",
                stats: [
                    { label: "Range", value: "35 meters" },
                    { label: "Cooldown", value: "7 seconds" }
                ]
            },
            {
                name: "Protection Suzu",
                description: "Kiriko throws a protection charm that makes allies briefly invulnerable and cleanses negative effects.",
                stats: [
                    { label: "Invulnerability Duration", value: "0.75 seconds" },
                    { label: "Healing", value: "50" },
                    { label: "Area of Effect", value: "3 meters" },
                    { label: "Cooldown", value: "14 seconds" }
                ]
            },
            {
                name: "Kitsune Rush (Ultimate)",
                description: "Kiriko summons a fox spirit that rushes forward, creating a path that increases ally movement speed, attack speed, and cooldown reduction.",
                stats: [
                    { label: "Duration", value: "8 seconds" },
                    { label: "Movement Speed Bonus", value: "+50%" },
                    { label: "Attack Speed Bonus", value: "+25%" },
                    { label: "Cooldown Reduction", value: "50%" },
                    { label: "Ultimate Cost", value: "1980 points" }
                ]
            }
        ],
        powers: [
            {
                name: "Foxy Fireworks",
                description: "After reloading, your next 3 Kunai explode on contact, dealing 20 damage to nearby enemies"
            },
            {
                name: "Keen Kunai",
                description: "Kunai critical hits decreases active ability cooldowns by 25% and refund 3 ammo"
            },
            {
                name: "Triple Threat",
                description: "After using Swift Step, for 4s, your secondary fire throws 2 additional Kunai in a spread that deal 50% less damage"
            },
            {
                name: "Leaf On The Wind",
                description: "Healing Ofuda bounces to another ally up to 2 times, healing for 30% of the normal amount"
            },
            {
                name: "Self-Care",
                description: "When you use Healing Ofuda, heal yourself for 5% of your max Life"
            },
            {
                name: "Supported Shooting",
                description: "When Healing Ofuda heals allies, grant them 25% increased Attack Speed for 3s"
            },
            {
                name: "Fleet Foot",
                description: "Swift Step can be used directionally without a target"
            },
            {
                name: "Clone Conjuration",
                description: "After using Swift Step, create a clone of yourself that lasts for 5s"
            },
            {
                name: "Two-Zu",
                description: "Protection Suzu gains an additional charge"
            },
            {
                name: "Cleansing Charge",
                description: "When you cleanse negative effects with Protection Suzu, gain 5% Ultimate Charge for each hero cleansed"
            },
            {
                name: "Crossing Guard",
                description: "Kitsune Rush now also reduces enemies Move Speed by 50% for 2s"
            },
            {
                name: "Spirit Veil",
                description: "Kitsune Rush cast makes Kiriko invulnerable for 4s and cleansed of negative effects"
            }
        ],
        items: {
            weapon: [
                {
                    name: "Kitsune Kicks", cost: 4000,
                    description: "+10% Move Speed, gain the ability to Double Jump"
                },
                {
                    name: "Cyclist Gloves", cost: 5000,
                    description: "When you use an ability gain 20% Attack Speed for 3s"
                },
                {
                    name: "Asa's Armaments",
                    cost: 4000,
                    description: "+10% Attack Speed, Kunai bounce off surfaces 1 time"
                }
            ],
            ability: [
                {
                    name: "Ryōta's Reloader",
                    cost: 5000,
                    description: "+35% Reload Speed, after casting an ability, restore 100% of your ammo"
                },
                {
                    name: "Teamwork Toolkit", cost: 5000,
                    description: "+10% Weapon Power, when you heal an ally, grant them 10% increased Move Speed for 3s"
                },
                {
                    name: "Farsight Focus Sash", cost: 5000,
                    description: "+10% Weapon Power, when you deal damage, gain 200% Healing Ofuda Projectile Speed for 5s"
                }
            ],
            survival: [
                {
                    name: "Spirits' Guidance",
                    cost: 10000,
                    description: "+15% Weapon Power, 100% Healing Ofuda Projectile Speed"
                },
                {
                    name: "Donut Delivery", cost: 10000,
                    description: "+20% Ability Power, Swift Step heals nearby allies by 80 Life over 2s"
                },
                {
                    name: "Goddess's Aura",
                    cost: 10000,
                    description: "+25 Health, after using Swift Step, you gain 100 Overhealth for 4s"
                },
                {
                    name: "Talisman of Velocity", cost: 10000,
                    description: "+15% Ability Power, Protection Suzu grants 25% Attack Speed and 25% Move Speed for 4s"
                },
                {
                    name: "Talisman of Life", cost: 11000,
                    description: "+20% Ability Power, Protection Suzu grants 100 Overhealth for 5s"
                },
                {
                    name: "Eye Of The Yokai",
                    cost: 3000,
                    description: "+10% Ability Power, 35% Kitsune Rush Duration"
                },
                {
                    name: "Our Bikes", cost: 10000,
                    description: "+25 Health, +15% Ability Power, allies affected by Kitsune Rush are healed for 80 every 1s"
                }
            ]
        }
    },
    genji: {
        name: "Genji",
        role: "Damage",
        health: 200,
        armor: 0,
        shield: 0,
        abilities: [
            {
                name: "Shuriken",
                description: "Genji throws three deadly shuriken in quick succession. He can throw either a single, precise volley or fan them out to cover more ground.",
                stats: [
                    { label: "Primary Fire Damage", value: "28 per shuriken" },
                    { label: "Secondary Fire Damage", value: "28 per shuriken" },
                    { label: "Fire Rate", value: "3 volleys per second" },
                    { label: "Ammo", value: "30" },
                    { label: "Reload Time", value: "1.5 seconds" }
                ]
            },
            {
                name: "Swift Strike",
                description: "Genji darts forward, slashing with his katana and passing through foes in his path.",
                stats: [
                    { label: "Damage", value: "50" },
                    { label: "Range", value: "15 meters" },
                    { label: "Cooldown", value: "8 seconds" }
                ]
            },
            {
                name: "Deflect",
                description: "Genji reflects incoming projectiles towards the direction he's aiming.",
                stats: [
                    { label: "Duration", value: "2 seconds" },
                    { label: "Cooldown", value: "8 seconds" }
                ]
            },
            {
                name: "Cyber-Agility (Passive)",
                description: "Genji can climb walls and perform double jumps.",
                stats: [
                    { label: "Wall Climb Height", value: "Up to 10 meters" }
                ]
            },
            {
                name: "Dragonblade (Ultimate)",
                description: "Genji brandishes his katana for a brief period, drastically increasing his attack power and lethality.",
                stats: [
                    { label: "Damage", value: "120 per swing" },
                    { label: "Swing Rate", value: "1 per 0.9 seconds" },
                    { label: "Duration", value: "6 seconds" },
                    { label: "Ultimate Cost", value: "1800 points" }
                ]
            }
        ],
        powers: [
            {
                name: "Wyrm's Maw",
                description: "Targets hit by your Shurikens take 10% more damage from Swift Strike for 4s, stacking up to 5 times"
            },
            {
                name: "Laceration",
                description: "Swift Strike deals 25% additional damage over 3s to enemies hit"
            },
            {
                name: "Iaido Strike",
                description: "After Deflect ends, you quickly swing your Dragonblade once"
            },
            {
                name: "Hidden Blade",
                description: "Gain 50% Melee Lifesteal and +25 Quick Melee Damage"
            },
            {
                name: "Forged Under Fire",
                description: "While Deflect is active, heal for 60% of the damage it prevents"
            },
            {
                name: "Deflect-o-Bot",
                description: "+50% Deflected Projectile Speed, During the first 1.5s of Deflect, automatically deflect projectiles towards enemies"
            },
            {
                name: "Sacred Shuriken",
                description: "Shuriken's primary fire throws 2 additional Shuriken that don't consume any extra ammo"
            },
            {
                name: "Hanamura Healing",
                description: "Critical hits and Swift Strike grant Overhealth equal to 25% of their damage dealt for 5s"
            },
            {
                name: "Spirit of Sojiro",
                description: "When Deflect stops incoming damage, reduce the cooldown of Swift Strike by 1s, up to 5s"
            },
            {
                name: "Dragon's Breath",
                description: "Dragonblade swings also fire a large piercing projectile that deals 50% of Dragonblade's damage"
            },
            {
                name: "Cybernetic Speed",
                description: "Dealing damage with Shuriken grants 2% Shuriken Attack Speed for 3s, stacking up to 15 times"
            },
            {
                name: "Hashimoto's Bane",
                description: "After using an ability, your next secondary fire throws 2 extra Shuriken that seek enemies but deal 50% less damage"
            }
        ],
        items: {
            weapon: [
                {
                    name: "Spiked Grip", cost: 3750,
                    description: "+30% Max Ammo, while climbing restore 20% of your ammo every 1s"
                },
                {
                    name: "Swift-Loader", cost: 10000,
                    description: "+10% Attack Speed, +30% Max Ammo, damaging an enemy with Swift Strike restores 20% of your ammo"
                },
                {
                    name: "Enduring Edge", cost: 10000,
                    description: "+10% Weapon Power, 4s Dragonblade Duration"
                }
            ],
            ability: [
                {
                    name: "Ambusher Optics", cost: 10000,
                    description: "+25% Quick Melee damage, Quick Melee can critically hit when hitting enemies from behind, dealing 50% increased damage"
                },
                {
                    name: "Traversal Kinetics", cost: 3750,
                    description: "Swift Strike cooldown is reduced by 50% if it deals no damage"
                },
                {
                    name: "Ninja Soles", cost: 4000,
                    description: "+5% Cooldown Reduction, +15% Move Speed during Deflect"
                }
            ],
            survival: [
                {
                    name: "Clean Sweep", cost: 10000,
                    description: "+10% Ability Power, +15% Ability Lifesteal, +50% Swift Strike Width"
                },
                {
                    name: "Deflecting Dash", cost: 10000,
                    description: "+15% Ability Power, during Swift Strike, deflect incoming projectiles toward your reticle"
                },
                {
                    name: "Equilibrium Gear", cost: 4000,
                    description: "+25 Health, while climbing, heal 5% of your Life every 1s"
                },
                {
                    name: "Anti-Beam Coating", cost: 4000,
                    description: "+25 Armor, +5% Attack Speed, Deflect blocks Beam attacks"
                },
                {
                    name: "Sparrowhawk Feather", cost: 4000,
                    description: "+25 Health, Gain an additional jump"
                },
                {
                    name: "Transference Delta", cost: 10000,
                    description: "15% Ultimate Cost Reduction, convert 100 Health to Armor, when you use Dragonblade, heal your Armor fully"
                },
                {
                    name: "Slicy Coolant", cost: 10000,
                    description: "+50 Armor, +5% Cooldown Reduction, +1s Deflect Duration"
                }
            ]
        }
    },
    mei: {
        name: "Mei",
        role: "Damage",
        health: 250,
        armor: 0,
        shield: 0,
        abilities: [
            {
                name: "Endothermic Blaster",
                description: "Mei's primary fire shoots a short-range freeze ray that slows and eventually freezes enemies. Her secondary fire launches an icicle projectile.",
                stats: [
                    { label: "Primary Fire Damage", value: "55 per second" },
                    { label: "Freeze Duration", value: "1.5 seconds" },
                    { label: "Secondary Fire Damage", value: "75" },
                    { label: "Secondary Fire Rate", value: "1 per 0.8 seconds" },
                    { label: "Ammo", value: "200" },
                    { label: "Reload Time", value: "1.5 seconds" }
                ]
            },
            {
                name: "Cryo-Freeze",
                description: "Mei encases herself in a block of ice, healing herself and becoming invulnerable to damage.",
                stats: [
                    { label: "Healing", value: "150 over duration" },
                    { label: "Duration", value: "4 seconds" },
                    { label: "Cooldown", value: "12 seconds" }
                ]
            },
            {
                name: "Ice Wall",
                description: "Mei creates a massive ice wall that can be used to block damage, obstruct enemy movement, or help allies reach high places.",
                stats: [
                    { label: "Health", value: "400 per pillar" },
                    { label: "Duration", value: "5 seconds" },
                    { label: "Cooldown", value: "13 seconds" }
                ]
            },
            {
                name: "Blizzard (Ultimate)",
                description: "Mei deploys a weather-modification drone that freezes enemies in a wide radius.",
                stats: [
                    { label: "Damage", value: "100 over duration" },
                    { label: "Radius", value: "10 meters" },
                    { label: "Duration", value: "5 seconds" },
                    { label: "Ultimate Cost", value: "1680 points" }
                ]
            }
        ],
        powers: [
            {
                name: "Permafrost",
                description: "Increase your Max Health by 50% of your Ability Power"
            },
            {
                name: "Slowball",
                description: "Endothermic Blaster's secondary fire now shoots a snowball that applies 30% slow for 1s on critical hit"
            },
            {
                name: "Extendothermics",
                description: "Endothermic Blaster's primary fire range is increased by 6m"
            },
            {
                name: "Frost Armor",
                description: "Gain Armor equal to 5% of the primary fire damage you deal, up to 100, until the end of the round"
            },
            {
                name: "Snowball Flight",
                description: "Jumping while mid-air creates a large Ice Wall pillar under you. (12s Cooldown)"
            },
            {
                name: "Twice As Ice",
                description: "When you use Cryo-Freeze, reset the next cooldown of Ice Wall"
            },
            {
                name: "Iceberg",
                description: "Ice Wall spawns a mini Blizzard that slows enemies"
            },
            {
                name: "Cryclone",
                description: "Cryo-Freeze spawns a mini Blizzard that slows enemies"
            },
            {
                name: "Coulder",
                description: "Cryo-Freeze now encases you in a rolling iceball that can knock back enemies and deal 20 damage"
            },
            {
                name: "Frost Nova",
                description: "When Cryo-Freeze ends, knock back nearby enemies, dealing 60 damage"
            },
            {
                name: "Blizznado",
                description: "While within Blizzard, heal 5% of your Life every 1s"
            },
            {
                name: "Avalanche",
                description: "Visible enemies within 20m of the Blizzard are slowed by 25%"
            },
            {
                name: "Winter's Protection",
                description: "Allies within Blizzard gains 10 temporary Overhealth per second"
            }
        ],
        items: {
            weapon: [
                {
                    name: "Snowboot", cost: 10000,
                    description: "+15% Attack Speed, Frozen ground increases Mei's Movement Speed by 35%"
                },
                {
                    name: "Coldspot", cost: 4000,
                    description: "+25 Health, Primary Fire and Blizzard can remove burn"
                },
                {
                    name: "Focused Flurries", cost: 10000,
                    description: "+15% Attack Speed, Max Ammo is increased by 75% but reloading takes 50% longer"
                }
            ],
            ability: [
                {
                    name: "Sturdy Snowfort", cost: 10000,
                    description: "+15% Ability Power, Ability Power is increased by 5% per each spawned Ice Pillars"
                },
                {
                    name: "Ice Sheet", cost: 10000,
                    description: "+50 Health, Ice Wall Duration is increased by 3 seconds and health is increased by 100%"
                },
                {
                    name: "Meicicle", cost: 4000,
                    description: "+25 Health, Cryo-Freeze duration is increased by 25%"
                }
            ],
            survival: [
                {
                    name: "Ecopoint Cryobed", cost: 10000,
                    description: "+20% Ability Power, on near Death, go into Cryo-Freeze and gain 15% Ultimate Charge. Can happen once every round"
                },
                {
                    name: "Icy Veins", cost: 10000,
                    description: "+10% Ability Power, Blizzard deals 100% increased damage"
                },
                {
                    name: "Himalayan Hat", cost: 10000,
                    description: "+10% Attack Speed, while within Blizzard, gain 10% Attack Speed"
                }
            ]
        }
    },
    zarya: {
        name: "Zarya",
        role: "Tank",
        health: 250,
        armor: 0,
        shield: 225,
        abilities: [
            {
                name: "Particle Cannon",
                description: "Zarya's primary fire shoots a short-range beam, while secondary fire launches an explosive charge.",
                stats: [
                    { label: "Primary Fire Damage", value: "95-190 per second (based on energy)" },
                    { label: "Secondary Fire Damage", value: "45-90 per hit (based on energy)" },
                    { label: "Secondary Fire Splash Damage", value: "0.2-46 (based on energy and distance)" },
                    { label: "Ammo", value: "100" },
                    { label: "Reload Time", value: "1.5 seconds" }
                ]
            },
            {
                name: "Particle Barrier",
                description: "Zarya surrounds herself with a barrier that absorbs damage and converts it to energy, increasing her weapon damage.",
                stats: [
                    { label: "Barrier Health", value: "200" },
                    { label: "Duration", value: "2 seconds" },
                    { label: "Cooldown", value: "10 seconds" },
                    { label: "Energy Gain", value: "1 energy per 5 damage absorbed" }
                ]
            },
            {
                name: "Projected Barrier",
                description: "Zarya surrounds an ally with a barrier that absorbs damage and converts it to energy, increasing her weapon damage.",
                stats: [
                    { label: "Barrier Health", value: "200" },
                    { label: "Duration", value: "2 seconds" },
                    { label: "Cooldown", value: "8 seconds" },
                    { label: "Energy Gain", value: "1 energy per 5 damage absorbed" }
                ]
            },
            {
                name: "Energy (Passive)",
                description: "Damage absorbed by barriers increases Zarya's weapon damage.",
                stats: [
                    { label: "Max Energy", value: "100" },
                    { label: "Decay Rate", value: "1.6 per second" },
                    { label: "Damage Bonus", value: "1% per energy" }
                ]
            },
            {
                name: "Graviton Surge (Ultimate)",
                description: "Zarya launches a gravity bomb that pulls enemies to its location and prevents their movement.",
                stats: [
                    { label: "Damage", value: "5 per second" },
                    { label: "Radius", value: "6 meters" },
                    { label: "Duration", value: "4 seconds" },
                    { label: "Ultimate Cost", value: "1680 points" }
                ]
            }
        ],
        powers: [
            {
                name: "Pre-Workout",
                description: "Gain Lifesteal equal to 20% of Energy"
            },
            {
                name: "No Limits",
                description: "Maximum Energy increased to 150. Energy always decays above 100 Energy at a 150% faster rate"
            },
            {
                name: "Piercing Beam",
                description: "Above 80 Energy, Particle Cannon's primary fire will pierce enemies"
            },
            {
                name: "Particle Accelerator",
                description: "Gain 15% Attack Speed for Particle Cannon's secondary fire. After using an ability, quadruple this bonus for 5s"
            },
            {
                name: "Volskaya Vortex",
                description: "After using a Barrier, Particle Cannon's next secondary fire spawns a slowing vortex that deals 80 damage over 2s"
            },
            {
                name: "Lifelift",
                description: "+50% Particle Barrier Size, Increase Barrier Health by 50% of Bonus Max Life"
            },
            {
                name: "Barrier Benefits",
                description: "When a Barrier expires, grant Overhealth equal to 50% of remaining Barrier health to the target for 3s"
            },
            {
                name: "Major Flex",
                description: "Barrier knocks back and deals 25 damage, increased by Energy, to enemies within 5m every 1s"
            },
            {
                name: "Containment Shield",
                description: "Barrier heals 20 Life, increased by Energy, and grants 20% Move Speed while active"
            },
            {
                name: "Here To Spot You",
                description: "Projected Barrier pulls you to the targeted ally and heals you for 20% of Max Life over 3s"
            },
            {
                name: "Graviton Anomaly",
                description: "25% Ultimate Cost Reduction, Graviton Surge base damage is increased to 30 and increased by Energy, but has 50% reduced duration"
            }
        ],
        items: {
            weapon: [
                {
                    name: "Hybrid Battery", cost: 4000,
                    description: "+5% Weapon Power, Energy cannot be reduced below 20"
                },
                {
                    name: "Bigger Beam", cost: 10000,
                    description: "+10% Weapon Power, Particle Cannon's primary fire range is increased by 20%"
                },
                {
                    name: "Blastproof Boots", cost: 3750,
                    description: "+25 Health, +5% Movement Speed, Particle Cannon's secondary fire self-knockback is increased by 100% and no longer damages yourself"
                }
            ],
            ability: [
                {
                    name: "Light Launcher",
                    cost: 4000,
                    description: "+15% Weapon Power, Consecutive Particle Cannon Secondary Fire shots consume 20% less Ammo, up to 60%, for your current magazine"
                },
                {
                    name: "Jumper Cables", cost: 4000,
                    description: "+25 Shield, +5% Ability Power, after using a Barrier, instantly start regenerating Shields"
                },
                {
                    name: "Protein Shake", cost: 4000,
                    description: "+25 Health, +15% Quick Melee Damage, while Particle Barrier is active, become Unstoppable and Quick Melee knocks back enemies"
                }
            ],
            survival: [
                {
                    name: "Beyond Barrier", cost: 4000,
                    description: "+10% Ability Power, +20% Projected Barrier Range"
                },
                {
                    name: "Lynx's Datadrive",
                    cost: 10000,
                    description: "+25 Health, +10% Ability Power, Using Projected Barrier on an ally refunds 25% of cooldown"
                },
                {
                    name: "Superconductor", cost: 10000,
                    description: "+25 Health, +15% Ability Power, +40% Barrier Duration"
                }
            ]
        }
    },
    
junkerqueen: {
    name: "Junker Queen",
    role: "Tank",
    health: 425,
    armor: 0,
    shield: 0,
    abilities: [
        {
            name: "Scattergun",
            description: "Junker Queen's shotgun deals significant damage at close range.",
            stats: [
                { label: "Damage", value: "6 per pellet, 15 pellets per shot" },
                { label: "Fire Rate", value: "1.33 shots per second" },
                { label: "Ammo", value: "6" },
                { label: "Reload Time", value: "1.5 seconds" }
            ]
        },
        {
            name: "Jagged Blade",
            description: "Junker Queen throws a knife that wounds enemies and can be recalled, pulling the first enemy hit toward her.",
            stats: [
                { label: "Damage", value: "80" },
                { label: "Wound Damage", value: "15 over 3 seconds" },
                { label: "Cooldown", value: "6 seconds" }
            ]
        },
        {
            name: "Commanding Shout",
            description: "Junker Queen rallies nearby allies, granting temporary health and increased movement speed.",
            stats: [
                { label: "Temporary Health (self)", value: "200" },
                { label: "Temporary Health (allies)", value: "100" },
                { label: "Movement Speed", value: "+30%" },
                { label: "Duration", value: "5 seconds" },
                { label: "Cooldown", value: "15 seconds" }
            ]
        },
        {
            name: "Carnage",
            description: "Junker Queen swings a large axe in an arc in front of her, wounding enemies hit.",
            stats: [
                { label: "Damage", value: "90" },
                { label: "Wound Damage", value: "40 over 3 seconds" },
                { label: "Cooldown", value: "8 seconds" }
            ]
        },
        {
            name: "Adrenaline Rush (Passive)",
            description: "Junker Queen heals from wounds applied by her abilities.",
            stats: [
                { label: "Healing", value: "100% of wound damage" }
            ]
        },
        {
            name: "Rampage (Ultimate)",
            description: "Junker Queen charges forward, wounding enemies she damages and preventing them from being healed.",
            stats: [
                { label: "Damage", value: "90" },
                { label: "Wound Damage", value: "100 over 5 seconds" },
                { label: "Anti-Heal Duration", value: "3.5 seconds" },
                { label: "Ultimate Cost", value: "1680 points" }
            ]
        }
    ],
    powers: [
        {
            name: "Thrill of Battle",
            description: "Adrenaline Rush also heals allies within 12m for 50% of the amount it heals you"
        },
        {
            name: "Royal Bullets",
            description: "Scattergun critical hits against targets within 12m applies Wound for 30 damage over 3s"
        },
        {
            name: "Twist The Knife",
            description: "Scattergun critical hits extend the duration of all Wounds on the target by 0.5s"
        },
        {
            name: "Blade Parade",
            description: "Holding Jagged Blade charges it, increasing its damage by up to 35% and causing it to knockback"
        },
        {
            name: "Cut 'Em, Gracie!",
            description: "Each enemy hit by Jagged Blade while it returns to you reduces its cooldown by 1s"
        },
        {
            name: "Merciless Magnetism",
            description: "Using Commanding Shout causes your Jagged Blade to home to a target"
        },
        {
            name: "Soaring Stone",
            description: "Carnage becomes a leaping strike if you jump during its cast time"
        },
        {
            name: "Chop Chop",
            description: "Carnage gains an additional charge but its cooldown reduction per hit is reduced to 1s"
        },
        {
            name: "Reckoner's Roar",
            description: "Using Commanding Shout Wounds enemies within 10m for 30 damage over 3s"
        },
        {
            name: "Let's Go Win",
            description: "Eliminations reset the cooldown of Commanding Shout"
        },
        {
            name: "Bloodcrazed",
            description: "Rampage and Carnage gives 15% of Max Life as Overhealth per hit"
        },
        {
            name: "Bow Down",
            description: "Rampage now also knocks down enemies hit for 1.5s"
        }
    ],
    items: {
        weapon: [
            {
                name: "Dez's Damage Dampeners",
                cost: 4000,
                description: "+25 Health, +50% Knockback Resist, when knocked back, gain 25% increased Move Speed for 3s"
            },
            {
                name: "Rebellious Spirit",
                cost: 4000,
                description: "+25 Health, when Wound gets removed instead of expiring, gain 10% of Max Life as Overhealth, up to 150"
            },
            {
                name: "Shred and Lead",
                cost: 10000,
                description: "+33% Max Ammo, +10% Weapon Lifesteal, when you Wound an enemy, gain 10% Attack Speed for 5s, stacking up to 3 times"
            }
        ],
        ability: [
            {
                name: "Bloodhound Mask",
                cost: 12000,
                description: "+15% Weapon Power, Gain 5% Weapon Power for each enemy with a Wound within 12m"
            },
            {
                name: "Slicing Spree",
                cost: 3500,
                description: "+10% Move Speed, while within 12m of an enemy with a Wound, gain 10% Move Speed and 5% Attack Speed"
            },
            {
                name: "Gutpunch Gauntlet",
                cost: 4000,
                description: "+10% Weapon Power, while not holding Jagged Blade, Quick Melee deals 75% more damage and knocks back"
            }
        ],
        survival: [
            {
                name: "Bigger Magnet",
                cost: 4000,
                description: "+10% Ability Power, Jagged Blade's pull strength is increased by 35%"
            },
            {
                name: "Scav Scraps",
                cost: 10000,
                description: "+50 Health, +5% Cooldown Reduction, Carnage and Jagged Blade impact damage grants Overhealth equal to 40% of damage dealt"
            },
            {
                name: "Thick Skull",
                cost: 10000,
                description: "+50 Armor, while casting Rampage or Carnage, gain 50% Damage Reduction"
            },
            {
                name: "Monarch's Decree",
                cost: 4000,
                description: "+5% Weapon Power, Commanding Shout grants you 15% Attack Speed"
            },
            {
                name: "Undying Loyalty",
                cost: 10000,
                description: "+50 Health, +30% Commanding Shout Overhealth, Allies affected by Commanding Shout are healed for 5% of Junker Queen's life every second"
            },
            {
                name: "Booming Voice",
                cost: 11000,
                description: "+25% Ability Power, Commanding Shout radius is increased by 100% and now ignores line of sight"
            },
            {
                name: "Tinker Tracksuit",
                cost: 9500,
                description: "+5% Cooldown Reduction, +10% Ability Lifesteal, Rampage and Carnage hits grant 10% Attack Speed for 4s"
            }
        ]
    }
},
orisa: {
    name: "Orisa",
    role: "Tank",
    health: 275,
    armor: 275,
    shield: 0,
    abilities: [
        {
            name: "Augmented Fusion Driver",
            description: "Orisa's primary weapon fires large projectiles that deal significant damage and heat up with continuous fire.",
            stats: [
                { label: "Damage", value: "12 per shot" },
                { label: "Fire Rate", value: "10 rounds per second" },
                { label: "Heat Capacity", value: "100" },
                { label: "Cooldown", value: "3 seconds (full heat)" }
            ]
        },
        {
            name: "Energy Javelin",
            description: "Orisa throws a javelin that damages the first enemy hit and knocks them back. If the enemy hits a wall, they take additional damage and are stunned.",
            stats: [
                { label: "Damage", value: "60" },
                { label: "Wall Impact Damage", value: "40" },
                { label: "Stun Duration", value: "0.3 seconds" },
                { label: "Cooldown", value: "6 seconds" }
            ]
        },
        {
            name: "Javelin Spin",
            description: "Orisa rapidly spins a javelin that destroys incoming projectiles and increases forward movement speed. Enemies hit are damaged and pushed back.",
            stats: [
                { label: "Damage", value: "90 over duration" },
                { label: "Duration", value: "1.75 seconds" },
                { label: "Cooldown", value: "7 seconds" }
            ]
        },
        {
            name: "Fortify",
            description: "Orisa temporarily reduces damage taken and cannot be affected by movement-impairing effects.",
            stats: [
                { label: "Damage Reduction", value: "40%" },
                { label: "Duration", value: "4 seconds" },
                { label: "Cooldown", value: "12.5 seconds" }
            ]
        },
        {
            name: "Terra Surge (Ultimate)",
            description: "Orisa pulls in nearby enemies and charges up a surge of damage that's released upon expiration or when reactivated.",
            stats: [
                { label: "Pull Duration", value: "4 seconds" },
                { label: "Maximum Damage", value: "500" },
                { label: "Radius", value: "9 meters" },
                { label: "Ultimate Cost", value: "1680 points" }
            ]
        }
    ],
    powers: [
        {
            name: "Scorched Earth",
            description: "When you Overheat, apply Burning to enemies within 6m, dealing damage equal to 10% of your max Life over 5s"
        },
        {
            name: "Shield Divergence",
            description: "When you Overheat, deploy a Barrier with 600 Health in front"
        },
        {
            name: "Advanced Throwbotics",
            description: "When you use Javelin Spin, launch an Energy Javelin with 50% less damage"
        },
        {
            name: "Spynstem Update",
            description: "Javelin Spin now deflects projectiles and grants 20% of damage dealt from deflecting as Ultimate Charge"
        },
        {
            name: "Hot Rotate-O",
            description: "Javelin Spin gains 35% Cooldown Reduction but now generates Heat"
        },
        {
            name: "Factory Reset",
            description: "While Fortify is active, Javelin Spin and Energy Javelin gain 25% Cooldown Reduction"
        },
        {
            name: "Lassoed",
            description: "On impact, Energy Javelin will pull enemies within 4m towards itself"
        },
        {
            name: "Ride With Me",
            description: "While Fortify is active, grant allies in line of sight 30% Move Speed and Overhealth equal to 10% of your max Life"
        },
        {
            name: "Hooves of Steel",
            description: "After Fortify ends, gain Shields equal to 50% of the damage received during Fortify. Resets when you next use Fortify"
        },
        {
            name: "Restortify",
            description: "While Fortify is active, heal for 5% of your max Life every 1s"
        },
        {
            name: "Centripetal Charge",
            description: "25% Ultimate Cost Reduction. After using Terra Surge, reset your ability cooldowns"
        },
        {
            name: "Supercharger",
            description: "When you use Terra Surge, drop a Supercharger that increases the damage of nearby allies by 25% for 15s"
        }
    ],
    items: {
        weapon: [
            {
                name: "Solar Regenergy",
                cost: 4000,
                description: "+25 Health, after using an ability, restore your Armor equal to 3% of your Max Life"
            },
            {
                name: "Enhanced Target Sensors", cost: 4000,
                description: "Deal 25% more damage to enemies farther than 12m away"
            },
            {
                name: "Optimized Energy", cost: 5000,
                description: "+10% Weapon Power, Critical Hits reduce your Heat by 5%"
            }
        ],
        ability: [
            {
                name: "Electro Lights", cost: 4000,
                description: "+10% Attack Speed, recover from being Overheated 25% faster"
            },
            {
                name: "Elite Rotator Cuff", cost: 4000,
                description: "+10% Ability Power, 35% Javelin Spin Duration"
            },
            {
                name: "Refraction Tiles",
                cost: 3000,
                description: "+25 Armor, while Javelin Spin is active, gain 30% damage reduction to beams"
            }
        ],
        survival: [
            {
                name: "Oladele-copter Blades",
                cost: 4500,
                description: "+15% Ability Power, while using Javelin Spin, gain free flight and 20% Move Speed"
            },
            {
                name: "Siphonic Spear", cost: 4000,
                description: "When you deal damage with Energy Javelin, heal a portion of your max Life over 3s"
            },
            {
                name: "Arcfinder", cost: 4000,
                description: "Energy Javelin deals 25% increased damage to enemies farther than 12m away"
            },
            {
                name: "3D-Printed Lance", cost: 11000,
                description: "+15% Ability Power, Energy Javelin cooldown is reduced by 15, but each use generates 25 Heat"
            },
            {
                name: "Charged Chassis", cost: 4000,
                description: "+25 Health, Fortify grants additional Overhealth equal to 10% of your Max Life"
            },
            {
                name: "HollaGram Helmet",
                cost: 3500,
                description: "+50 Armor, when you use Fortify, all allies within line of sight gains unstoppable for 2s"
            },
            {
                name: "Efi's Theorem",
                cost: 10000,
                description: "+20% Ability Lifesteal, +50% Fortify Duration"
            }
        ]
    }
},
cassidy: {
    name: "Cassidy",
    role: "Damage",
    health: 225,
    armor: 0,
    shield: 0,
    abilities: [
        {
            name: "Peacekeeper",
            description: "Cassidy fires his six-shooter with high precision.",
            stats: [
                { label: "Damage", value: "70 per shot" },
                { label: "Fire Rate", value: "2 shots per second" },
                { label: "Ammo", value: "6" },
                { label: "Reload Time", value: "1.2 seconds" }
            ]
        },
        {
            name: "Combat Roll",
            description: "Cassidy rolls in the direction he's moving and reloads his weapon.",
            stats: [
                { label: "Distance", value: "6 meters" },
                { label: "Cooldown", value: "6 seconds" }
            ]
        },
        {
            name: "Flashbang",
            description: "Cassidy throws a flashbang that explodes and stuns enemies.",
            stats: [
                { label: "Damage", value: "25" },
                { label: "Stun Duration", value: "0.8 seconds" },
                { label: "Radius", value: "3 meters" },
                { label: "Cooldown", value: "10 seconds" }
            ]
        },
        {
            name: "Deadeye (Ultimate)",
            description: "Cassidy takes a few moments to target enemies in view, then fires at all of them simultaneously.",
            stats: [
                { label: "Maximum Damage", value: "550 per target" },
                { label: "Lock-on Rate", value: "170 damage per second" },
                { label: "Duration", value: "7 seconds" },
                { label: "Ultimate Cost", value: "1680 points" }
            ]
        }
    ],
    powers: [
        {
            name: "Quick Draw",
            description: "After using Combat Roll, Peacekeeper's next primary fire can auto-aim within 9m while under cooldown"
        },
        {
            name: "Dead Man Walking",
            description: "Eliminating an enemy you've recently critically hit grants 1 Max Ammo for the round"
        },
        {
            name: "Full House",
            description: "For each Ammo available, Peacekeeper's primary fire gains 1% increased damage, up to 25%"
        },
        {
            name: "Just Roll With It",
            description: "During Combat Roll, prevent all incoming damage, after Combat Roll ends, heal 30% of your Life over 3s"
        },
        {
            name: "Bullseye",
            description: "Critical hit reduces Combat Roll's cooldown by 2s"
        },
        {
            name: "Barrel Roll",
            description: "Combat Roll takes you 50% further and deals 65 damage to enemies"
        },
        {
            name: "Flash In The Pan",
            description: "Eliminating an enemy recently damaged by Flashbang grants 15% Ultimate Charge"
        },
        {
            name: "Think Flasht",
            description: "When you start a Combat Roll, leave a Flashbang behind"
        },
        {
            name: "Hot Potato",
            description: "Flashbang adds 3 extra Ammo on hit until Peacekeeper is reloaded"
        },
        {
            name: "Easy Rider",
            description: "While using Deadeye, gain 100 Overhealth and 25% Movement Speed"
        },
        {
            name: "Sunrise",
            description: "Using Deadeye slows all visible enemies by 35% for 1.5s"
        },
        {
            name: "Sunset",
            description: "Deadeye eliminations grant 15% Ultimate Charge each"
        }
    ],
    items: {
        weapon: [
            {
                name: "Eagle Eye", cost: 12000,
                description: "+50 Health, Receives 25% less damage from enemy farther than 12m"
            },
            {
                name: "Competitive Analysis", cost: 11000,
                description: "+20% Weapon Lifesteal, deal 15% increased primary fire damage to enemies in the Damage role"
            },
            {
                name: "Quickload Chamber", cost: 4000,
                description: "+20% Reload Speed, reloading within 6m of an enemy adds 20% of Max Ammo as extra Ammo"
            }
        ],
        ability: [
            {
                name: "Frankie's Fixer",
                cost: 10000,
                description: "+50 Health, Heal 10 Life for each Ammo loaded using Combat Roll"
            },
            {
                name: "Streamlined Poncho", cost: 5000,
                description: "+10% Cooldown Reduction, Combat Roll reduces Flashbang cooldown"
            },
            {
                name: "Improvised Dynamite", cost: 11000,
                description: "+20% Ability Power, +10% Cooldown Reduction, Flashbang explosion radius is increased by 50%"
            }
        ],
        survival: [
            {
                name: "Wanted Poster", cost: 4000,
                description: "+25 Health, Deadeye eliminations reward extra 500 Stadium Cash each"
            },
            {
                name: "Blackwatch Tech", cost: 4000,
                description: "+10% Ability Power, Deadeye eliminations reduce Flashbang max cooldown by 10%, up to 40% for the round"
            }
        ]
    }
},
ashe: {
    name: "Ashe",
    role: "Damage",
    health: 200,
    armor: 0,
    shield: 0,
    abilities: [
        {
            name: "The Viper",
            description: "Ashe's semi-automatic rifle can be fired quickly from the hip or aimed down sights for more powerful shots.",
            stats: [
                { label: "Hip Shot Damage", value: "40 per shot" },
                { label: "ADS Damage", value: "85 per shot" },
                { label: "Fire Rate (Hip)", value: "4 shots per second" },
                { label: "Fire Rate (ADS)", value: "1.25 shots per second" },
                { label: "Ammo", value: "12" },
                { label: "Reload Time", value: "0.25 seconds per round" }
            ]
        },
        {
            name: "Coach Gun",
            description: "Ashe fires a close-range blast that knocks back both her and her target.",
            stats: [
                { label: "Damage", value: "6 per pellet, 15 pellets" },
                { label: "Cooldown", value: "10 seconds" }
            ]
        },
        {
            name: "Dynamite",
            description: "Ashe throws a stick of dynamite that detonates after a short delay or when shot. The explosion sets enemies on fire.",
            stats: [
                { label: "Initial Damage", value: "75" },
                { label: "Burn Damage", value: "100 over 5 seconds" },
                { label: "Cooldown", value: "10 seconds" }
            ]
        },
        {
            name: "B.O.B. (Ultimate)",
            description: "Ashe summons her butler robot companion, who charges forward and knocks enemies into the air, then fires his arm cannons.",
            stats: [
                { label: "Charge Damage", value: "120" },
                { label: "Gun Damage", value: "112 per second" },
                { label: "Health", value: "1200" },
                { label: "Duration", value: "10 seconds" },
                { label: "Ultimate Cost", value: "2310 points" }
            ]
        }
    ],
    powers: [
        {
            name: "Reload Therapy",
            description: "When you reload a shot, heal 3% of your Life"
        },
        {
            name: "Head Honcho",
            description: "Each unscoped shot you land increases the damage of the next scoped shot you land by 3%, up to 30%. Resets on reload"
        },
        {
            name: "My Business, My Rules",
            description: "When you deal damage to a Burning enemy with The Viper, reduce the cooldown of your abilities by 10%"
        },
        {
            name: "Incendiary Rounds",
            description: "While scoped, hitting the same target without missing deals 30 extra damage"
        },
        {
            name: "Incendiary Blast",
            description: "Coach Gun applies Burning, dealing 100 damage over 5s. If target was burning, deal extra 75 Ability Damage instantly"
        },
        {
            name: "Calamity",
            description: "Using Coach Gun reloads 2 Ammo. The Viper's next 2 hits deal 40 additional damage over 3s"
        },
        {
            name: "Double Barreled",
            description: "Coach Gun gains an additional charge"
        },
        {
            name: "Early Detonation",
            description: "Shooting Dynamite reloads 5 Ammo and reduces the cooldown of Dynamite by 3s"
        },
        {
            name: "Molten Munitions",
            description: "When Dynamite explodes on the ground, it leaves lava that Burns enemies for 50 every 1s"
        },
        {
            name: "Out with a Bang",
            description: "When Dynamite explodes, it spawns 3 sticky explosives that deal 66% reduced damage"
        },
        {
            name: "Partners in Crime",
            description: "You are healed for 100% of B.O.B.'s damage dealt and B.O.B. is healed for 100% of your damage dealt"
        },
        {
            name: "B.O.B. Jr.",
            description: "B.O.B. costs 50% less Ultimate Charge but has reduced Life, 50% reduced Attack Speed, and is significantly smaller"
        }
    ],
    items: {
        weapon: [
            {
                name: "Tripod", cost: 4000,
                description: "+5% Weapon Power, The Viper, Coach Gun, and Dynamite deal 10% more damage to enemies that are below you"
            },
            {
                name: "Silver Lighter", cost: 4000,
                description: "+10% Ability Power, Damage dealt to Burning targets grants 20% more Ultimate Charge"
            },
            {
                name: "Greased Loader", cost: 5000,
                description: "25% Max Ammo, +15% Reload Speed"
            }
        ],
        ability: [
            {
                name: "Maxed Mag", cost: 4000,
                description: "+5% Attack Speed, Gain 3% Attack Speed for each remaining Ammo above 50% of your Max Ammo"
            },
            {
                name: "Ironsights", cost: 11000,
                description: "+10% Attack Speed, when the target is further than 10m, scoped shot gains 1% damage for each meter"
            },
            {
                name: "Sidewinder", cost: 11000,
                description: "+10% Attack Speed, when the target is within 10m, unscoped shot gains 15% increased damage"
            }
        ],
        survival: [
            {
                name: "Furnace Fuel", cost: 4000,
                description: "+25 Health, +5% Ability Power, When Burn gets removed instead of expiring, gain 3% Ultimate Charge"
            },
            {
                name: "Stacked Sticks", cost: 10000,
                description: "+15% Ability Power, 40% Dynamite Explosion Radius"
            },
            {
                name: "Firestarter", cost: 10000,
                description: "+50 Health, Your Burning effects gain 35% Lifesteal"
            },
            {
                name: "Silver Spurs", cost: 4000,
                description: "+25 Health, after using Coach Gun, gain 20% Move Speed for 3s"
            },
            {
                name: "Build-A-Blast Buckshot", cost: 10000,
                description: "+10% Cooldown Reduction, Coach Gun has 50% increased self-knockback"
            },
            {
                name: "Infrared Lenses", cost: 10000,
                description: "+20% Ability Power, deal 25% increased damage to Burning targets"
            },
            {
                name: "B.O.B. Wire Defense", cost: 10000,
                description: "+50 Health, +25 Armor, when B.O.B. finishes charging, B.O.B. gains 300 Armor"
            }
        ]
    }
},
ana: {
    name: "Ana",
    role: "Support",
    health: 200,
    armor: 0,
    shield: 0,
    abilities: [
        {
            name: "Biotic Rifle",
            description: "Ana's rifle fires darts that can heal allies or damage enemies. Scoping provides greater accuracy but lower fire rate.",
            stats: [
                { label: "Damage/Healing", value: "70 per shot" },
                { label: "Fire Rate (Unscoped)", value: "1.25 shots per second" },
                { label: "Fire Rate (Scoped)", value: "1.25 shots per second" },
                { label: "Ammo", value: "15" },
                { label: "Reload Time", value: "1.5 seconds" }
            ]
        },
        {
            name: "Sleep Dart",
            description: "Ana fires a dart that puts an enemy to sleep for a short duration.",
            stats: [
                { label: "Sleep Duration", value: "5 seconds" },
                { label: "Cooldown", value: "14 seconds" }
            ]
        },
        {
            name: "Biotic Grenade",
            description: "Ana throws a grenade that heals allies and damages enemies. Affected allies receive increased healing, while enemies cannot be healed for a short duration.",
            stats: [
                { label: "Damage", value: "60" },
                { label: "Healing", value: "100" },
                { label: "Healing Boost", value: "+50%" },
                { label: "Anti-Heal Duration", value: "3 seconds" },
                { label: "Radius", value: "4 meters" },
                { label: "Cooldown", value: "10 seconds" }
            ]
        },
        {
            name: "Nano Boost (Ultimate)",
            description: "Ana empowers an ally, increasing their damage output and providing damage reduction.",
            stats: [
                { label: "Damage Increase", value: "+50%" },
                { label: "Damage Reduction", value: "50%" },
                { label: "Duration", value: "8 seconds" },
                { label: "Ultimate Cost", value: "2100 points" }
            ]
        }
    ],
    powers: [
        {
            name: "No Scope Needed",
            description: "Landing unscoped shots with Biotic Rifle grants 10% Attack Speed for 2s, stacking up to 3 times"
        },
        {
            name: "Tactical Rifle",
            description: "While scoped, Biotic Rifle will lock-on to allies for guaranteed hits"
        },
        {
            name: "Pinpoint Prescription",
            description: "Biotic Rifle can now critically hit both allies and enemies"
        },
        {
            name: "Dreamy",
            description: "Sleep Dart can hit allies, healing 100% of their max Life over 4s instead of putting them to sleep"
        },
        {
            name: "Comfy Cloud",
            description: "Sleep Dart explodes on contact, hitting targets within 3m, but Sleep has a 50% reduced duration"
        },
        {
            name: "Sleep Regimen",
            description: "Gain 50 Health. When you apply Sleep to an enemy, gain 10 Health, up to 150"
        },
        {
            name: "Home Remedy",
            description: "Biotic Grenade applies Overhealth equal to 100% of its healing"
        },
        {
            name: "Venomous",
            description: "Biotic Grenade deals an additional 30 damage over its duration to enemies affected by it"
        },
        {
            name: "Time Out",
            description: "Biotic Grenade now knocks enemies back and reduces their Move Speed by 50% for 1.5s"
        },
        {
            name: "Your Full Potential",
            description: "Nano Boost also grants the target 20% Ultimate Charge and 200 Overhealth"
        },
        {
            name: "My Turn",
            description: "Nano Boost also applies to yourself for 50% of its duration"
        },
        {
            name: "Our Turn",
            description: "Nano Boost also affects other visible allies, but it has a 50% reduced duration"
        }
    ],
    items: {
        weapon: [
            {
                name: "Dash Boots", cost: 4000,
                description: "+5% Movement Speed, jumping in mid-air will dash you a short distance"
            },
            {
                name: "Potent Projectiles", cost: 5000,
                description: "+10% Weapon Power, Unscoped Biotic Rifle projectiles are 100% larger"
            },
            {
                name: "Quick Scope", cost: 5000,
                description: "+5% Weapon Power, +200% Faster Scope Speed, Deal 20% more damage to airborne enemies"
            }
        ],
        ability: [
            {
                name: "Unscoped Resources", cost: 11000,
                description: "+4 Max Ammo, Unscoped shots have a 50% chance not to consume Ammo"
            },
            {
                name: "Double Dose",
                cost: 4000,
                description: "+25 Health, landing a Sleep Dart on target affected by Biotic Grenade reduces its cooldown by 25%"
            },
            {
                name: "Tranquilizer", cost: 10000,
                description: "Sleep Dart gains: 500% Collision Size, 100% Projectile Speed, 20% Sleep Duration"
            }
        ],
        survival: [
            {
                name: "Lethal Dose", cost: 9000,
                description: "+50% Ability Lifesteal, Sleep Dart damage is increased by 100"
            },
            {
                name: "I.V. Drip", cost: 4000,
                description: "+25 Health, while affected by Biotic Grenade, Ana gains 100 Overhealth"
            },
            {
                name: "Grenadius Pin", cost: 12000,
                description: "+30% Biotic Grenade Radius, +20% Ability Power"
            },
            {
                name: "Target Tracker", cost: 4000,
                description: "+15% Biotic Grenade Duration, for each enemy or ally affected by Biotic Grenade, gain 5% Attack Speed, up to 25%"
            },
            {
                name: "Cluster Core", cost: 10000,
                description: "+25% Ability Lifesteal, Biotic Grenade cooldown is reduced by 1s for each target it hits"
            },
            {
                name: "Eye of Horus", cost: 9000,
                description: "+50 Shields, Nano Boost can target allies through walls and its range is increased to 60m"
            },
            {
                name: "Perfected Formula",
                cost: 2500,
                description: "+25 Shields, +15% Nano Boost Duration"
            }
        ]
    }
},
mercy: {
    name: "Mercy",
    role: "Support",
    health: 200,
    armor: 0,
    shield: 0,
    abilities: [
        {
            name: "Caduceus Staff",
            description: "Mercy's staff heals allies or increases the damage they deal.",
            stats: [
                { label: "Healing", value: "55 per second" },
                { label: "Damage Boost", value: "+30%" },
                { label: "Range", value: "15 meters" }
            ]
        },
        {
            name: "Caduceus Blaster",
            description: "Mercy's sidearm fires rapid projectiles.",
            stats: [
                { label: "Damage", value: "20 per shot" },
                { label: "Fire Rate", value: "5 rounds per second" },
                { label: "Ammo", value: "20" },
                { label: "Reload Time", value: "1.4 seconds" }
            ]
        },
        {
            name: "Guardian Angel",
            description: "Mercy flies towards a targeted ally.",
            stats: [
                { label: "Range", value: "30 meters" },
                { label: "Cooldown", value: "1.5 seconds" }
            ]
        },
        {
            name: "Angelic Descent",
            description: "Mercy slows her descent from great heights.",
            stats: [
                { label: "Fall Speed Reduction", value: "70%" }
            ]
        },
        {
            name: "Resurrect",
            description: "Mercy revives a dead ally with full health.",
            stats: [
                { label: "Range", value: "5 meters" },
                { label: "Cast Time", value: "1.75 seconds" },
                { label: "Cooldown", value: "30 seconds" }
            ]
        },
        {
            name: "Valkyrie (Ultimate)",
            description: "Mercy enhances her abilities and gains the ability to fly.",
            stats: [
                { label: "Healing/Damage Boost", value: "60/30 per second" },
                { label: "Beam Range", value: "20 meters" },
                { label: "Chain Range", value: "10 meters" },
                { label: "Duration", value: "15 seconds" },
                { label: "Ultimate Cost", value: "1820 points" }
            ]
        }
    ],
    powers: [
        {
            name: "Battle Medic",
            description: "Every 1s your Staff is attached, Caduceus Blaster gains +4% Attack Speed (stacks 10 times) until reloading or swap to your Staff"
        },
        {
            name: "First Responder",
            description: "When you Resurrect an ally, grant both of you 250 Overhealth for 6s"
        },
        {
            name: "The Whambulance",
            description: "When Guardian Angel ends or is canceled, heal your target for 4 Life for every 1m you traveled"
        },
        {
            name: "Renaissance",
            description: "After successfully Resurrecting an ally, gain Valkyrie for 5 seconds"
        },
        {
            name: "Equivalent Exchange",
            description: "You have 3 charges of Resurrect with 33% reduced cast time, but their cooldowns only reset at the start of the round"
        },
        {
            name: "Triage Unit",
            description: "When using Guardian Angel on an ally below 50% HP, your Caduceus Staff heals them for 30% more for 3 sec"
        },
        {
            name: "Threads of Fate",
            description: "Caduceus Staff healing chains for 3 sec at 50% effectiveness to the last ally healed"
        },
        {
            name: "Protective Beam",
            description: "Allies affected by Caduceus Staff above 80% HP gain 10% damage reduction"
        },
        {
            name: "Serenity",
            description: "Sympathetic Recovery heals for 20% more and heals you even while healing a full health ally"
        },
        {
            name: "Distortion",
            description: "Allies boosted by your Caduceus Staff gain +20% Lifesteal"
        },
        {
            name: "Crepuscular Circle",
            description: "While Valkyrie is active, Healing Beam and Damage Boost effects are automatically applied to nearby allies"
        },
        {
            name: "Glass Extra Full",
            description: "Healing from Caduceus Staff targeting full health allies is converted to Overhealth, up to 50"
        }
    ],
    items: {
        weapon: [
            {
                name: "Mid-Air Mobilizer", cost: 4000,
                description: "+5% Weapon Power, 10% Attack Speed while flying"
            },
            {
                name: "Aerodynamic Feathers", cost: 4000,
                description: "+25 Health, while affected by Angelic Descent, continuously gain 10% Move Speed every 1s"
            },
            {
                name: "Angeleisure Wear", cost: 4000,
                description: "+25 Health, while affected by Angelic Descent or Guardian Angel, heal 3% of your Life every 1s"
            }
        ],
        ability: [
            {
                name: "Long Distance Wings", cost: 4000,
                description: "+10% Ability Power, +33% Guardian Angel Range"
            },
            {
                name: "Angelic Acrobatics", cost: 10000,
                description: "+15% Guardian Angel Move Speed, Guardian Angel's cooldown starts as soon as you jump or crouch"
            },
            {
                name: "Blessed Boosters", cost: 9000,
                description: "+50 Health, launch velocity is increased by 25% when canceling Guardian Angel with crouch or jump"
            }
        ],
        survival: [
            {
                name: "Chain Evoker", cost: 10000,
                description: "+50 Armor, +5% Caduceus Staff damage boost, +15% Ultimate Charge gained from damage boosted"
            },
            {
                name: "Celestial Clip", cost: 10000,
                description: "+10% Weapon Power, +33% Max Ammo, Caduceus Blaster has a 10% chance to fire an extra shot that doesn't consume additional ammo"
            },
            {
                name: "Caduceus EX",
                cost: 3500,
                description: "+25 Health, +10% Weapon Power, +33% Caduceus Staff Range"
            },
            {
                name: "Resurrection Rangefinder", cost: 10000,
                description: "+10% Cooldown Reduction, +75% Resurrection Range"
            }
        ]
    }
},
lucio: {
    name: "Lúcio",
    role: "Support",
    health: 200,
    armor: 0,
    shield: 0,
    abilities: [
        {
            name: "Sonic Amplifier",
            description: "Lúcio's primary weapon fires sonic projectiles in a four-round burst.",
            stats: [
                { label: "Damage", value: "20 per shot" },
                { label: "Fire Rate", value: "4 shots per burst" },
                { label: "Ammo", value: "20" },
                { label: "Reload Time", value: "1.5 seconds" }
            ]
        },
        {
            name: "Soundwave",
            description: "Lúcio emits a blast of sound that knocks enemies back.",
            stats: [
                { label: "Damage", value: "25" },
                { label: "Knockback", value: "8 meters" },
                { label: "Cooldown", value: "4 seconds" }
            ]
        },
        {
            name: "Crossfade",
            description: "Lúcio can switch between two songs: one that heals nearby allies and one that increases their movement speed.",
            stats: [
                { label: "Healing", value: "16.25 per second" },
                { label: "Speed Boost", value: "+25%" },
                { label: "Radius", value: "12 meters" }
            ]
        },
        {
            name: "Amp It Up",
            description: "Lúcio increases the effectiveness of his current song.",
            stats: [
                { label: "Healing Boost", value: "52 per second" },
                { label: "Speed Boost", value: "+60%" },
                { label: "Duration", value: "3 seconds" },
                { label: "Cooldown", value: "12 seconds" }
            ]
        },
        {
            name: "Wall Ride (Passive)",
            description: "Lúcio can jump onto a wall and ride along it.",
            stats: [
                { label: "Speed Boost", value: "+30%" }
            ]
        },
        {
            name: "Sound Barrier (Ultimate)",
            description: "Lúcio provides himself and nearby allies with temporary shields.",
            stats: [
                { label: "Shields", value: "750" },
                { label: "Decay Rate", value: "125 per second" },
                { label: "Radius", value: "30 meters" },
                { label: "Ultimate Cost", value: "2940 points" }
            ]
        }
    ],
    powers: [
        {
            name: "Mixtape",
            description: "When switching to Healing Boost, Crossfade heals for 10% of Crossfade healing for every 1s Speed Boost was active"
        },
        {
            name: "Fast Forward",
            description: "While above 50% Move Speed, increase damage by 25%"
        },
        {
            name: "Wallvibing",
            description: "While Wallriding, gain Overhealth equal to 3% of your life every 1s, up to 30% Max Life"
        },
        {
            name: "Vivace",
            description: "While you are Wallriding, Soundwave cooldown refreshes 25% faster and adds 1 Max Ammo every 1s until you reload"
        },
        {
            name: "Sonic Boom",
            description: "Sonic Amplifier damage heal allies affected by Crossfade equal to 20% of damage dealt"
        },
        {
            name: "Signature Shift",
            description: "After using an ability, your next Sonic Amplifier shot shoots a volley of 6 ammo with 80% increased projectile size"
        },
        {
            name: "Radio Edit",
            description: "After using Amp It Up in Speed Boost, trigger a Sound Barrier with 85% reduced Overhealth"
        },
        {
            name: "Megaphone",
            description: "+15% Amp It Up Duration, while Amp It Up is active, Crossfade radius is increased by 100%"
        },
        {
            name: "Crowd Pleaser",
            description: "After using Soundwave, heal all allies affected by Crossfade for 150% of Crossfade healing"
        },
        {
            name: "Let's Bounce",
            description: "Soundwave has 30% increased knockback and deals 40 bonus damage if the target hits a wall"
        },
        {
            name: "Reverb",
            description: "Gain 1 extra charge of Soundwave"
        },
        {
            name: "Beat Drop",
            description: "Landing on an enemy with Sound Barrier deals up to 100 damage. If you spent your Ultimate Charge, your next Sound Barrier deals double damage"
        }
    ],
    items: {
        weapon: [
            {
                name: "#1 Single",
                cost: 3500,
                description: "+10% Ability Power, when allies leave your Crossfade area, the effect lingers for 2s"
            },
            {
                name: "Nano Boop", cost: 4000,
                description: "+5% Cooldown Reduction, Environmental Kills grant Nano Boost for 5s"
            },
            {
                name: "Speed Skates", cost: 3750,
                description: "+25 Health, after Wallriding, gain 30% Move Speed for 2s"
            }
        ],
        ability: [
            {
                name: "Hip Hop", cost: 9000,
                description: "+25 Health, after Wallriding, gain an additional jump while airborne"
            },
            {
                name: "All-Out Auditiva", cost: 11000,
                description: "+20% Ability Power, +33% Amp It Up Duration"
            },
            {
                name: "LoFly Beats",
                cost: 3500,
                description: "+5% Ability Power, +5% Weapon Power, while in Speed Boost, Soundwave also knocks you back"
            }
        ],
        survival: [
            {
                name: "B-Side Bop", cost: 10000,
                description: "+50 Health, +25% Melee Damage, after using Soundwave, your next Quick Melee grants decaying Overhealth equal to 100% of damage dealt"
            },
            {
                name: "Riff Repeater", cost: 10000,
                description: "+15% Attack Speed, Sonic Amplifier projectiles ricochet off walls 3 times"
            },
            {
                name: "Airwaves", cost: 10000,
                description: "+25 Health, +15% Ability Power, Sound Barrier effectiveness is increased by 5% for every 1s Sound Barrier is channeled, up to 50%"
            }
        ]
    }
},
juno: {
    name: "Juno",
    role: "Support",
    health: 200,
    armor: 0,
    shield: 0,
    abilities: [
        {
            name: "Mediblaster",
            description: "Juno's primary weapon fires projectiles that heal allies or damage enemies.",
            stats: [
                { label: "Damage", value: "45 per shot" },
                { label: "Healing", value: "70 per shot" },
                { label: "Fire Rate", value: "1.67 shots per second" },
                { label: "Ammo", value: "8" },
                { label: "Reload Time", value: "1.5 seconds" }
            ]
        },
        {
            name: "Pulsar Torpedoes",
            description: "Juno fires a torpedo that homes in on allies to heal them or enemies to damage them.",
            stats: [
                { label: "Damage", value: "80" },
                { label: "Healing", value: "100" },
                { label: "Cooldown", value: "6 seconds" }
            ]
        },
        {
            name: "Glide Boost",
            description: "Juno propels herself in the direction she's moving.",
            stats: [
                { label: "Duration", value: "2 seconds" },
                { label: "Cooldown", value: "6 seconds" }
            ]
        },
        {
            name: "Hyper Ring",
            description: "Juno places a ring that grants allies increased movement and attack speed.",
            stats: [
                { label: "Movement Speed", value: "+25%" },
                { label: "Attack Speed", value: "+20%" },
                { label: "Duration", value: "5 seconds" },
                { label: "Cooldown", value: "10 seconds" }
            ]
        },
        {
            name: "Orbital Ray (Ultimate)",
            description: "Juno channels a beam from orbit that heals allies and damages enemies caught in it.",
            stats: [
                { label: "Healing", value: "80 per second" },
                { label: "Damage", value: "60 per second" },
                { label: "Duration", value: "8 seconds" },
                { label: "Ultimate Cost", value: "2100 points" }
            ]
        }
    ],
    powers: [
        {
            name: "MediMaster",
            description: "Mediblaster can now critically hit both allies and enemies"
        },
        {
            name: "Stinger",
            description: "Mediblaster deals an additional 10 damage to enemies over 1s. (Does not stack)"
        },
        {
            name: "Cosmic Coolant",
            description: "Pulsar Torpedoes cooldown is reduced by 0.5s for each target it hits"
        },
        {
            name: "Medicinal Missiles",
            description: "Pulsar Torpedoes heal for an extra 30 life and causes allies hit to receive 50% more healing for 3s"
        },
        {
            name: "Pulsar Plus",
            description: "Pulsar Torpedoes gains 1 additional charge"
        },
        {
            name: "Torpedo Glide",
            description: "During Glide Boost, every 50 damage you deal reduces the cooldown of Pulsar Torpedoes by 1s"
        },
        {
            name: "Blink Boosts",
            description: "Glide Boost gains 2 additional charges and has a 65% reduced cooldown, but has 75% reduced duration"
        },
        {
            name: "Rally Ring",
            description: "Reduce Hyper Ring's cooldown by 1s when an ally passes through it"
        },
        {
            name: "Black Hole",
            description: "Hyper Ring slows the Move Speed of enemies who pass through it by 35% for 1s"
        },
        {
            name: "Hyper Healer",
            description: "Allies affected by Hyper Ring gain 50 Overhealth"
        },
        {
            name: "Stellar Focus",
            description: "Orbital Ray now follows you and its duration is increased by 35%"
        },
        {
            name: "Orbital Alignment",
            description: "Enemies inside of Orbital Ray lose 35% Move Speed. Allies inside of it gain 25% Move Speed"
        }
    ],
    items: {
        weapon: [
            {
                name: "Vantage Shot", cost: 4000,
                description: "+5% Weapon Power, while airborne, Mediblaster deals 15% more damage"
            },
            {
                name: "Long Range Blaster", cost: 12000,
                description: "+15% Weapon Power, Mediblaster deals 15% increased damage and healing to targets farther than 12m away"
            },
            {
                name: "Lock-On Shield", cost: 4000,
                description: "+10% Ability Power, while aiming Pulsar Torpedoes, gain Overhealth equal to 50% of your max Shields"
            }
        ],
        ability: [
            {
                name: "PulStar Destroyers",
                cost: 3200,
                description: "+10% Ability Lifesteal, Pulsar Torpedoes explode on hit, deal 20 damage to nearby enemies"
            },
            {
                name: "Pulse Spike", cost: 10000,
                description: "+10% Attack Speed, +35% Pulsar Torpedoes Projectile Speed, after using Pulsar Torpedoes, gain 25% Attack Speed for 4s"
            },
            {
                name: "Boosted Rockets", cost: 4000,
                description: "+25 Shield, +25% Glide Boost Duration"
            }
        ],
        survival: [
            {
                name: "Forti-Glide",
                cost: 4500,
                description: "+75 Shield, during Glide Boost, gain 10% Damage Reduction"
            },
            {
                name: "Gravitational Push", cost: 10000,
                description: "+15% Weapon Power, during Glide Boost, gain 20% Attack Speed and your Quick Melee knocks enemies back"
            },
            {
                name: "Lux Loop", cost: 4000,
                description: "+10% Ability Power, +25% Hyper Ring Duration"
            },
            {
                name: "Solar Shielding", cost: 10000,
                description: "+25% Ability Power, allies affected by Hyper Ring restore Shields every 1s"
            },
            {
                name: "Sunburst Serum", cost: 10000,
                description: "+75 Shield, Orbital Ray gains 25% increased healing"
            },
            {
                name: "Red Promise Regulator",
                cost: 4000,
                description: "+50 Shield, +15% Ability Power, when you use Orbital Ray, reset your cooldowns"
            }
        ]
    }
}
};// Hero data
</file>

<file path="data/universalItems.js">
// Universal items data
const universalItems = {
    weapon: [
        {
            name: "Compensator",
            cost: 1000,
            description: "+5% Weapon Power"
        },
        {
            name: "Plasma Converter",
            cost: 1000,
            description: "+10% Weapon Lifesteal"
        },
        {
            name: "Weapon Grease",
            cost: 1000,
            description: "+5% Attack Speed"
        },
        {
            name: "Ammo Reserves",
            cost: 1500,
            description: "+20% Max Ammo"
        },
        {
            name: "Frenzy Amplifier",
            cost: 1500,
            description: "Eliminations grant +10% Attack Speed and +15% Move Speed for 3s"
        },
        {
            name: "Aftermarket Firing Pin",
            cost: 3750,
            description: "+10% Attack Speed, +5% Move Speed"
        },
        {
            name: "Advanced Nanobiotics",
            cost: 4000,
            description: "+5% Weapon Power, after healing an ally, gain +10% Attack Speed for 3s"
        },
        {
            name: "Shieldbuster",
            cost: 4000,
            description: "+5% Weapon Power, after dealing damage to Shields or Armor grants +15% Attack Speed for 1s"
        },
        {
            name: "Stockpile",
            cost: 4000,
            description: "+5% Attack Speed, +25% Magazine Size"
        },
        {
            name: "Technoleech",
            cost: 4500,
            description: "+5% Weapon Power, +10% Weapon Lifesteal"
        },
        {
            name: "Icy Coolant",
            cost: 5000,
            description: "+10% Weapon Power, +5% Cooldown Reduction"
        },
        {
            name: "Talon Modification Module",
            cost: 5500,
            description: "+15% Weapon Power"
        },
        {
            name: "Codebreaker",
            cost: 9000,
            description: "+15% Weapon Power, Ignore 50% of Armor's damage reduction"
        },
        {
            name: "Salvaged Slugs",
            cost: 9500,
            description: "+10% Attack Speed, +25% Damage to Barriers, Weapon Damage to Barriers has a 40% chance to restore 1 ammo"
        },
        {
            name: "Volskaya Ordnance",
            cost: 9500,
            description: "+10% Attack Speed, deal 5% increased Weapon Damage for every 100 Max Life the target has more than you, up to 25%"
        },
        {
            name: "Commander's Clip",
            cost: 10000,
            description: "+10% Attack Speed, +40% Magazine Size, when you use an ability, restore 10% of your Max Ammo"
        },
        {
            name: "Weapon Jammer",
            cost: 10000,
            description: "+25 Armor, +10% Weapon Power, Dealing Weapon Damage steals 10% of target's bonus Attack Speed for 2s"
        },
        {
            name: "Amari's Antidote",
            cost: 11000,
            description: "+25 Health, +15% Weapon Power, while healing an ally below 50% Life with your Weapon, deal 15% increased Weapon Healing"
        },
        {
            name: "Booster Jets",
            cost: 11000,
            description: "+20% Attack Speed, when you use an ability, gain 20% Move Speed for 2s"
        },
        {
            name: "El-Sa'Ka Suppressor",
            cost: 11000,
            description: "+10% Weapon Power, Critical Hits apply 30% Healing Reduction for 2s"
        },
        {
            name: "Hardlight Accelerator",
            cost: 11000,
            description: "+10% Weapon Power, +10% Cooldown Reduction, when you use an ability, gain 5% Weapon Power for 3s, stacking up to 3 times"
        },
        {
            name: "The Closer",
            cost: 13000,
            description: "+20% Weapon Power, +10% Critical Damage, Critical Hits reveal the target for 3s"
        },
        {
            name: "Eye of the Spider",
            cost: 13500,
            description: "+25% Weapon Power, deal 10% increased damage to enemies under 30% Life"
        }
    ],
    ability: [
        {
            name: "Charged Plating",
            cost: 1000,
            description: "After you spend your Ultimate Charge, gain +25 Armor and +10% Ability Power for the rest of the round"
        },
        {
            name: "Power Playbook",
            cost: 1000,
            description: "+10% Ability Power"
        },
        {
            name: "Shady Spectacles",
            cost: 1000,
            description: "+10% Ability Lifesteal"
        },
        {
            name: "Winning Attitude",
            cost: 1500,
            description: "+25 Health, when you die, gain 15% Ultimate Charge"
        },
        {
            name: "Custom Stock",
            cost: 3750,
            description: "+5% Weapon Power, +10% Ability Power"
        },
        {
            name: "Biolight Overflow",
            cost: 4000,
            description: "+25 Health, +5% Ability Power, when you spend your Ultimate Charge, grant nearby allies 50 Overhealth for 3s"
        },
        {
            name: "Energized Bracers",
            cost: 4000,
            description: "+10% Ability Power, +10% Ability Lifesteal"
        },
        {
            name: "Junker Whatchamajig",
            cost: 4000,
            description: "+25% Starting Ult Charge"
        },
        {
            name: "Wrist Wraps",
            cost: 4000,
            description: "+5% Ability Power, +10% Attack Speed"
        },
        {
            name: "Multi-Tool",
            cost: 5000,
            description: "+5% Ability Power, +10% Cooldown Reduction"
        },
        {
            name: "Nano Cola",
            cost: 5500,
            description: "+20% Ability Power"
        },
        {
            name: "Three-Tap Tommygun",
            cost: 9500,
            description: "+10% Ability Power, +10% Attack Speed, after using an ability, your next 3 instances of Weapon Damage deal additional damage equal to 3% of the target's Life"
        },
        {
            name: "Biotech Maximizer",
            cost: 10000,
            description: "+25 Health, +10% Ability Power, when you use an ability that heals, reduce its cooldown by 5% for each unique ally it heals"
        },
        {
            name: "Catalytic Crystal",
            cost: 10000,
            description: "+15% Ability Power, ability Damage and Healing grants 20% more Ultimate Charge"
        },
        {
            name: "Lumerico Fusion Drive",
            cost: 10000,
            description: "+50 Armor, +15% Ability Power, when you use an ability, restore 50 Armor or Shields over 2s"
        },
        {
            name: "Superflexor",
            cost: 10000,
            description: "+25 Health, +10% Weapon Power, when you deal Weapon Damage or Healing, gain 5% Ability Power for 3s, stacking up to 5 times"
        },
        {
            name: "Cybervenom",
            cost: 10500,
            description: "+10% Ability Power, +5% Cooldown Reduction, Dealing Ability Damage applies 30% Healing Reduction for 2s"
        },
        {
            name: "Iridescent Iris",
            cost: 11000,
            description: "+20% Ability Power, +10% Cooldown Reduction, when you spend your Ultimate Charge, gain 100 Overhealth for 3s"
        },
        {
            name: "Liquid Nitrogen",
            cost: 11000,
            description: "+25 Health, +10% Ability Power, Dealing Ability Damage slows the target's Move Speed by 20% for 3s"
        },
        {
            name: "Mark of the Kitsune",
            cost: 11000,
            description: "+10% Ability Power, after casting an ability, your next instance of Weapon Damage or Healing deals 25 bonus damage or healing"
        },
        {
            name: "Champion's Kit",
            cost: 13500,
            description: "+40% Ability Power"
        }
    ],
    survival: [
        {
            name: "Adrenaline Shot",
            cost: 1000,
            description: "+10 Health, Health Packs grant 20% Move Speed for 3s and 50 Overhealth"
        },
        {
            name: "Electrolytes",
            cost: 1000,
            description: "At the start of the round, gain 100 unrecoverable Overhealth"
        },
        {
            name: "Field Rations",
            cost: 1000,
            description: "While on the Objective, restore 8 Life every 1s"
        },
        {
            name: "Running Shoes",
            cost: 1000,
            description: "+10 Health, at the start of the round and when you first respawn, gain 20% Move Speed for 10s while out of combat"
        },
        {
            name: "Armored Vest",
            cost: 1500,
            description: "+25 Armor"
        },
        {
            name: "First Aid Kit",
            cost: 1500,
            description: "+25 Shields, Reduce the time before your Life begins regenerating by 33%"
        },
        {
            name: "Heartbeat Sensor",
            cost: 1500,
            description: "+5% Movespeed, Enemies below 30% Life are revealed to you"
        },
        {
            name: "Siphon Gloves",
            cost: 1500,
            description: "+25 Health, [Quick Melee] damage heals for 25 Life"
        },
        {
            name: "Reinforced Titanium",
            cost: 3750,
            description: "+25 Shields, while you have Shields, take 10% reduced Ability Damage"
        },
        {
            name: "Cushioned Padding",
            cost: 4000,
            description: "+25 Shields, -40% Incoming Negative Effect Duration, when affected by Stun, Sleep, or Hinder, regenerate 10% of your Max Life over 3s"
        },
        {
            name: "Ironclad Exhaust Ports",
            cost: 4000,
            description: "+5% Cooldown Reduction, when you use an ability, gain 25 Overhealth for 3s"
        },
        {
            name: "Vishkar Condensor",
            cost: 4000,
            description: "+25 Shields, convert 100 Health into Shields"
        },
        {
            name: "Vital-e-tee",
            cost: 4000,
            description: "+10 Armor, Convert 100 Health into Armor"
        },
        {
            name: "Crusader Hydraulics",
            cost: 4500,
            description: "+25 Armor, while you have Armor, take 10% less Weapon Damage"
        },
        {
            name: "Iron Eyes",
            cost: 4500,
            description: "+25 Shields, you take 15% reduced damage from Critical Hits"
        },
        {
            name: "Meka Z-Series",
            cost: 5000,
            description: "+8% Health, Armor, and Shields"
        },
        {
            name: "Geneticist's Vial",
            cost: 9000,
            description: "+25 HP, the first time you die each round, revive at 200 Life after 3s"
        },
        {
            name: "Bloodbound",
            cost: 9500,
            description: "+50 Health, the last enemy to deal a final blow to you is Revealed when nearby, deal 10% more damage to them and take 10% reduced damage from them"
        },
        {
            name: "Divine Intervention",
            cost: 9500,
            description: "+50 Shield, when you take more than 100 damage at once, restore 15% of damage taken and start regenerating your Shields"
        },
        {
            name: "Gloomgauntlet",
            cost: 9500,
            description: "+50 Armor, +15% Melee Damage, [Melee] damage grants 10% Move Speed and restores 5% of max Life over 2s"
        },
        {
            name: "Martian Mender",
            cost: 10000,
            description: "+25 Health, +10% Cooldown Reduction, Restore 3% of your Life every 1s"
        },
        {
            name: "Phantasmic Flux",
            cost: 10000,
            description: "+10% Weapon Power, +10% Ability Power, +15% Weapon Lifesteal, +15% Ability Lifesteal, while at full Life, Lifesteal grants up to 100 Overhealth"
        },
        {
            name: "Rustung Von Wilhelm",
            cost: 10000,
            description: "+15% Health, Shields, and Armor, while below 30% Life, gain 10% Damage Reduction"
        },
        {
            name: "Vanadium Injection",
            cost: 10000,
            description: "+50 Shield, while at 100% Ultimate Charge, gain 50 Health, 10% Weapon Power, 10% Ability Power, 10% Weapon Speed, 10% Cooldown Reduction, and 10% Move Speed"
        },
        {
            name: "Nebula Conduit",
            cost: 11000,
            description: "+50 Health, +10% Weapon Power, prevent 15% of incoming damage and instead take that prevented damage over 3s"
        },
        {
            name: "Ogundimu Reduction Field",
            cost: 11000,
            description: "+50 Armor, when you take damage, gain 0.5% Damage Reduction for 1s, stacking up to 20 times"
        }
    ]
};
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Staditech Builder - Overwatch 2 Stadium Builder</title>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Oxanium:wght@400;500;600;700&family=Montserrat:wght@400;500;600&display=swap">
        <link rel="stylesheet" href="styles.css">
    </head>
<body>
    <header>
        <div class="logo-container">
            <img src="images/logo.png" alt="Staditech Builder Logo" class="header-logo">
        </div>
        <div class="subtitle">Overwatch 2 Stadium Mode Build Creator</div>
        <div class="header-actions">
            <a href="https://discord.gg/bdgwvCqPJd" target="_blank" class="discord-btn">
                <i class="fab fa-discord"></i> Join Discord
            </a>
            <div class="version-tag">v0.4 Beta</div>
        </div>
    </header>
    
    <div class="container">
        <div class="main-content">
            <div class="content-area">
                <h1>Build Your Stadium Hero</h1>
                
                <div class="hero-selector-container">
                    <div class="role-filters">
                        <div class="role-filter active" data-role="all">All Heroes</div>
                        <div class="role-filter" data-role="Tank">Tanks</div>
                        <div class="role-filter" data-role="Damage">Damage</div>
                        <div class="role-filter" data-role="Support">Support</div>
                    </div>
                    <div class="hero-selector" id="hero-selector">
                        <!-- Heroes will be dynamically added here -->
                    </div>
                </div>
            
                <div id="hero-info">
                    <!-- Hero details will be dynamically added here -->
                </div>
                
                <div id="hero-build-container" style="display: none;">
                    <!-- Selection summary -->
                    <div class="selection-summary">
                        <h3>Selected Powers (<span id="powers-counter">0</span>/4)</h3>
                        <div id="selected-powers-list" class="summary-list">
                            <div class="empty-selection">No powers selected yet</div>
                        </div>
                        
                        <h3>Selected Items (<span id="items-counter">0</span>/6)</h3>
                        <div id="selected-items-list" class="summary-list">
                            <div class="empty-selection">No items selected yet</div>
                        </div>
                        
                        <h3>Total Cost: <span id="total-cost" class="item-cost">0</span> Stadium Cash</h3>
                        
                        <div class="build-actions">
                            <button id="save-current-build" class="action-btn">
                                <i class="fas fa-save"></i> Save Build
                            </button>
                            <button id="show-saved-builds-btn" class="action-btn">
                                <i class="fas fa-folder-open"></i> Saved Builds
                            </button>
                            
                            <!-- Saved Builds Panel -->
                            <div id="saved-builds-panel" class="saved-builds-panel dropdown-panel">
                                <div class="saved-builds-title">
                                    <h3>Your Saved Builds</h3>
                                    <button id="close-saved-builds">
                                        <i class="fas fa-times"></i> Close
                                    </button>
                                </div>
                                <div id="saved-builds-list" class="saved-builds-list">
                                    <!-- Saved builds will be dynamically added here -->
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Tab Navigation -->
                    <div class="tab-navigation" id="tab-navigation">
                        <button class="tab-button active" data-tab="powers">
                            <i class="fas fa-bolt"></i> Powers
                        </button>
                        <button class="tab-button" data-tab="hero-items">
                            <i class="fas fa-toolbox"></i> Hero Items
                        </button>
                        <button class="tab-button" data-tab="universal-items">
                            <i class="fas fa-globe"></i> Universal Items
                        </button>
                    </div>
                    
                    <!-- Pages -->
                    <div id="pages-container">
                        <!-- Hero Overview Page (Combined with Abilities) -->
                        <div id="overview-page" class="page active">
                            <!-- Content will be dynamically added here -->
                        </div>
                        
                        <div id="powers-page" class="page">
                            <!-- Powers content will be dynamically added here -->
                        </div>
                        
                        <div id="hero-items-page" class="page">
                            <!-- Hero-specific items content will be dynamically added here -->
                        </div>
                        
                        <div id="universal-items-page" class="page">
                            <!-- Universal items content will be dynamically added here -->
                        </div>
                    </div>
                    
                    <div class="share-build" id="share-build-container">
                        <button class="share-btn glow-effect" id="share-btn">
                            <i class="fas fa-share-alt"></i> Share Build
                        </button>
                        <div class="beta-notice">
                            <i class="fas fa-exclamation-triangle"></i>
                            <span>v0.4 Beta - Bugs are expected. Please report them in our Discord.</span>
                        </div>
                        <div id="build-code" class="build-code">
                            <!-- Build code will be dynamically added here -->
                        </div>
                        <!-- Hidden textarea for copy functionality -->
                        <textarea id="build-code-text" class="build-code-text"></textarea>
                    </div>
                </div>
            </div>
            
            
        </div>
        <div class="persistent-build-summary" id="persistent-build-summary">
            <div class="persistent-hero-info">
                <div class="persistent-hero-icon">
                    <!-- Hero icon will be added dynamically -->
                </div>
                <div class="persistent-hero-details">
                    <h3 id="persistent-hero-name">Select a Hero</h3>
                    <div id="persistent-hero-role" class="persistent-hero-role">-</div>
                </div>
            </div>
            
            <div class="stats-section">
                <div class="stat-row">
                    <div class="stat-icon">
                        <img src="images/stats/life.png" alt="Life">
                    </div>
                    <div class="stat-name">LIFE</div>
                    <div class="life-bar-container" id="life-bar-container">
                        <!-- Life segments will be added dynamically -->
                    </div>
                    <div class="stat-value" id="persistent-health">225</div>
                </div>
                
                <div class="stat-row">
                    <div class="stat-icon">
                        <img src="images/stats/weapon-power.png" alt="Weapon Power">
                    </div>
                    <div class="stat-name">WEAPON POWER</div>
                    <div class="stat-bar-container">
                        <div class="stat-bar" id="weapon-power-bar"></div>
                    </div>
                    <div class="stat-value" id="weapon-power-value">0%</div>
                </div>
                
                <div class="stat-row">
                    <div class="stat-icon">
                        <img src="images/stats/ability-power.png" alt="Ability Power">
                    </div>
                    <div class="stat-name">ABILITY POWER</div>
                    <div class="stat-bar-container">
                        <div class="stat-bar" id="ability-power-bar"></div>
                    </div>
                    <div class="stat-value" id="ability-power-value">0%</div>
                </div>
                
                <div class="stat-row">
                    <div class="stat-icon">
                        <img src="images/stats/attack-speed.png" alt="Attack Speed">
                    </div>
                    <div class="stat-name">ATTACK SPEED</div>
                    <div class="stat-bar-container">
                        <div class="stat-bar" id="attack-speed-bar"></div>
                    </div>
                    <div class="stat-value" id="attack-speed-value">0%</div>
                </div>
                
                <div class="stat-row">
                    <div class="stat-icon">
                        <img src="images/stats/cooldown-reduction.png" alt="Cooldown Reduction">
                    </div>
                    <div class="stat-name">COOLDOWN REDUCTION</div>
                    <div class="stat-bar-container">
                        <div class="stat-bar" id="cooldown-bar"></div>
                    </div>
                    <div class="stat-value" id="cooldown-value">0%</div>
                </div>
                
                <div class="stat-row">
                    <div class="stat-icon">
                        <img src="images/stats/max-ammo.png" alt="Max Ammo">
                    </div>
                    <div class="stat-name">MAX AMMO</div>
                    <div class="stat-bar-container">
                        <div class="stat-bar" id="max-ammo-bar"></div>
                    </div>
                    <div class="stat-value" id="max-ammo-value">0%</div>
                </div>
                
                <div class="stat-row">
                    <div class="stat-icon">
                        <img src="images/stats/weapon-lifesteal.png" alt="Weapon Lifesteal">
                    </div>
                    <div class="stat-name">WEAPON LIFESTEAL</div>
                    <div class="stat-bar-container">
                        <div class="stat-bar" id="weapon-lifesteal-bar"></div>
                    </div>
                    <div class="stat-value" id="weapon-lifesteal-value">0%</div>
                </div>
                
                <div class="stat-row">
                    <div class="stat-icon">
                        <img src="images/stats/ability-lifesteal.png" alt="Ability Lifesteal">
                    </div>
                    <div class="stat-name">ABILITY LIFESTEAL</div>
                    <div class="stat-bar-container">
                        <div class="stat-bar" id="ability-lifesteal-bar"></div>
                    </div>
                    <div class="stat-value" id="ability-lifesteal-value">0%</div>
                </div>
                
                <div class="stat-row">
                    <div class="stat-icon">
                        <img src="images/stats/move-speed.png" alt="Move Speed">
                    </div>
                    <div class="stat-name">MOVE SPEED</div>
                    <div class="stat-bar-container">
                        <div class="stat-bar" id="move-speed-bar"></div>
                    </div>
                    <div class="stat-value" id="move-speed-value">0%</div>
                </div>
                
                <div class="stat-row">
                    <div class="stat-icon">
                        <img src="images/stats/reload-speed.png" alt="Reload Speed">
                    </div>
                    <div class="stat-name">RELOAD SPEED</div>
                    <div class="stat-bar-container">
                        <div class="stat-bar" id="reload-speed-bar"></div>
                    </div>
                    <div class="stat-value" id="reload-speed-value">0%</div>
                </div>
                
                <div class="stat-row">
                    <div class="stat-icon">
                        <img src="images/stats/melee-damage.png" alt="Melee Damage">
                    </div>
                    <div class="stat-name">MELEE DAMAGE</div>
                    <div class="stat-bar-container">
                        <div class="stat-bar" id="melee-damage-bar"></div>
                    </div>
                    <div class="stat-value" id="melee-damage-value">0%</div>
                </div>
                
                <div class="stat-row">
                    <div class="stat-icon">
                        <img src="images/stats/critical-damage.png" alt="Critical Damage">
                    </div>
                    <div class="stat-name">CRITICAL DAMAGE</div>
                    <div class="stat-bar-container">
                        <div class="stat-bar" id="critical-damage-bar"></div>
                    </div>
                    <div class="stat-value" id="critical-damage-value">0%</div>
                </div>
            </div>
            
            <!-- Ability Navigation -->
            <!-- Ability Navigation -->
<div class="ability-navigation">
    <h4><i class="fas fa-bolt"></i> Abilities</h4>
    <div class="ability-carousel" id="ability-carousel">
        <!-- Ability slides will be added dynamically -->
    </div>
    <div class="nav-arrows">
        <button class="nav-arrow" id="prev-ability"><i class="fas fa-chevron-left"></i></button>
        <button class="nav-arrow" id="next-ability"><i class="fas fa-chevron-right"></i></button>
    </div>
    <div class="ability-indicator" id="ability-indicator">
        <!-- Indicator dots will be added dynamically -->
    </div>
</div>
            
            <div class="persistent-build-details">
                <div class="persistent-powers">
                    <div class="persistent-powers-header">
                        <span>Powers (<span id="persistent-powers-count">0</span>/4)</span>
                    </div>
                    <div class="persistent-powers-list" id="persistent-powers-list">
                        <!-- Powers will be added dynamically -->
                    </div>
                </div>
                
                <div class="persistent-items">
                    <div class="persistent-items-header">
                        <span>Items (<span id="persistent-items-count">0</span>/6)</span>
                        <span class="persistent-total-cost">Total: <span id="persistent-total-cost">0</span></span>
                    </div>
                    <div class="persistent-items-list" id="persistent-items-list">
                        <!-- Items will be added dynamically -->
                    </div>
                </div>
            </div>
            
            <div class="persistent-actions">
                <button id="persistent-save" class="persistent-action-btn">
                    <i class="fas fa-save"></i> Save
                </button>
                <button id="persistent-share" class="persistent-action-btn">
                    <i class="fas fa-share-alt"></i> Share
                </button>
            </div>
        </div>
    </div>
    <!-- Enhanced persistent build summary -->
    <!-- Replace the content of the persistent-build-summary div -->

    
    <!-- Import Build Modal -->
    <div id="import-modal" class="import-modal">
        <div class="import-modal-content">
            <button id="close-import-modal" class="import-modal-close">
                <i class="fas fa-times"></i>
            </button>
            <h3 class="import-modal-title">Import Build</h3>
            <p>Paste your build code below:</p>
            <textarea id="import-textarea" class="import-textarea" placeholder="Paste your build code here..."></textarea>
            <button id="import-build" class="import-build-btn">
                <i class="fas fa-file-import"></i> Import
            </button>
        </div>
    </div>
    
    <!-- Toast Notification -->
    <div id="toast" class="toast">
        <i class="fas fa-check-circle"></i>
        <span id="toast-message">Message here</span>
    </div>

    <footer>
        <p>Staditech Builder is not affiliated with Blizzard Entertainment. All Overwatch content belongs to Blizzard. Made by sabine0 on Discord</p>
        <a href="#" id="privacy-link">Privacy Policy</a>
    </footer>

    <script src="data/heroes.js"></script>
    <script src="data/universalItems.js"></script>
    <script src="js/app.js"></script>
    <div class="floating-share-btn" id="floating-share-btn">
        <i class="fas fa-share-alt"></i>
    </div>
    
    <!-- Privacy Policy Modal -->
    <div id="privacy-modal" class="modal">
        <div class="modal-content">
            <button id="close-privacy-modal" class="modal-close">
                <i class="fas fa-times"></i>
            </button>
            <h3 class="modal-title">Privacy Policy</h3>
            <div class="privacy-content">
                <p><strong>Last Updated: April 29, 2025</strong></p>
                <h4>1. Information We Collect</h4>
                <p>When you save a build in Staditech Builder, we collect the following information:</p>
                <ul>
                    <li>Selected hero</li>
                    <li>Selected powers</li>
                    <li>Selected items</li>
                    <li>Build name you provide</li>
                    <li>Date and time of save</li>
                </ul>
                
                <h4>2. How We Use Your Information</h4>
                <p>We use this information to:</p>
                <ul>
                    <li>Save your builds locally on your device</li>
                    <li>Share your builds via a unique URL when you choose to do so</li>
                    <li>Post build information to our Discord community when you save a build</li>
                </ul>
                
                <h4>3. Discord Integration</h4>
                <p>When you save a build, details about the build and a link to access it are automatically shared to our Discord community. This helps other players discover interesting builds and strategies. NO personal data is ever collected, sent nor stored.</p>
                
                <h4>4. Data Storage</h4>
                <p>Your builds are primarily stored in your browser's local storage and are not accessible to others unless you explicitly share them. If you clear your browser data, your saved builds will be deleted.</p>
                
                <h4>5. Contact Us</h4>
                <p>If you have any questions about this Privacy Policy, please join our Discord server.</p>
            </div>
        </div>
    </div>
    
    <div id="consent-popup" class="consent-popup">
        <div class="consent-content">
            <div class="popup-logo">STADITECH <span>BUILDER</span></div>
            <h3>Welcome to Staditech Builder!</h3>
            <p>We'd like to share your builds with our community via Discord when you save them. No personal data is ever collected, stored or transferred - only your hero selection, powers, and items.</p>
            <div class="consent-buttons">
                <button id="accept-consent" class="consent-btn consent-accept">Allow Build Sharing</button>
                <button id="decline-consent" class="consent-btn consent-decline">No Thanks</button>
            </div>
            <button id="close-consent" class="consent-close">×</button>
        </div>
    </div>
    
    <script>
        // Consent popup handling
        (function() {
            // Get elements
            var popup = document.getElementById('consent-popup');
            var acceptBtn = document.getElementById('accept-consent');
            var declineBtn = document.getElementById('decline-consent');
            
            // Check if consent value exists in localStorage
            if(localStorage.getItem('buildSharingConsent') === null) {
                // First visit - show the popup
                popup.style.display = 'flex';
                console.log('Showing consent popup - first visit');
            } else {
                // Not first visit - hide the popup
                popup.style.display = 'none';
                console.log('Consent already set to: ' + localStorage.getItem('buildSharingConsent'));
            }
            
            // Direct click handlers for buttons
            if(acceptBtn) {
                acceptBtn.onclick = function() {
                    localStorage.setItem('buildSharingConsent', 'true');
                    popup.style.display = 'none';
                    alert('Thank you! Your builds will be shared with our community.');
                    console.log('Consent accepted');
                };
            }
            
            if(declineBtn) {
                declineBtn.onclick = function() {
                    localStorage.setItem('buildSharingConsent', 'false');
                    popup.style.display = 'none';
                    alert('Your preference has been saved. Builds will not be shared.');
                    console.log('Consent declined');
                };
            }
            
            // Debug localStorage
            console.log('Current consent setting: ' + localStorage.getItem('buildSharingConsent'));
        })();
    </script>
</body>
</html>
</file>

<file path="js/app.js">
// Main app functionality
document.addEventListener('DOMContentLoaded', () => {
    const heroSelector = document.getElementById('hero-selector');
    const heroInfo = document.getElementById('hero-info');
    const heroBuilder = document.getElementById('hero-build-container');
    const shareBtn = document.getElementById('share-btn');
    const buildCodeDisplay = document.getElementById('build-code');
    
    // Page references
    const overviewPage = document.getElementById('overview-page');
    const powersPage = document.getElementById('powers-page');
    const heroItemsPage = document.getElementById('hero-items-page');
    const universalItemsPage = document.getElementById('universal-items-page');
    
    // Selected powers and items tracking
    let selectedPowers = [];
    let selectedItems = [];
    let selectedHero = null;
    

    // Call this after displaying a hero
    // Define base stats for each hero
    const heroBaseStats = {
        reaper: {
            'Health': 250,
            'Armor': 0,
            'Shield': 0,
            'Weapon Power': 100,
            'Ability Power': 100,
            'Attack Speed': 100,
            'Move Speed': 100,
            'Cooldown Reduction': 0,
            'Weapon Lifesteal': 0,
            'Ability Lifesteal': 0
        },
        dva: {
            'Health': 300,
            'Armor': 300,
            'Shield': 0,
            'Weapon Power': 100,
            'Ability Power': 100,
            'Attack Speed': 100,
            'Move Speed': 100,
            'Cooldown Reduction': 0,
            'Weapon Lifesteal': 0,
            'Ability Lifesteal': 0
        },
        moira: {
            'Health': 200,
            'Armor': 0,
            'Shield': 0,
            'Weapon Power': 100,
            'Ability Power': 100,
            'Attack Speed': 100,
            'Move Speed': 100,
            'Cooldown Reduction': 0,
            'Weapon Lifesteal': 0,
            'Ability Lifesteal': 0
        },
        reinhardt: {
            'Health': 500,
            'Armor': 125,
            'Shield': 1600,
            'Weapon Power': 100,
            'Ability Power': 100,
            'Attack Speed': 100,
            'Move Speed': 100,
            'Cooldown Reduction': 0,
            'Weapon Lifesteal': 0,
            'Ability Lifesteal': 0
        },
        soldier76: {
            'Health': 200,
            'Armor': 0,
            'Shield': 0,
            'Weapon Power': 100,
            'Ability Power': 100,
            'Attack Speed': 100,
            'Move Speed': 100,
            'Cooldown Reduction': 0,
            'Weapon Lifesteal': 0,
            'Ability Lifesteal': 0
        },
        kiriko: {
            'Health': 200,
            'Armor': 0,
            'Shield': 0,
            'Weapon Power': 100,
            'Ability Power': 100,
            'Attack Speed': 100,
            'Move Speed': 100,
            'Cooldown Reduction': 0,
            'Weapon Lifesteal': 0,
            'Ability Lifesteal': 0
        },
        genji: {
            'Health': 200,
            'Armor': 0,
            'Shield': 0,
            'Weapon Power': 100,
            'Ability Power': 100,
            'Attack Speed': 100,
            'Move Speed': 100,
            'Cooldown Reduction': 0,
            'Weapon Lifesteal': 0,
            'Ability Lifesteal': 0
        },
        mei: {
            'Health': 250,
            'Armor': 0,
            'Shield': 0,
            'Weapon Power': 100,
            'Ability Power': 100,
            'Attack Speed': 100,
            'Move Speed': 100,
            'Cooldown Reduction': 0,
            'Weapon Lifesteal': 0,
            'Ability Lifesteal': 0
        },
        zarya: {
            'Health': 250,
            'Armor': 0,
            'Shield': 225,
            'Weapon Power': 100,
            'Ability Power': 100,
            'Attack Speed': 100,
            'Move Speed': 100,
            'Cooldown Reduction': 0,
            'Weapon Lifesteal': 0,
            'Ability Lifesteal': 0
        },
        junkerqueen: {
            'Health': 425,
            'Armor': 0,
            'Shield': 0,
            'Weapon Power': 100,
            'Ability Power': 100,
            'Attack Speed': 100,
            'Move Speed': 100,
            'Cooldown Reduction': 0,
            'Weapon Lifesteal': 0,
            'Ability Lifesteal': 0
        },
        orisa: {
            'Health': 275,
            'Armor': 275,
            'Shield': 0,
            'Weapon Power': 100,
            'Ability Power': 100,
            'Attack Speed': 100,
            'Move Speed': 100,
            'Cooldown Reduction': 0,
            'Weapon Lifesteal': 0,
            'Ability Lifesteal': 0
        },
        cassidy: {
            'Health': 225, 
            'Armor': 0,
            'Shield': 0,
            'Weapon Power': 100,
            'Ability Power': 100,
            'Attack Speed': 100,
            'Move Speed': 100,
            'Cooldown Reduction': 0,
            'Weapon Lifesteal': 0,
            'Ability Lifesteal': 0
        },
        ashe: {
            'Health': 200,
            'Armor': 0,
            'Shield': 0,
            'Weapon Power': 100,
            'Ability Power': 100,
            'Attack Speed': 100,
            'Move Speed': 100,
            'Cooldown Reduction': 0,
            'Weapon Lifesteal': 0,
            'Ability Lifesteal': 0
        },
        ana: {
            'Health': 200,
            'Armor': 0,
            'Shield': 0,
            'Weapon Power': 100,
            'Ability Power': 100,
            'Attack Speed': 100,
            'Move Speed': 100,
            'Cooldown Reduction': 0,
            'Weapon Lifesteal': 0,
            'Ability Lifesteal': 0
        },
        mercy: {
            'Health': 200,
            'Armor': 0,
            'Shield': 0,
            'Weapon Power': 100,
            'Ability Power': 100,
            'Attack Speed': 100,
            'Move Speed': 100,
            'Cooldown Reduction': 0,
            'Weapon Lifesteal': 0,
            'Ability Lifesteal': 0
        },
        lucio: {
            'Health': 200,
            'Armor': 0,
            'Shield': 0,
            'Weapon Power': 100,
            'Ability Power': 100,
            'Attack Speed': 100,
            'Move Speed': 100,
            'Cooldown Reduction': 0,
            'Weapon Lifesteal': 0,
            'Ability Lifesteal': 0
        },
        juno: {
            'Health': 200,
            'Armor': 0,
            'Shield': 0,
            'Weapon Power': 100,
            'Ability Power': 100,
            'Attack Speed': 100,
            'Move Speed': 100,
            'Cooldown Reduction': 0,
            'Weapon Lifesteal': 0,
            'Ability Lifesteal': 0
        }
        
    
    };
    
    // Current hero stats and modifiers
    let currentHeroStats = {};
    let statModifiers = {};
    
    // Pattern to match stat patterns in item descriptions
    // Add or update this near the top of app.js
const statPatterns = [
    { regex: /\+(\d+)\s*Health/g, stat: 'Health', isPercentage: false, baseValue: 0 },
    { regex: /\+(\d+)\s*Armor/g, stat: 'Armor', isPercentage: false, baseValue: 0 },
    { regex: /\+(\d+)\s*Shield/g, stat: 'Shield', isPercentage: false, baseValue: 0 },
    { regex: /\+(\d+)%\s*Weapon Power/g, stat: 'Weapon Power', isPercentage: true, baseValue: 100 },
    { regex: /\+(\d+)%\s*Ability Power/g, stat: 'Ability Power', isPercentage: true, baseValue: 100 },
    { regex: /\+(\d+)%\s*Attack Speed/g, stat: 'Attack Speed', isPercentage: true, baseValue: 100 },
    { regex: /\+(\d+)%\s*Move Speed/g, stat: 'Move Speed', isPercentage: true, baseValue: 100 },
    { regex: /\+(\d+)%\s*Cooldown Reduction/g, stat: 'Cooldown Reduction', isPercentage: true, baseValue: 0 },
    { regex: /\+(\d+)%\s*Weapon Lifesteal/g, stat: 'Weapon Lifesteal', isPercentage: true, baseValue: 0 },
    { regex: /\+(\d+)%\s*Ability Lifesteal/g, stat: 'Ability Lifesteal', isPercentage: true, baseValue: 0 },
    { regex: /\+(\d+)%\s*Reload Speed/g, stat: 'Reload Speed', isPercentage: true, baseValue: 0 },
    { regex: /\+(\d+)%\s*Melee Damage/g, stat: 'Melee Damage', isPercentage: true, baseValue: 0 },
    { regex: /\+(\d+)%\s*Critical Damage/g, stat: 'Critical Damage', isPercentage: true, baseValue: 0 }
];
loadBuildFromURL();
    setupShareFeatures();
    
    // Helper function to map item names to icon filenames (PNG format)
    function getIconFileName(itemName) {
        // Keep the original name including spaces and special characters, just use PNG extension
        return itemName + '.png';
    }
    
    // Helper function to map power names to icon filenames (PNG format)
    function getPowerIconFileName(powerName) {
        // Keep the original name including spaces and special characters, just use PNG extension
        return powerName + '.png';
    }
    
    // Function to get hero icon path
    function getHeroIconPath(heroName) {
        if (heroName.includes("Soldier")) return `images/heroes/Soldier76/soldier76.png`;
        return `images/heroes/${heroName}/${heroName.toLowerCase()}.png`;
    }

    // Function to get ability icon path
    function getAbilityIconPath(heroName, abilityName) {
        return `images/heroes/${heroName}/Abilities/${abilityName}.png`;
    }
    
    // Fallback function to generate colored icon with initial if image doesn't load
    function handleImageError(img) {
        // Get name from alt attribute
        const name = img.alt || 'X';
        
        // Determine category from parent elements
        let category = 'unknown';
        if (img.closest('.item-card')) {
            category = img.closest('.item-card').dataset.category;
        } else if (img.closest('.power-card')) {
            category = 'power';
        }
        
        // Determine color based on category
        let bgColor;
        if (category === 'weapon') {
            bgColor = '#ff7e33'; // Weapon color
        } else if (category === 'ability') {
            bgColor = '#4adfff'; // Ability color
        } else if (category === 'survival') {
            bgColor = '#83ff52'; // Survival color
        } else if (category === 'power') {
            bgColor = '#ff9c1e'; // Power color
        } else {
            bgColor = '#b0b0b0'; // Default gray
        }
        
        // Create a canvas to draw our fallback icon
        const canvas = document.createElement('canvas');
        canvas.width = 40;
        canvas.height = 40;
        const ctx = canvas.getContext('2d');
        
        // Fill with background color
        ctx.fillStyle = bgColor;
        ctx.fillRect(0, 0, 40, 40);
        
        // Draw initial letter
        ctx.fillStyle = 'white';
        ctx.font = 'bold 20px "Rajdhani", sans-serif';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText(name.charAt(0), 20, 20);
        
        // Replace image source with canvas data
        img.src = canvas.toDataURL('image/png');
        // Remove error handler to prevent infinite loops
        img.onerror = null;
    }
    function updateExtendedStatsDisplay() {
        if (!selectedHero) return;
        
        const hero = heroes[selectedHero];
        
        // Check if stats section elements exist at all before proceeding
        if (!document.getElementById('life-bar-container')) {
            // Elements don't exist yet - bail out early
            return;
        }
        
        try {
            // Update stat bars
    updateStatBar('weapon-power-bar', currentHeroStats['Weapon Power'] || 100);
    updateStatBar('ability-power-bar', currentHeroStats['Ability Power'] || 100);
    updateStatBar('attack-speed-bar', currentHeroStats['Attack Speed'] || 100);
    updateStatBar('cooldown-bar', currentHeroStats['Cooldown Reduction'] || 0, 50);
    updateStatBar('max-ammo-bar', currentHeroStats['Max Ammo'] || 100);
    updateStatBar('weapon-lifesteal-bar', currentHeroStats['Weapon Lifesteal'] || 0, 50);
    updateStatBar('ability-lifesteal-bar', currentHeroStats['Ability Lifesteal'] || 0, 50);
    updateStatBar('move-speed-bar', currentHeroStats['Move Speed'] || 100, 150);
    updateStatBar('reload-speed-bar', currentHeroStats['Reload Speed'] || 0, 50);
    updateStatBar('melee-damage-bar', currentHeroStats['Melee Damage'] || 0, 50);
    updateStatBar('critical-damage-bar', currentHeroStats['Critical Damage'] || 0, 50);
    
    // Update health bar segments
    updateHealthBarSegments(currentHeroStats['Health'] || hero.health);
            
            // Update percentage-based stats
            const statMappings = [
                { stat: 'Weapon Power', barId: 'weapon-power-bar', valueId: 'weapon-power-value' },
                { stat: 'Ability Power', barId: 'ability-power-bar', valueId: 'ability-power-value' },
                { stat: 'Attack Speed', barId: 'attack-speed-bar', valueId: 'attack-speed-value' },
                { stat: 'Cooldown Reduction', barId: 'cooldown-bar', valueId: 'cooldown-value' },
                { stat: 'Max Ammo', barId: 'max-ammo-bar', valueId: 'max-ammo-value' },
                { stat: 'Weapon Lifesteal', barId: 'weapon-lifesteal-bar', valueId: 'weapon-lifesteal-value' },
                { stat: 'Ability Lifesteal', barId: 'ability-lifesteal-bar', valueId: 'ability-lifesteal-value' },
                { stat: 'Move Speed', barId: 'move-speed-bar', valueId: 'move-speed-value' },
                { stat: 'Reload Speed', barId: 'reload-speed-bar', valueId: 'reload-speed-value' },
                { stat: 'Melee Damage', barId: 'melee-damage-bar', valueId: 'melee-damage-value' },
                { stat: 'Critical Damage', barId: 'critical-damage-bar', valueId: 'critical-damage-value' }
            ];
            
            statMappings.forEach(mapping => {
                const baseValue = 100; // Default base value
                const currentValue = currentHeroStats[mapping.stat] || baseValue;
                const diff = currentValue - baseValue;
                
                // Set the bar width (max 100%)
                const barElement = document.getElementById(mapping.barId);
                if (barElement) {
                    // Calculate percentage (0-100%)
                    let percentage = (currentValue / 200) * 100; // Assuming 200% is max for display
                    percentage = Math.min(100, Math.max(0, percentage)); // Clamp between 0-100
                    barElement.style.width = `${percentage}%`;
                }
                
                // Update the value text
                const valueElement = document.getElementById(mapping.valueId);
                if (valueElement) {
                    if (diff !== 0) {
                        valueElement.textContent = `${diff > 0 ? '+' : ''}${diff}%`;
                    } else {
                        valueElement.textContent = '0%';
                    }
                }
            });
        } catch (error) {
            console.error("Error updating extended stats display:", error);
        }
    }
    function updateAllStats() {
        // For each stat, check if we have a current value
        const stats = [
            "Weapon Power", "Ability Power", "Attack Speed", "Move Speed", 
            "Cooldown Reduction", "Weapon Lifesteal", "Ability Lifesteal",
            "Reload Speed", "Melee Damage", "Critical Damage", "Max Ammo"
        ];
        
        for (const stat of stats) {
            // Get base value
            const baseValue = stat === "Weapon Power" || stat === "Ability Power" || 
                              stat === "Attack Speed" || stat === "Move Speed" || 
                              stat === "Max Ammo" ? 100 : 0;
                              
            // Get current value
            const currentValue = currentHeroStats[stat] || baseValue;
            
            // Calculate difference
            const diff = currentValue - baseValue;
            
            // Update display
            const valueElement = document.getElementById(`${stat.toLowerCase().replace(/\s+/g, '-')}-value`);
            if (valueElement) {
                valueElement.textContent = diff !== 0 ? `${diff > 0 ? '+' : ''}${diff}%` : '0%';
            }
            
            // Update bar
            const barElement = document.getElementById(`${stat.toLowerCase().replace(/\s+/g, '-')}-bar`);
            if (barElement) {
                // Different max values based on stat type
                let maxValue = 200;
                if (stat === "Cooldown Reduction" || stat === "Weapon Lifesteal" || 
                    stat === "Ability Lifesteal" || stat === "Reload Speed" || 
                    stat === "Melee Damage" || stat === "Critical Damage") {
                    maxValue = 50;
                } else if (stat === "Move Speed") {
                    maxValue = 150;
                }
                
                // Calculate width percentage
                const range = maxValue - baseValue;
                const percentage = Math.min(100, Math.max(0, ((currentValue - baseValue) / range) * 100));
                barElement.style.width = `${percentage}%`;
            }
        }
        
        // Update health bar
        const healthValue = currentHeroStats['Health'] || 
                           (selectedHero ? heroes[selectedHero].health : 0);
        const healthElement = document.getElementById('persistent-health');
        if (healthElement) {
            healthElement.textContent = healthValue;
        }
        
        // Update health bar segments
        updateHealthBarSegments(healthValue);
        updatePersistentAbilityStats();
    }
    
    // When updating the DOM, add error handlers to all images
    function setupImageErrorHandlers() {
        document.querySelectorAll('.item-icon img, .power-icon img, .summary-item-icon img, .ability-icon img, .hero-profile img, .build-hero-icon img, .saved-build-hero-icon img').forEach(img => {
            if (!img.dataset.hasErrorHandler) {
                img.onerror = function() {
                    handleImageError(this);
                };
                img.dataset.hasErrorHandler = 'true';
            }
        });
    }
   // Replace the safeBase64Decode function in app.js
function safeBase64Decode(str) {
    try {
      // First try standard base64 decoding
      const decoded = atob(str);
      // Then parse the JSON
      try {
        return JSON.parse(decoded);
      } catch (jsonError) {
        // If regular parsing fails, try with decodeURIComponent for special characters
        return JSON.parse(decodeURIComponent(decoded));
      }
    } catch (e) {
      console.error("Error decoding build data:", e);
      return null;
    }
  }
    
    // Tab navigation
    function setupTabNavigation() {
        const tabButtons = document.querySelectorAll('.tab-button');
        tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                tabButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                
                const tabName = button.dataset.tab;
                const pages = document.querySelectorAll('.page');
                pages.forEach(page => page.classList.remove('active'));
                document.getElementById(`${tabName}-page`).classList.add('active');
            });
        });
        
        // Set Powers tab as default active tab
        const powersTab = document.querySelector('.tab-button[data-tab="powers"]');
        if (powersTab) {
            powersTab.click();
        }
    }
    function ensurePersistentBuildSummary() {
        const container = document.getElementById('persistent-build-summary');
        
        // If the container doesn't exist or is empty, create it
        if (!container || container.children.length === 0) {
            // Create the persistent build summary structure in the DOM
            document.body.insertAdjacentHTML('beforeend', `
                <div class="persistent-build-summary" id="persistent-build-summary">
                    <div class="persistent-hero-info">
                        <div class="persistent-hero-icon">
                            <!-- Hero icon -->
                        </div>
                        <div class="persistent-hero-details">
                            <h3 id="persistent-hero-name">Select a Hero</h3>
                            <div id="persistent-hero-role" class="persistent-hero-role">-</div>
                        </div>
                    </div>
                    
                    <!-- Stats Section -->
                    <div class="stats-section">
                        <div class="stat-row">
                            <div class="stat-icon">
                                <img src="images/stats/life.png" alt="Life">
                            </div>
                            <div class="stat-name">LIFE</div>
                            <div class="life-bar-container" id="life-bar-container">
                                <!-- Life segments will be added dynamically -->
                            </div>
                            <div class="stat-value" id="persistent-health">0</div>
                        </div>
                        
                        <!-- Add all other stat rows here -->
                        <!-- ... -->
                        
                    </div>
                    
                    <div class="persistent-build-details">
                        <div class="persistent-powers">
                            <div class="persistent-powers-header">
                                <span>Powers (<span id="persistent-powers-count">0</span>/4)</span>
                            </div>
                            <div class="persistent-powers-list" id="persistent-powers-list">
                                <div class="empty-selection">No powers selected</div>
                            </div>
                        </div>
                        
                        <div class="persistent-items">
                            <div class="persistent-items-header">
                                <span>Items (<span id="persistent-items-count">0</span>/6)</span>
                                <span class="persistent-total-cost">Total: <span id="persistent-total-cost">0</span></span>
                            </div>
                            <div class="persistent-items-list" id="persistent-items-list">
                                <div class="empty-selection">No items selected</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="persistent-actions">
                        <button id="persistent-save" class="persistent-action-btn">
                            <i class="fas fa-save"></i> Save
                        </button>
                        <button id="persistent-share" class="persistent-action-btn">
                            <i class="fas fa-share-alt"></i> Share
                        </button>
                    </div>
                </div>
            `);
            
            // Add other stat rows to complete the stats section
            const statsSection = document.querySelector('.stats-section');
            if (statsSection) {
                const statsToAdd = [
                    { name: 'WEAPON POWER', icon: 'weapon-power', id: 'weapon-power' },
                    { name: 'ABILITY POWER', icon: 'ability-power', id: 'ability-power' },
                    { name: 'ATTACK SPEED', icon: 'attack-speed', id: 'attack-speed' },
                    { name: 'COOLDOWN REDUCTION', icon: 'cooldown-reduction', id: 'cooldown' },
                    { name: 'MAX AMMO', icon: 'max-ammo', id: 'max-ammo' },
                    { name: 'WEAPON LIFESTEAL', icon: 'weapon-lifesteal', id: 'weapon-lifesteal' },
                    { name: 'ABILITY LIFESTEAL', icon: 'ability-lifesteal', id: 'ability-lifesteal' },
                    { name: 'MOVE SPEED', icon: 'move-speed', id: 'move-speed' },
                    { name: 'RELOAD SPEED', icon: 'reload-speed', id: 'reload-speed' },
                    { name: 'MELEE DAMAGE', icon: 'melee-damage', id: 'melee-damage' },
                    { name: 'CRITICAL DAMAGE', icon: 'critical-damage', id: 'critical-damage' }
                ];
                
                statsToAdd.forEach(stat => {
                    statsSection.insertAdjacentHTML('beforeend', `
                        <div class="stat-row">
                            <div class="stat-icon">
                                <img src="images/stats/${stat.icon}.png" alt="${stat.name}">
                            </div>
                            <div class="stat-name">${stat.name}</div>
                            <div class="stat-bar-container">
                                <div class="stat-bar" id="${stat.id}-bar"></div>
                            </div>
                            <div class="stat-value" id="${stat.id}-value">0%</div>
                        </div>
                    `);
                });
            }
            
            // Add event listeners for the buttons
            document.getElementById('persistent-save')?.addEventListener('click', saveCurrentBuild);
            document.getElementById('persistent-share')?.addEventListener('click', shareBuild);
        }
    }
    // Function to reset stats when hero changes
    function resetStats() {
        if (selectedHero) {
            currentHeroStats = JSON.parse(JSON.stringify(heroBaseStats[selectedHero]));
            statModifiers = {};
            
            // Update all stats displays
            updateAllStats();
        }
    }
    // Find this function in app.js
    function updateStatBar(id, value, maxValue = 200) {
        const bar = document.getElementById(id);
        if (bar) {
            // For ability lifesteal and similar stats, use base of 0 instead of 100
            const baseValue = id.includes('lifesteal') || id.includes('cooldown') || 
                             id.includes('reload') || id.includes('melee') ||
                             id.includes('critical') ? 0 : 100;
            
            // Calculate percentage (0-100%)
            let percentage = ((value - baseValue) / (maxValue - baseValue)) * 100;
            percentage = Math.min(100, Math.max(0, percentage)); // Clamp between 0-100
            bar.style.width = `${percentage}%`;
        }
    }
    
    // Function to parse item description and extract stat changes
    function parseItemStats(itemId, description, isAdding) {
        const multiplier = isAdding ? 1 : -1;
        
        // Clear existing stats for this item
        if (!statModifiers[itemId]) {
            statModifiers[itemId] = {};
        }
        
        // Health, Armor, Shield
        const healthMatch = description.match(/\+(\d+)\s*Health/);
        if (healthMatch) {
            statModifiers[itemId]['Health'] = parseInt(healthMatch[1]) * multiplier;
        }
        
        const armorMatch = description.match(/\+(\d+)\s*Armor/);
        if (armorMatch) {
            statModifiers[itemId]['Armor'] = parseInt(armorMatch[1]) * multiplier;
        }
        
        const shieldMatch = description.match(/\+(\d+)\s*Shield/);
        if (shieldMatch) {
            statModifiers[itemId]['Shield'] = parseInt(shieldMatch[1]) * multiplier;
        }
        
        // Percentage-based stats
        const statMatches = [
            { regex: /\+(\d+)%\s*Weapon Power/g, stat: 'Weapon Power' },
            { regex: /\+(\d+)%\s*Ability Power/g, stat: 'Ability Power' },
            { regex: /\+(\d+)%\s*Attack Speed/g, stat: 'Attack Speed' },
            { regex: /\+(\d+)%\s*Move Speed/g, stat: 'Move Speed' },
            { regex: /\+(\d+)%\s*Cooldown Reduction/g, stat: 'Cooldown Reduction' },
            { regex: /\+(\d+)%\s*Weapon Lifesteal/g, stat: 'Weapon Lifesteal' },
            { regex: /\+(\d+)%\s*Ability Lifesteal/g, stat: 'Ability Lifesteal' },
            { regex: /\+(\d+)%\s*Reload Speed/g, stat: 'Reload Speed' },
            { regex: /\+(\d+)%\s*Melee Damage/g, stat: 'Melee Damage' },
            { regex: /\+(\d+)%\s*Critical Damage/g, stat: 'Critical Damage' },
            { regex: /\+(\d+)%\s*Max Ammo/g, stat: 'Max Ammo' }
        ];
        
        statMatches.forEach(match => {
            const regex = match.regex;
            const stat = match.stat;
            
            const matches = [...description.matchAll(regex)];
            if (matches.length > 0) {
                statModifiers[itemId][stat] = parseInt(matches[0][1]) * multiplier;
            }
        });
    }
    
    // Function to find item description for an item
    function findItemDescription(itemId, itemName) {
        // First check if the item exists in the hero's items
        if (heroes[selectedHero]) {
            for (const category in heroes[selectedHero].items) {
                const foundItem = heroes[selectedHero].items[category].find(item => 
                    item.name === itemName || item.name.toLowerCase().replace(/\s/g, '-') === itemId);
                
                if (foundItem) {
                    return foundItem.description;
                }
            }
        }
        
        // Then check universal items
        for (const category in universalItems) {
            const foundItem = universalItems[category].find(item => 
                item.name === itemName || 'universal-' + item.name.toLowerCase().replace(/\s/g, '-') === itemId);
            
            if (foundItem) {
                return foundItem.description;
            }
        }
        return '';
    }
    
    // Calculate the updated stats based on base values and modifiers
    function calculateUpdatedStats() {
        // Start with base stats
        const updatedStats = {
            'Health': selectedHero ? heroes[selectedHero].health : 0,
            'Armor': selectedHero ? heroes[selectedHero].armor : 0,
            'Shield': selectedHero ? heroes[selectedHero].shield : 0,
            'Weapon Power': 100,
            'Ability Power': 100,
            'Attack Speed': 100,
            'Move Speed': 100,
            'Cooldown Reduction': 0,
            'Weapon Lifesteal': 0,
            'Ability Lifesteal': 0,
            'Reload Speed': 0,
            'Melee Damage': 0,
            'Critical Damage': 0,
            'Max Ammo': 100
        };
        
        // Apply all modifiers
        for (const itemId in statModifiers) {
            const modifiers = statModifiers[itemId];
            
            for (const stat in modifiers) {
                const value = modifiers[stat];
                updatedStats[stat] += value;
            }
        }
        
        // Update current stats
        currentHeroStats = updatedStats;
    }
    
    // Function to update stats when items are selected/deselected
    // Also update this function
    function updateStatsFromItems() {
        // Reset to base stats
        resetStats();
        
        // Apply modifiers from all selected items
        selectedItems.forEach(item => {
            const itemDescription = item.description || findItemDescription(item.id, item.name);
            
            if (itemDescription) {
                parseItemStats(item.id, itemDescription, true);
            }
        });
        
        // Calculate new stats
        calculateUpdatedStats();
        
        // Update all UI displays
        updateAllStats();
        
        // Update overview page if active 
        const overviewPageElement = document.getElementById('overview-page');
        if (overviewPageElement.classList.contains('active')) {
            updateOverviewPage();
        }
    }
    
    // Create and update the stats display panel
    function updateStatsDisplay() {
        const statsContainer = document.getElementById('hero-stats-panel');
        if (!statsContainer) return;
        
        if (!selectedHero) return;
        const hero = heroes[selectedHero];
        
        let statsHTML = `<h3>Current Stats</h3><div class="stats-grid">`;
        
        // Display health, armor, shield stats
        const healthValue = currentHeroStats['Health'] || hero.health;
        const armorValue = currentHeroStats['Armor'] || hero.armor;
        const shieldValue = currentHeroStats['Shield'] || hero.shield;
        
        const healthDiff = healthValue - hero.health;
        const armorDiff = armorValue - hero.armor;
        const shieldDiff = shieldValue - hero.shield;
        
        // Create tickbar for health
        const maxHealth = 500; // Base value for 100% width
        const healthPercent = Math.min(100, (healthValue / maxHealth) * 100);
        
        statsHTML += `
            <div class="stat-item ${healthDiff !== 0 ? 'modified' : ''}">
                <span class="stat-label">Health:</span>
                <div class="stat-value-container">
                    <span class="stat-value stat-health">${healthValue}${healthDiff !== 0 ? 
                        `<span class="stat-bonus">${healthDiff > 0 ? '+' : ''}${healthDiff}</span>` : ''}
                    </span>
                    <div class="stat-tickbar-container">
                        <div class="stat-tickbar stat-tickbar-health" style="width: ${healthPercent}%"></div>
                    </div>
                </div>
            </div>
        `;
        
        if (hero.armor > 0 || armorValue > 0) {
            const maxArmor = 300; // Base value for 100% width
            const armorPercent = Math.min(100, (armorValue / maxArmor) * 100);
            
            statsHTML += `
                <div class="stat-item ${armorDiff !== 0 ? 'modified' : ''}">
                    <span class="stat-label">Armor:</span>
                    <div class="stat-value-container">
                        <span class="stat-value stat-armor">${armorValue}${armorDiff !== 0 ? 
                            `<span class="stat-bonus">${armorDiff > 0 ? '+' : ''}${armorDiff}</span>` : ''}
                        </span>
                        <div class="stat-tickbar-container">
                            <div class="stat-tickbar stat-tickbar-armor" style="width: ${armorPercent}%"></div>
                        </div>
                    </div>
                </div>
            `;
        }
        
        if (hero.shield > 0 || shieldValue > 0) {
            const maxShield = 1600; // Base value for 100% width for Reinhardt's shield
            const effectiveMaxShield = hero.name === "Reinhardt" ? maxShield : 300;
            const shieldPercent = Math.min(100, (shieldValue / effectiveMaxShield) * 100);
            
            statsHTML += `
                <div class="stat-item ${shieldDiff !== 0 ? 'modified' : ''}">
                    <span class="stat-label">Shield:</span>
                    <div class="stat-value-container">
                        <span class="stat-value stat-shield">${shieldValue}${shieldDiff !== 0 ? 
                            `<span class="stat-bonus">${shieldDiff > 0 ? '+' : ''}${shieldDiff}</span>` : ''}
                        </span>
                        <div class="stat-tickbar-container">
                            <div class="stat-tickbar stat-tickbar-shield" style="width: ${shieldPercent}%"></div>
                        </div>
                    </div>
                </div>
            `;
        }
        
        // Add code for armor and shield display...
    // (Your existing code for these sections)
    
    // Display percentage-based stats
    const displayPercentageStats = [
        { name: 'Weapon Power', styleClass: 'stat-weapon', maxValue: 200 },
        { name: 'Ability Power', styleClass: 'stat-ability', maxValue: 200 },
        { name: 'Attack Speed', styleClass: 'stat-weapon', maxValue: 200 },
        { name: 'Move Speed', styleClass: 'stat-survival', maxValue: 150 },
        { name: 'Cooldown Reduction', styleClass: 'stat-cooldown', maxValue: 50 },
        { name: 'Weapon Lifesteal', styleClass: 'stat-weapon', maxValue: 50 },
        { name: 'Ability Lifesteal', styleClass: 'stat-ability', maxValue: 50 }
    ];
    
    displayPercentageStats.forEach(stat => {
        const baseValue = heroBaseStats[selectedHero][stat.name] || 0;
        const currentValue = currentHeroStats[stat.name] || baseValue;
        const diff = currentValue - baseValue;
        
        if (diff !== 0 || stat.name === 'Weapon Power' || stat.name === 'Ability Power') {
            const statPercent = Math.min(100, (currentValue / stat.maxValue) * 100);
            
            statsHTML += `
                <div class="stat-item ${diff !== 0 ? 'modified' : ''}">
                    <span class="stat-label">${stat.name}:</span>
                    <div class="stat-value-container">
                        <span class="stat-value ${stat.styleClass}">${currentValue}%${diff !== 0 ? 
                            `<span class="stat-bonus">${diff > 0 ? '+' : ''}${diff}%</span>` : ''}
                        </span>
                        <div class="stat-tickbar-container">
                            <div class="stat-tickbar ${stat.styleClass}-bar" style="width: ${statPercent}%"></div>
                        </div>
                    </div>
                </div>
            `;
        }
    });
    
    statsHTML += `</div>`;
    statsContainer.innerHTML = statsHTML;
    
    // Also update the persistent stats
    updatePersistentStats();
    }
    document.addEventListener('heroSelected', function() {
        initAbilityCarousel();
        updateAllStats();
    });
    function setupRoleFilters() {
        const roleFilters = document.querySelectorAll('.role-filter');
        roleFilters.forEach(filter => {
            filter.addEventListener('click', () => {
                // Set active class
                roleFilters.forEach(f => f.classList.remove('active'));
                filter.classList.add('active');
                
                // Filter heroes
                const role = filter.dataset.role;
                const heroCards = document.querySelectorAll('.hero-card');
                
                heroCards.forEach(card => {
                    const heroId = card.dataset.hero;
                    const hero = heroes[heroId];
                    
                    if (role === 'all' || hero.role === role) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            });
        });
    }
    
    // Calculate modified ability stats based on current stat values
    // Enhanced function to calculate modified ability stats for all heroes
    function calculateModifiedAbilityStats(ability, currentStats, baseStats) {
        const modifiedStats = [];
        
        ability.stats.forEach(stat => {
            // Default values
            let baseValue = null;
            let modifiedValue = null;
            let modifier = 0;
            let contributors = [];
            let modifierType = null;
            let displayFormat = null;
            
            // Parse the stat value based on its format
            
            // 1. Pellet-based damage (e.g. "6 per pellet, 20 pellets per shot")
            if (stat.value.includes("per pellet") && stat.value.includes("pellet")) {
                const pelletMatch = /(\d+(\.\d+)?)\s*per pellet/.exec(stat.value);
                const countMatch = /(\d+(\.\d+)?)\s*pellets?/.exec(stat.value);
                
                if (pelletMatch && countMatch) {
                    const pelletDamage = parseFloat(pelletMatch[1]);
                    const pelletCount = parseFloat(countMatch[1]);
                    const totalBase = pelletDamage * pelletCount;
                    
                    displayFormat = "pellet";
                    baseValue = {
                        pellet: pelletDamage,
                        count: pelletCount,
                        total: totalBase
                    };
                    
                    // Apply modifier based on stat type
                    if (stat.label.includes("Damage")) {
                        modifierType = "Weapon Power";
                        const weaponPowerPercent = currentStats['Weapon Power'] || 100;
                        const weaponPowerModifier = (weaponPowerPercent - 100) / 100;
                        
                        const pelletMod = pelletDamage * weaponPowerModifier;
                        const totalMod = totalBase * weaponPowerModifier;
                        
                        modifier = {
                            pellet: pelletMod,
                            total: totalMod
                        };
                        
                        modifiedValue = {
                            pellet: pelletDamage + pelletMod,
                            count: pelletCount,
                            total: totalBase + totalMod
                        };
                    }
                }
            }
            else if ((stat.label.includes("Damage") || stat.value.includes("damage")) && 
         stat.value.includes("over") && stat.value.includes("s")) {
    
    // Look for patterns like "30 damage over 3s" or "40 over 2 seconds"
    const dotMatch = /(\d+(\.\d+)?)\s*(?:damage)?\s*over\s*(\d+(\.\d+)?)\s*s(?:econds?)?/i.exec(stat.value);
    
    if (dotMatch) {
        const totalDamage = parseFloat(dotMatch[1]);
        const duration = parseFloat(dotMatch[3]);
        
        displayFormat = "dot";
        baseValue = {
            total: totalDamage,
            duration: duration,
            dps: totalDamage / duration
        };
        
        // DOT effects scale with both Weapon Power and Attack Speed
        const weaponPowerPercent = currentStats['Weapon Power'] || 100;
        const attackSpeedPercent = currentStats['Attack Speed'] || 100;
        
        // Weapon Power affects total damage
        const weaponPowerModifier = (weaponPowerPercent - 100) / 100;
        const damageModifier = totalDamage * weaponPowerModifier;
        
        // Attack Speed affects how quickly the damage is dealt (reducing duration)
        const attackSpeedModifier = (attackSpeedPercent - 100) / 100;
        const durationModifier = -(duration * attackSpeedModifier);
        
        // Calculate new values
        const newTotalDamage = totalDamage + damageModifier;
        const newDuration = Math.max(0.1, duration + durationModifier);
        const newDps = newTotalDamage / newDuration;
        
        modifiedValue = {
            total: newTotalDamage,
            duration: newDuration,
            dps: newDps
        };
        
        modifier = {
            total: damageModifier,
            duration: durationModifier,
            dps: newDps - baseValue.dps
        };
        
        // Track both modifiers
        modifierType = {
            damage: "Weapon Power",
            duration: "Attack Speed"
        };
    }
}
            // 2. Range-based stats (e.g. "95-190 per second")
            else if (stat.value.includes("-") && !stat.value.includes("seconds")) {
                const rangeMatch = /(\d+(\.\d+)?)-(\d+(\.\d+)?)/.exec(stat.value);
                
                if (rangeMatch) {
                    const minValue = parseFloat(rangeMatch[1]);
                    const maxValue = parseFloat(rangeMatch[3]);
                    
                    displayFormat = "range";
                    baseValue = { min: minValue, max: maxValue };
                    
                    // Determine appropriate modifier
                    if (stat.label.includes("Damage")) {
                        modifierType = "Weapon Power";
                        const weaponPowerPercent = currentStats['Weapon Power'] || 100;
                        const weaponPowerModifier = (weaponPowerPercent - 100) / 100;
                        
                        modifier = {
                            min: minValue * weaponPowerModifier,
                            max: maxValue * weaponPowerModifier
                        };
                        
                        modifiedValue = {
                            min: minValue + modifier.min,
                            max: maxValue + modifier.max
                        };
                    }
                }
            }
            // 3. Fire rate stats
            else if ((stat.label.includes("Fire Rate") || stat.label.includes("Rate of Fire")) && 
                     (stat.value.includes("per second") || stat.value.includes("rounds per second") || 
                      stat.value.includes("shots per second"))) {
                
                let rateMatch = /(\d+(\.\d+)?)\s*(shots|rounds)?\s*per second/.exec(stat.value);
                
                if (!rateMatch) {
                    // Try alternate format like "1 swing per 0.9 seconds"
                    rateMatch = /(\d+(\.\d+)?)\s*(?:swing|shot)s?\s*per\s*(\d+(\.\d+)?)\s*seconds/.exec(stat.value);
                    
                    if (rateMatch) {
                        const count = parseFloat(rateMatch[1]);
                        const time = parseFloat(rateMatch[3]);
                        baseValue = count / time; // Convert to per second
                    } 
                } else {
                    baseValue = parseFloat(rateMatch[1]);
                }
                
                if (baseValue !== null) {
                    modifierType = "Attack Speed";
                    const attackSpeedPercent = currentStats['Attack Speed'] || 100;
                    const attackSpeedModifier = (attackSpeedPercent - 100) / 100;
                    
                    modifier = baseValue * attackSpeedModifier;
                    modifiedValue = baseValue + modifier;
                    displayFormat = "rate";
                }
            }
            // 4. Cooldown stats
            else if (stat.label.includes("Cooldown")) {
                const cdMatch = /(\d+(\.\d+)?)\s*seconds?/.exec(stat.value);
                
                if (cdMatch) {
                    baseValue = parseFloat(cdMatch[1]);
                    
                    modifierType = "Cooldown Reduction";
                    const cooldownPercent = currentStats['Cooldown Reduction'] || 0;
                    const cooldownModifier = cooldownPercent / 100;
                    
                    modifier = -(baseValue * cooldownModifier); // Negative for reduction
                    modifiedValue = baseValue + modifier;
                    displayFormat = "cooldown";
                }
            }
            // 5. Duration stats
            else if (stat.label.includes("Duration") && !stat.label.includes("Stun") && 
                     !stat.label.includes("Sleep") && stat.value.includes("seconds")) {
                
                const durationMatch = /(\d+(\.\d+)?)\s*seconds?/.exec(stat.value);
                
                if (durationMatch) {
                    baseValue = parseFloat(durationMatch[1]);
                    
                    // Ability durations scale with Ability Power
                    modifierType = "Ability Power";
                    const abilityPowerPercent = currentStats['Ability Power'] || 100;
                    const abilityPowerModifier = (abilityPowerPercent - 100) / 100;
                    
                    modifier = baseValue * abilityPowerModifier;
                    modifiedValue = baseValue + modifier;
                    displayFormat = "duration";
                }
            }
            // 6. Healing over time
            else if (stat.label.includes("Healing") && stat.value.includes("over")) {
                const healMatch = /(\d+(\.\d+)?)\s*over/.exec(stat.value);
                
                if (healMatch) {
                    baseValue = parseFloat(healMatch[1]);
                    
                    modifierType = "Ability Power";
                    const abilityPowerPercent = currentStats['Ability Power'] || 100;
                    const abilityPowerModifier = (abilityPowerPercent - 100) / 100;
                    
                    modifier = baseValue * abilityPowerModifier;
                    modifiedValue = baseValue + modifier;
                    displayFormat = "healing";
                }
            }
            // 7. Direct + splash damage format
            else if (stat.value.includes("direct") && stat.value.includes("splash")) {
                const directMatch = /(\d+(\.\d+)?)\s*direct/.exec(stat.value);
                const splashMatch = /(\d+(\.\d+)?)\s*splash/.exec(stat.value);
                
                if (directMatch && splashMatch) {
                    const directDamage = parseFloat(directMatch[1]);
                    const splashDamage = parseFloat(splashMatch[1]);
                    
                    baseValue = { direct: directDamage, splash: splashDamage };
                    displayFormat = "directSplash";
                    
                    modifierType = "Weapon Power";
                    const weaponPowerPercent = currentStats['Weapon Power'] || 100;
                    const weaponPowerModifier = (weaponPowerPercent - 100) / 100;
                    
                    modifier = {
                        direct: directDamage * weaponPowerModifier,
                        splash: splashDamage * weaponPowerModifier
                    };
                    
                    modifiedValue = {
                        direct: directDamage + modifier.direct,
                        splash: splashDamage + modifier.splash
                    };
                }
            }
            // 8. Damage per second
            else if (stat.value.includes("per second") && (stat.label.includes("Damage") || stat.label.includes("DPS"))) {
                const dpsMatch = /(\d+(\.\d+)?)\s*per second/.exec(stat.value);
                
                if (dpsMatch) {
                    baseValue = parseFloat(dpsMatch[1]);
                    
                    modifierType = "Weapon Power";
                    const weaponPowerPercent = currentStats['Weapon Power'] || 100;
                    const weaponPowerModifier = (weaponPowerPercent - 100) / 100;
                    
                    modifier = baseValue * weaponPowerModifier;
                    modifiedValue = baseValue + modifier;
                    displayFormat = "dps";
                }
            }
            // 9. Healing per second
            else if (stat.value.includes("per second") && stat.label.includes("Healing")) {
                const hpsMatch = /(\d+(\.\d+)?)\s*per second/.exec(stat.value);
                
                if (hpsMatch) {
                    baseValue = parseFloat(hpsMatch[1]);
                    
                    modifierType = "Ability Power";
                    const abilityPowerPercent = currentStats['Ability Power'] || 100;
                    const abilityPowerModifier = (abilityPowerPercent - 100) / 100;
                    
                    modifier = baseValue * abilityPowerModifier;
                    modifiedValue = baseValue + modifier;
                    displayFormat = "hps";
                }
            }
            // 10. Percentage-based stats (e.g. "+50%")
            else if (stat.value.includes("%")) {
                const percentMatch = /\+?(\d+(\.\d+)?)%/.exec(stat.value);
                
                if (percentMatch) {
                    baseValue = parseFloat(percentMatch[1]);
                    displayFormat = "percentage";
                    
                    // Determine which modifier applies
                    if (stat.label.includes("Healing") || (stat.value.includes("Healing") && stat.value.includes("Boost"))) {
                        modifierType = "Ability Power";
                        const abilityPowerPercent = currentStats['Ability Power'] || 100;
                        const abilityPowerModifier = (abilityPowerPercent - 100) / 100;
                        
                        modifier = baseValue * abilityPowerModifier;
                        modifiedValue = baseValue + modifier;
                    }
                    else if (stat.label.includes("Damage")) {
                        modifierType = "Weapon Power";
                        const weaponPowerPercent = currentStats['Weapon Power'] || 100;
                        const weaponPowerModifier = (weaponPowerPercent - 100) / 100;
                        
                        modifier = baseValue * weaponPowerModifier;
                        modifiedValue = baseValue + modifier;
                    }
                    else if (stat.label.includes("Speed")) {
                        modifierType = "Move Speed";
                        const moveSpeedPercent = currentStats['Move Speed'] || 100;
                        const moveSpeedModifier = (moveSpeedPercent - 100) / 100;
                        
                        modifier = baseValue * moveSpeedModifier;
                        modifiedValue = baseValue + modifier;
                    }
                    else {
                        // If we can't determine a specific type, don't modify
                        modifiedValue = baseValue;
                        modifier = 0;
                    }
                }
            }
            // 11. Simple damage values (e.g. "120")
            else if (stat.label.includes("Damage") && !stat.label.includes("Reduction")) {
                const damageMatch = /^(\d+(\.\d+)?)/.exec(stat.value);
                
                if (damageMatch) {
                    baseValue = parseFloat(damageMatch[1]);
                    
                    modifierType = "Weapon Power";
                    const weaponPowerPercent = currentStats['Weapon Power'] || 100;
                    const weaponPowerModifier = (weaponPowerPercent - 100) / 100;
                    
                    modifier = baseValue * weaponPowerModifier;
                    modifiedValue = baseValue + modifier;
                    displayFormat = "damage";
                }
            }
            // 12. Simple healing values (e.g. "70")
            else if (stat.label.includes("Healing")) {
                const healingMatch = /^(\d+(\.\d+)?)/.exec(stat.value);
                
                if (healingMatch) {
                    baseValue = parseFloat(healingMatch[1]);
                    
                    modifierType = "Ability Power";
                    const abilityPowerPercent = currentStats['Ability Power'] || 100;
                    const abilityPowerModifier = (abilityPowerPercent - 100) / 100;
                    
                    modifier = baseValue * abilityPowerModifier;
                    modifiedValue = baseValue + modifier;
                    displayFormat = "healing";
                }
            }
            // 13. Radius/Range values - these don't generally scale with stats
            else if (stat.label.includes("Radius") || stat.label.includes("Range") || stat.label.includes("Width")) {
                const radiusMatch = /(\d+(\.\d+)?)\s*meters?/.exec(stat.value);
                
                if (radiusMatch) {
                    baseValue = parseFloat(radiusMatch[1]);
                    modifiedValue = baseValue; // No modification by default
                    displayFormat = "radius";
                }
            }
            // 14. Simple numeric values at the start that don't match other patterns
            else {
                const numericMatch = /^(\d+(\.\d+)?)/.exec(stat.value);
                if (numericMatch) {
                    baseValue = parseFloat(numericMatch[1]);
                    modifiedValue = baseValue; // No modification by default
                    displayFormat = "numeric";
                }
            }
            
            // If we have a modifier type, track contributions from items
            if (modifierType && selectedItems && selectedItems.length > 0) {
                selectedItems.forEach(item => {
                    if (statModifiers[item.id] && statModifiers[item.id][modifierType]) {
                        const itemValue = statModifiers[item.id][modifierType];
                        
                        // Different contribution calculation based on format
                        let contribution = null;
                        
                        if (displayFormat === "pellet" && baseValue && typeof baseValue.pellet === 'number') {
                            const pelletContribution = baseValue.pellet * (itemValue / 100);
                            const totalContribution = baseValue.total * (itemValue / 100);
                            contribution = { pellet: pelletContribution, total: totalContribution };
                        }
                        else if (displayFormat === "range" && baseValue && typeof baseValue.min === 'number') {
                            const minContribution = baseValue.min * (itemValue / 100);
                            const maxContribution = baseValue.max * (itemValue / 100);
                            contribution = { min: minContribution, max: maxContribution };
                        }
                        else if (displayFormat === "directSplash" && baseValue && typeof baseValue.direct === 'number') {
                            const directContribution = baseValue.direct * (itemValue / 100);
                            const splashContribution = baseValue.splash * (itemValue / 100);
                            contribution = { direct: directContribution, splash: splashContribution };
                        }
                        else if (displayFormat === "cooldown" && typeof baseValue === 'number') {
                            // Negative for cooldown reduction
                            contribution = -(baseValue * (itemValue / 100));
                        }
                        // Add this to the contributors section in calculateModifiedAbilityStats

else if (displayFormat === "dot") {
    // Track contributions for both Weapon Power and Attack Speed
    if (modifierType.damage === stat.modifierType || modifierType.duration === stat.modifierType) {
        // Get base values
        const totalDamage = baseValue.total;
        const duration = baseValue.duration;
        
        if (modifierType === "Weapon Power") {
            // Weapon Power affects total damage
            const damageContribution = totalDamage * (itemValue / 100);
            
            contributors.push({
                name: item.name,
                value: itemValue,
                aspect: "damage",
                contribution: damageContribution
            });
        }
        else if (modifierType === "Attack Speed") {
            // Attack Speed affects duration
            const durationContribution = -(duration * (itemValue / 100));
            
            contributors.push({
                name: item.name,
                value: itemValue,
                aspect: "duration",
                contribution: durationContribution
            });
        }
    }
}
                        else if (typeof baseValue === 'number') {
                            // Simple contribution
                            contribution = baseValue * (itemValue / 100);
                        }
                        
                        if (contribution !== null) {
                            contributors.push({
                                name: item.name,
                                value: itemValue,
                                contribution: contribution
                            });
                        }
                    }
                });
            }
            
            // Add the stat to our results
            modifiedStats.push({
                label: stat.label,
                baseValue: baseValue,
                modifiedValue: modifiedValue,
                displayValue: stat.value, // Original display string
                modifier: modifier,
                modifierType: modifierType,
                contributors: contributors,
                displayFormat: displayFormat
            });
        });
        
        return modifiedStats;
    }
    
    // Generate the HTML for the modified ability stats
    function generateModifiedAbilityHTML(ability, currentStats, baseStats) {
        const modifiedStats = calculateModifiedAbilityStats(ability, currentStats, baseStats);
        
        // Generate HTML for each stat
        let statsHTML = '';
        
        // Track values for DPS calculation
        let damagePerShot = null;
        let fireRate = null;
        
        modifiedStats.forEach(stat => {
            // Track values for DPS calculation
            if (stat.label.includes("Damage") && !stat.label.includes("per second") && 
                !stat.label.includes("Reduction")) {
                
                if (stat.displayFormat === "pellet" && stat.modifiedValue && typeof stat.modifiedValue.total === 'number') {
                    damagePerShot = stat.modifiedValue.total;
                } else if (typeof stat.modifiedValue === 'number') {
                    damagePerShot = stat.modifiedValue;
                }
            }
            
            if (stat.label.includes("Fire Rate") || (stat.label.includes("Rate") && 
                stat.value.includes("per second"))) {
                
                if (typeof stat.modifiedValue === 'number') {
                    fireRate = stat.modifiedValue;
                }
            }
            
            // Skip stats that don't have parseable values
            if (stat.baseValue === null) {
                statsHTML += `
                    <div class="ability-stat">
                        <label>${stat.label}:</label>
                        <span>${stat.displayValue}</span>
                    </div>
                `;
                return;
            }
            
            // Color-code the stat based on type
            let valueClass = '';
            if (stat.label.includes("Damage")) {
                valueClass = 'stat-damage';
            } else if (stat.label.includes("Healing")) {
                valueClass = 'stat-healing';
            } else if (stat.label.includes("Cooldown")) {
                valueClass = 'stat-cooldown';
            } else if (stat.label.includes("Duration")) {
                valueClass = 'stat-ability';
            }
            
            // Format the display text based on stat type
            let displayText = '';
            let hasModification = false;
            let modifierHTML = '';
            
            try {
                // Different handling based on display format
                if (stat.displayFormat === "pellet" && stat.modifiedValue && typeof stat.modifiedValue.pellet === 'number') {
                    displayText = `${stat.modifiedValue.pellet.toFixed(1)} per pellet, ${stat.modifiedValue.count} pellets`;
                    
                    if (typeof stat.modifiedValue.total === 'number') {
                        displayText += ` (${stat.modifiedValue.total.toFixed(1)} total)`;
                    }
                    
                    if (stat.modifier && typeof stat.modifier.pellet === 'number' && Math.abs(stat.modifier.pellet) > 0.01) {
                        hasModification = true;
                        modifierHTML = `
                            <span class="modifier ${stat.modifier.pellet >= 0 ? 'positive' : 'negative'}">
                                (${stat.modifier.pellet > 0 ? '+' : ''}${stat.modifier.pellet.toFixed(1)} per pellet)
                            </span>`;
                    }
                }
                else if (stat.displayFormat === "dot" && stat.modifiedValue && 
                    typeof stat.modifiedValue.total === 'number' && 
                    typeof stat.modifiedValue.duration === 'number') {
               
               displayText = `${stat.modifiedValue.total.toFixed(1)} damage over ${stat.modifiedValue.duration.toFixed(1)}s (${stat.modifiedValue.dps.toFixed(1)} DPS)`;
               
               // Check for significant modifications
               if ((typeof stat.modifier.total === 'number' && Math.abs(stat.modifier.total) > 0.01) || 
                   (typeof stat.modifier.duration === 'number' && Math.abs(stat.modifier.duration) > 0.01)) {
                   
                   hasModification = true;
                   modifierHTML = `
                       <span class="modifier ${stat.modifier.total >= 0 ? 'positive' : 'negative'}">
                           (${stat.modifier.total > 0 ? '+' : ''}${stat.modifier.total.toFixed(1)} damage, 
                           ${stat.modifier.duration > 0 ? '+' : ''}${stat.modifier.duration.toFixed(1)}s duration)
                       </span>`;
               }
               
               // Create formula explanation
               formulaHTML = `
                   Base damage: ${stat.baseValue.total.toFixed(1)} × ${stat.modifierType.damage} (${currentStats[stat.modifierType.damage]}%) = ${stat.modifiedValue.total.toFixed(1)}<br>
                   Base duration: ${stat.baseValue.duration.toFixed(1)}s affected by ${stat.modifierType.duration} (${currentStats[stat.modifierType.duration]}%) = ${stat.modifiedValue.duration.toFixed(1)}s<br>
                   New DPS: ${stat.modifiedValue.dps.toFixed(1)} (${stat.modifier.dps > 0 ? '+' : ''}${stat.modifier.dps.toFixed(1)} DPS change)
               `;
           }
                else if (stat.displayFormat === "range" && stat.modifiedValue && 
                         typeof stat.modifiedValue.min === 'number' && typeof stat.modifiedValue.max === 'number') {
                    
                    displayText = `${stat.modifiedValue.min.toFixed(1)}-${stat.modifiedValue.max.toFixed(1)}`;
                    
                    // Add the rest of the original text after the range
                    const originalSuffix = stat.displayValue.split('-')[1].trim();
                    if (originalSuffix) {
                        const suffixStart = originalSuffix.indexOf(' ');
                        if (suffixStart > 0) {
                            displayText += ` ${originalSuffix.substring(suffixStart)}`;
                        }
                    }
                    
                    if (stat.modifier && typeof stat.modifier.min === 'number' && 
                        (Math.abs(stat.modifier.min) > 0.01 || Math.abs(stat.modifier.max) > 0.01)) {
                        
                        hasModification = true;
                        modifierHTML = `
                            <span class="modifier ${stat.modifier.min >= 0 ? 'positive' : 'negative'}">
                                (${stat.modifier.min > 0 ? '+' : ''}${stat.modifier.min.toFixed(1)} to ${stat.modifier.max > 0 ? '+' : ''}${stat.modifier.max.toFixed(1)})
                            </span>`;
                    }
                }
                else if (stat.displayFormat === "directSplash" && stat.modifiedValue && 
                         typeof stat.modifiedValue.direct === 'number' && typeof stat.modifiedValue.splash === 'number') {
                    
                    displayText = `${stat.modifiedValue.direct.toFixed(1)} direct, ${stat.modifiedValue.splash.toFixed(1)} splash`;
                    
                    if (stat.modifier && typeof stat.modifier.direct === 'number' && 
                        (Math.abs(stat.modifier.direct) > 0.01 || Math.abs(stat.modifier.splash) > 0.01)) {
                        
                        hasModification = true;
                        modifierHTML = `
                            <span class="modifier ${stat.modifier.direct >= 0 ? 'positive' : 'negative'}">
                                (${stat.modifier.direct > 0 ? '+' : ''}${stat.modifier.direct.toFixed(1)} direct, ${stat.modifier.splash > 0 ? '+' : ''}${stat.modifier.splash.toFixed(1)} splash)
                            </span>`;
                    }
                }
                else if (typeof stat.modifiedValue === 'number' && typeof stat.baseValue === 'number') {
                    // Handle simple numeric values
                    // Create a modified display by replacing the original number
                    const originalText = stat.displayValue;
                    displayText = originalText.replace(/\d+(\.\d+)?/, stat.modifiedValue.toFixed(1));
                    
                    // Add modifier display if there is a significant change
                    if (typeof stat.modifier === 'number' && Math.abs(stat.modifier) > 0.01) {
                        hasModification = true;
                        modifierHTML = `
                            <span class="modifier ${stat.modifier >= 0 ? 'positive' : 'negative'}">
                                (${stat.modifier > 0 ? '+' : ''}${stat.modifier.toFixed(1)})
                            </span>`;
                    }
                }
                else {
                    // Fallback to original display
                    displayText = stat.displayValue;
                }
            } catch (error) {
                // If any error occurs during formatting, just use the original value
                console.error(`Error formatting stat: ${stat.label}`, error);
                displayText = stat.displayValue;
            }
            
            // Create contributors HTML if we have any
            let contributorsHTML = '';
            if (hasModification && stat.contributors && stat.contributors.length > 0) {
                contributorsHTML = `
                    <div class="stat-contributors">
                        <div class="contributors-title">Contributions from:</div>
                `;
                
                stat.contributors.forEach(contributor => {
                    try {
                        // Different formatting based on contribution type
                        if (stat.displayFormat === "pellet" && typeof contributor.contribution === 'object') {
                            contributorsHTML += `
                                <div class="contributor">
                                    <span class="contributor-name">${contributor.name}:</span>
                                    <span class="contributor-value">${contributor.value > 0 ? '+' : ''}${contributor.value}%</span>
                                    <span class="contributor-result">(${contributor.contribution.pellet > 0 ? '+' : ''}${contributor.contribution.pellet.toFixed(1)} per pellet)</span>
                                </div>
                            `;
                        }
                        else if (stat.displayFormat === "range" && typeof contributor.contribution === 'object') {
                            contributorsHTML += `
                                <div class="contributor">
                                    <span class="contributor-name">${contributor.name}:</span>
                                    <span class="contributor-value">${contributor.value > 0 ? '+' : ''}${contributor.value}%</span>
                                    <span class="contributor-result">(${contributor.contribution.min > 0 ? '+' : ''}${contributor.contribution.min.toFixed(1)} to ${contributor.contribution.max > 0 ? '+' : ''}${contributor.contribution.max.toFixed(1)})</span>
                                </div>
                            `;
                        }
                        else if (stat.displayFormat === "directSplash" && typeof contributor.contribution === 'object') {
                            contributorsHTML += `
                                <div class="contributor">
                                    <span class="contributor-name">${contributor.name}:</span>
                                    <span class="contributor-value">${contributor.value > 0 ? '+' : ''}${contributor.value}%</span>
                                    <span class="contributor-result">(${contributor.contribution.direct > 0 ? '+' : ''}${contributor.contribution.direct.toFixed(1)} direct, ${contributor.contribution.splash > 0 ? '+' : ''}${contributor.contribution.splash.toFixed(1)} splash)</span>
                                </div>
                            `;
                        }
                        // Add this case to the contributorsHTML generation in generateModifiedAbilityHTML

else if (stat.displayFormat === "dot") {
    // Show different contributions based on aspect
    if (contributor.aspect === "damage") {
        contributorsHTML += `
            <div class="contributor">
                <span class="contributor-name">${contributor.name}:</span>
                <span class="contributor-value">${contributor.value > 0 ? '+' : ''}${contributor.value}% ${contributor.aspect}</span>
                <span class="contributor-result">(${contributor.contribution > 0 ? '+' : ''}${contributor.contribution.toFixed(1)} damage)</span>
            </div>
        `;
    } else {
        contributorsHTML += `
            <div class="contributor">
                <span class="contributor-name">${contributor.name}:</span>
                <span class="contributor-value">${contributor.value > 0 ? '+' : ''}${contributor.value}% ${contributor.aspect}</span>
                <span class="contributor-result">(${contributor.contribution > 0 ? '+' : ''}${contributor.contribution.toFixed(1)}s duration)</span>
            </div>
        `;
    }
}
                        else if (typeof contributor.contribution === 'number') {
                            contributorsHTML += `
                                <div class="contributor">
                                    <span class="contributor-name">${contributor.name}:</span>
                                    <span class="contributor-value">${contributor.value > 0 ? '+' : ''}${contributor.value}%</span>
                                    <span class="contributor-result">(${contributor.contribution > 0 ? '+' : ''}${contributor.contribution.toFixed(1)})</span>
                                </div>
                            `;
                        }
                    } catch (error) {
                        // Skip this contributor if there's an error
                        console.error(`Error formatting contributor: ${contributor.name}`, error);
                    }
                });
                
                contributorsHTML += `</div>`;
            }
            
            // Create formula explanation
            let formulaHTML = '';
            try {
                if (hasModification) {
                    if (stat.displayFormat === "pellet" && stat.baseValue && typeof stat.baseValue.pellet === 'number') {
                        formulaHTML = `Base damage per pellet (${stat.baseValue.pellet.toFixed(1)}) × ${stat.modifierType} modifier (${(currentStats[stat.modifierType] / 100).toFixed(2)}) = ${stat.modifiedValue.pellet.toFixed(1)} per pellet`;
                    }
                    else if (stat.displayFormat === "range" && stat.baseValue && typeof stat.baseValue.min === 'number') {
                        formulaHTML = `Base range (${stat.baseValue.min.toFixed(1)}-${stat.baseValue.max.toFixed(1)}) × ${stat.modifierType} modifier (${(currentStats[stat.modifierType] / 100).toFixed(2)})`;
                    }
                    else if (stat.displayFormat === "directSplash" && stat.baseValue && typeof stat.baseValue.direct === 'number') {
                        formulaHTML = `Base (${stat.baseValue.direct.toFixed(1)} direct, ${stat.baseValue.splash.toFixed(1)} splash) × ${stat.modifierType} modifier (${(currentStats[stat.modifierType] / 100).toFixed(2)})`;
                    }
                    else if (stat.displayFormat === "cooldown" && typeof stat.baseValue === 'number') {
                        formulaHTML = `Base cooldown (${stat.baseValue.toFixed(1)}s) × (1 - ${stat.modifierType} (${currentStats[stat.modifierType]}%)) = ${stat.modifiedValue.toFixed(1)}s`;
                    }
                    else if (typeof stat.baseValue === 'number') {
                        formulaHTML = `Base value (${stat.baseValue.toFixed(1)}) × ${stat.modifierType} modifier (${(currentStats[stat.modifierType] / 100).toFixed(2)}) = ${stat.modifiedValue.toFixed(1)}`;
                    }
                }
            } catch (error) {
                console.error(`Error generating formula for stat: ${stat.label}`, error);
                formulaHTML = `Modified by ${stat.modifierType} (${currentStats[stat.modifierType]}%)`;
            }
            
            // Generate the final HTML
            if (hasModification) {
                statsHTML += `
                    <div class="ability-stat expandable">
                        <label>${stat.label}:</label>
                        <div class="stat-value-container">
                            <span class="base-value ${valueClass}">${displayText}</span>
                            ${modifierHTML}
                            <button class="expand-btn" title="Show details">↓</button>
                            <div class="stat-details">
                                <div class="stat-formula">${formulaHTML}</div>
                                ${contributorsHTML}
                            </div>
                        </div>
                    </div>
                `;
            } else {
                // No modification, show simple stat
                statsHTML += `
                    <div class="ability-stat">
                        <label>${stat.label}:</label>
                        <span class="${valueClass}">${displayText}</span>
                    </div>
                `;
            }
        });
        
        // Add DPS calculation if we have both damage and fire rate
        if (damagePerShot !== null && fireRate !== null) {
            const dps = damagePerShot * fireRate;
            statsHTML += `
                <div class="ability-stat dps-calculation">
                    <label>Effective DPS:</label>
                    <span class="stat-damage">${dps.toFixed(1)}</span>
                    <span class="dps-formula">(${damagePerShot.toFixed(1)} damage × ${fireRate.toFixed(2)} shots/sec)</span>
                </div>
            `;
        }
        
        return statsHTML;
    }
    // Find the function that handles ability carousel rendering
function updatePersistentAbilityStats() {
    const abilityCarousel = document.getElementById('ability-carousel');
    if (!abilityCarousel || !selectedHero) return;
    
    abilityCarousel.innerHTML = '';
    
    // Get hero abilities
    const hero = heroes[selectedHero];
    
    // Loop through abilities and create slides
    hero.abilities.forEach((ability, index) => {
        // Create slide
        const slide = document.createElement('div');
        slide.className = `ability-slide ${index === 0 ? 'active' : ''}`;
        slide.setAttribute('data-index', index);
        
        // Get ability icon
        const abilityIconPath = getAbilityIconPath(hero.name, ability.name);
        
        // Generate enhanced stats HTML using our improved function
        const statsHTML = generateModifiedAbilityHTML(ability, currentHeroStats, heroBaseStats[selectedHero]);
        
        // Create slide content
        slide.innerHTML = `
            <div class="ability-header">
                <div class="ability-icon">
                    <img src="${abilityIconPath}" alt="${ability.name}" 
                        onerror="this.parentNode.innerHTML='${ability.name.charAt(0)}'"/>
                </div>
                <div class="ability-name">${ability.name}</div>
            </div>
            <div class="ability-description">${ability.description}</div>
            <div class="ability-stats">
                ${statsHTML}
            </div>
        `;
        
        abilityCarousel.appendChild(slide);
        
        // Also update indicator dots
        const indicator = document.getElementById('ability-indicator');
        if (indicator) {
            indicator.innerHTML = '';
            
            for (let i = 0; i < hero.abilities.length; i++) {
                const dot = document.createElement('div');
                dot.className = `indicator-dot ${i === 0 ? 'active' : ''}`;
                dot.setAttribute('data-index', i);
                dot.addEventListener('click', () => showAbilitySlide(i));
                indicator.appendChild(dot);
            }
        }
    });
    
    // Setup expandable stat details
    setupExpandableStats();
    initAbilityCarousel();
}
    
    // Function to update the Overview page 
    function updateOverviewPage() {
        const overviewPage = document.getElementById('overview-page');
        if (!overviewPage) return;
        
        const hero = heroes[selectedHero];
        if (!hero) return;
        
        // Get role-specific CSS class
        let roleBadgeClass = '';
        if (hero.role === 'Tank') {
            roleBadgeClass = 'tank-badge';
        } else if (hero.role === 'Damage') {
            roleBadgeClass = 'damage-badge';
        } else if (hero.role === 'Support') {
            roleBadgeClass = 'support-badge';
        }
        
        // Get hero icon path
        const heroImagePath = getHeroIconPath(hero.name);
        
        // Start building the overview content
        let overviewHTML = `
            <div class="overview-container">
                <div class="hero-profile">
                    <img src="${heroImagePath}" alt="${hero.name}" 
                        onerror="this.src='https://placehold.co/300x400/0088FF/FFFFFF?text=${hero.name}'" />
                    <h2>${hero.name}</h2>
                    <div class="role-badge ${roleBadgeClass}">${hero.role}</div>
                    
                    <!-- Stats Panel -->
                    <div id="hero-stats-panel" class="stats-panel">
                        <h3>Current Stats</h3>
                        <div class="stats-grid">
                            <!-- Stats will be dynamically updated here -->
                        </div>
                    </div>
                </div>
                
                <div class="hero-detail-wrapper">
                    <!-- Hero Abilities Section -->
                    <div class="hero-abilities">
                        <h3 class="section-title">
                            <i class="fas fa-fire"></i> Hero Abilities
                        </h3>
        `;
        
        // Add each ability with icons and modified stats
        hero.abilities.forEach(ability => {
            // Get ability icon
            const abilityIconPath = getAbilityIconPath(hero.name, ability.name);
            
            // Generate modified ability stats HTML
            const statsHTML = generateModifiedAbilityHTML(ability, currentHeroStats, heroBaseStats[selectedHero]);
            
            overviewHTML += `
                <div class="ability">
                    <div class="ability-header">
                        <div class="ability-icon">
                            <img src="${abilityIconPath}" alt="${ability.name}" 
                                onerror="this.parentNode.innerHTML='${ability.name.charAt(0)}'"/>
                        </div>
                        <div class="ability-name">${ability.name}</div>
                    </div>
                    <div class="ability-description">${ability.description}</div>
                    <div class="ability-stats">
                        ${statsHTML}
                    </div>
                </div>
            `;
        });
        
        // Close the hero abilities div and hero detail wrapper
        overviewHTML += `
                    </div>
                </div>
            </div>
        `;
        
        // Update the overview page content
        overviewPage.innerHTML = overviewHTML;
        
        // Update the stats display
        updateAllStats();
        
        // Set up expandable stats
        setupExpandableStats();
    }
    
    // Function to add event listeners to expandable stats
    function setupExpandableStats() {
        document.querySelectorAll('.ability-stat.expandable').forEach(statElement => {
            if (statElement.querySelector('.expand-btn')) {
                statElement.querySelector('.expand-btn').addEventListener('click', function(e) {
                    e.stopPropagation(); // Prevent the stat element click from triggering
                    statElement.classList.toggle('expanded');
                    
                    // Close other expanded stats
                    document.querySelectorAll('.ability-stat.expanded').forEach(stat => {
                        if (stat !== statElement) {
                            stat.classList.remove('expanded');
                        }
                    });
                });
            }
        });
    }
    
    // Function to apply color highlighting to power descriptions
    function colorizePowerDescription(description) {
        if (!description) return '';
        
        let coloredDesc = description;
        
        // Highlight ability names in brackets
        coloredDesc = coloredDesc.replace(/\[([^\]]+)\]/g, '[<span class="stat-ability">$1</span>]');
        
        // Highlight percentage values
        coloredDesc = coloredDesc.replace(/(\d+)%/g, '<span class="stat-cooldown">$1%</span>');
        
        // Highlight time values (seconds)
        coloredDesc = coloredDesc.replace(/(\d+\.?\d*)s/g, '<span class="stat-cooldown">$1s</span>');
        
        // Highlight distance values (meters)
        coloredDesc = coloredDesc.replace(/(\d+\.?\d*)m/g, '<span class="stat-cooldown">$1m</span>');
        
        // Highlight damage values
        coloredDesc = coloredDesc.replace(/(\d+\.?\d*)\s*damage/gi, '<span class="stat-damage">$1</span> damage');
        
        // Highlight healing values
        coloredDesc = coloredDesc.replace(/(\d+\.?\d*)\s*healing/gi, '<span class="stat-healing">$1</span> healing');
        coloredDesc = coloredDesc.replace(/heal\s*(\d+\.?\d*)/gi, 'heal <span class="stat-healing">$1</span>');
        
        return coloredDesc;
    }
    
    // Function to colorize item descriptions
    function colorizeDescription(description) {
        if (!description) return '';
        
        let coloredDesc = description;
        
        // Color Health values
        coloredDesc = coloredDesc.replace(/\+(\d+)\s*Health/g, '+<span class="stat-health">$1</span> Health');
        
        // Color Armor values
        coloredDesc = coloredDesc.replace(/\+(\d+)\s*Armor/g, '+<span class="stat-armor">$1</span> Armor');
        
        // Color Shield values
        coloredDesc = coloredDesc.replace(/\+(\d+)\s*Shield/g, '+<span class="stat-shield">$1</span> Shield');
        
        // Color Weapon Power values
        coloredDesc = coloredDesc.replace(/\+(\d+)%\s*Weapon Power/g, '+<span class="stat-weapon">$1%</span> Weapon Power');
        
        // Color Ability Power values
        coloredDesc = coloredDesc.replace(/\+(\d+)%\s*Ability Power/g, '+<span class="stat-ability">$1%</span> Ability Power');
        
        // Color Attack Speed values
        coloredDesc = coloredDesc.replace(/\+(\d+)%\s*Attack Speed/g, '+<span class="stat-weapon">$1%</span> Attack Speed');
        
        // Color Move Speed values
        coloredDesc = coloredDesc.replace(/\+(\d+)%\s*Move Speed/g, '+<span class="stat-survival">$1%</span> Move Speed');
        
        // Color Cooldown Reduction values
        coloredDesc = coloredDesc.replace(/\+(\d+)%\s*Cooldown Reduction/g, '+<span class="stat-cooldown">$1%</span> Cooldown Reduction');
        
        // Color Lifesteal values
        coloredDesc = coloredDesc.replace(/\+(\d+)%\s*Lifesteal/g, '+<span class="stat-health">$1%</span> Lifesteal');
        coloredDesc = coloredDesc.replace(/\+(\d+)%\s*Weapon Lifesteal/g, '+<span class="stat-weapon">$1%</span> Weapon Lifesteal');
        coloredDesc = coloredDesc.replace(/\+(\d+)%\s*Ability Lifesteal/g, '+<span class="stat-ability">$1%</span> Ability Lifesteal');
        
        // Color specific ability names (within brackets like [Rocket Hammer])
        coloredDesc = coloredDesc.replace(/\[([^\]]+)\]/g, '[<span class="stat-ability">$1</span>]');
        
        return coloredDesc;
    }
    
    // Create the item card with PNG image and error handling
    function createItemCard(item, category, isUniversal = false) {
        const itemId = isUniversal ? 'universal-' + item.name.toLowerCase().replace(/\s/g, '-') : item.name.toLowerCase().replace(/\s/g, '-');
        const iconFileName = getIconFileName(item.name);
        
        // Create colored description
        let coloredDescription = colorizeDescription(item.description);
        
        return `
            <div class="item-card" data-item="${itemId}" data-cost="${item.cost}" data-category="${category}" data-name="${item.name}" data-description="${encodeURIComponent(item.description)}">
                <div class="item-header">
                    <div class="item-icon">
                        <img src="images/icons/${iconFileName}" alt="${item.name}" onerror="handleImageError(this)" />
                    </div>
                    <div class="item-details">
                        <div class="item-name">${item.name}</div>
                        <div class="item-cost">${item.cost}</div>
                    </div>
                </div>
                <div class="item-description">${coloredDescription}</div>
            </div>
        `;
    }
    
    // Create power card with PNG image and error handling
    function createPowerCard(power) {
        const powerId = power.name.toLowerCase().replace(/\s/g, '-');
        const iconFileName = getPowerIconFileName(power.name);
        
        // Create colored description
        let coloredDescription = colorizePowerDescription(power.description);
        
        return `
            <div class="power-card" data-power="${powerId}" data-name="${power.name}">
                <div class="power-header">
                    <div class="power-icon">
                        <img src="images/icons/${iconFileName}" alt="${power.name}" onerror="handleImageError(this)" />
                    </div>
                    <div class="power-name">${power.name}</div>
                </div>
                <div class="power-description">${coloredDescription}</div>
            </div>
        `;
    }
    
    // Display hero details
    function displayHeroDetails(heroId) {
        // Ensure the persistent build summary exists before proceeding
        ensurePersistentBuildSummary();
        selectedHero = heroId;
        selectedPowers = [];
        selectedItems = [];
        
        const hero = heroes[heroId];
        if (!hero) return;
        
        // Reset stats
        resetStats();
        
        // Show hero builder container
        heroInfo.style.display = 'none';
        heroBuilder.style.display = 'block';
        
        // Generate Powers Page
        let powersHTML = `
            <h2 class="page-title">Powers Selection</h2>
            <p class="section-description">Powers are transformative modifiers that grant unique passives or entirely new abilities. Select up to 4 powers for your build.</p>
            <div class="powers-grid">
        `;
        
        hero.powers.forEach(power => {
            powersHTML += createPowerCard(power);
        });
        
        powersHTML += '</div>';
        powersPage.innerHTML = powersHTML;
        
        // Generate Hero Items Page
        let heroItemsHTML = `
            <h2 class="page-title">Hero-Specific Items</h2>
            <p class="section-description">Items designed specifically for ${hero.name}. Select up to 6 items total for your build.</p>
        `;
        
        ['weapon', 'ability', 'survival'].forEach(category => {
            const categoryTitleClass = `category-title-${category}`;
            heroItemsHTML += `
                <div class="item-category item-category-${category}">
                    <div class="category-title ${categoryTitleClass}">${category.charAt(0).toUpperCase() + category.slice(1)} Items</div>
                    <div class="items-grid">
            `;
            
            hero.items[category].forEach(item => {
                heroItemsHTML += createItemCard(item, category);
            });
            
            heroItemsHTML += `
                    </div>
                </div>
            `;
        });
        
        heroItemsPage.innerHTML = heroItemsHTML;
        
        // Generate Universal Items Page
        let universalItemsHTML = `
            <h2 class="page-title">Universal Items</h2>
            <p class="section-description">Items available to all heroes. Select up to 6 items total for your build.</p>
        `;
        
        ['weapon', 'ability', 'survival'].forEach(category => {
            const categoryTitleClass = `category-title-${category}`;
            universalItemsHTML += `
                <div class="item-category item-category-${category}">
                    <div class="category-title ${categoryTitleClass}">Universal ${category.charAt(0).toUpperCase() + category.slice(1)} Items</div>
                    <div class="items-grid">
            `;
            
            universalItems[category].forEach(item => {
                universalItemsHTML += createItemCard(item, category, true);
            });
            
            universalItemsHTML += `
                    </div>
                </div>
            `;
        });
        
        universalItemsPage.innerHTML = universalItemsHTML;
        updatePersistentBuildSummary();
        updatePersistentStats();
        
        // Setup event listeners for tabs, items and powers
        setupTabNavigation();
        setupSelectionListeners();
        
        // Initialize the stats display
        updateAllStats();
        updateStatsDisplay();
        
        // Set up image error handlers
        setupImageErrorHandlers();
        
        // Setup build management functionality
        setupBuildManagement();
        
        // Initialize ability statistics
        initAbilityCarousel();
        updateAbilityStats();
        
        // Trigger an event to notify that a hero has been selected
        document.dispatchEvent(new CustomEvent('heroSelected', { detail: { heroId: heroId } }));
    }
    
    // Set up selection listeners for powers and items
    function setupSelectionListeners() {
        // Power selection
        const powerCards = document.querySelectorAll('.power-card');
        powerCards.forEach(card => {
            card.addEventListener('click', () => {
                const powerId = card.dataset.power;
                const powerName = card.dataset.name;
                
                if (card.classList.contains('selected')) {
                    // Deselect
                    card.classList.remove('selected');
                    selectedPowers = selectedPowers.filter(power => power.id !== powerId);
                } else {
                    // Select if we haven't reached the limit
                    if (selectedPowers.length < 4) {
                        card.classList.add('selected');
                        selectedPowers.push({
                            id: powerId,
                            name: powerName
                        });
                    } else {
                        alert('You can only select up to 4 Powers.');
                    }
                }
                
                updateSelectionSummary();
            });
        });
        
        // Item selection
        const itemCards = document.querySelectorAll('.item-card');
        itemCards.forEach(card => {
            card.addEventListener('click', () => {
                const itemId = card.dataset.item;
                const itemName = card.dataset.name;
                const itemCost = parseInt(card.dataset.cost);
                const itemCategory = card.dataset.category;
                const itemDescription = decodeURIComponent(card.dataset.description || '');
                
                if (card.classList.contains('selected')) {
                    // Deselect
                    card.classList.remove('selected');
                    selectedItems = selectedItems.filter(item => item.id !== itemId);
                } else {
                    // Select if we haven't reached the limit
                    if (selectedItems.length < 6) {
                        card.classList.add('selected');
                        selectedItems.push({
                            id: itemId,
                            name: itemName,
                            cost: itemCost,
                            category: itemCategory,
                            description: itemDescription
                        });
                    } else {
                        alert('You can only select up to 6 Items.');
                    }
                }
                
                updateSelectionSummary();
                // Trigger stats update
                updateStatsFromItems();
            });
        });
        
        // Share build button
        shareBtn.addEventListener('click', shareBuild);
    }
    // Add to app.js - Enhanced ability statistics calculation
function updatePersistentAbilityStats() {
    const abilitiesList = document.getElementById('persistent-abilities-list');
    if (!abilitiesList || !selectedHero) return;
    
    abilitiesList.innerHTML = '';
    
    // Get hero abilities
    const hero = heroes[selectedHero];
    
    // Current stat modifiers
    const weaponPowerMod = (currentHeroStats['Weapon Power'] || 100) / 100;
    const abilityPowerMod = (currentHeroStats['Ability Power'] || 100) / 100;
    const attackSpeedMod = (currentHeroStats['Attack Speed'] || 100) / 100;
    const cooldownMod = 1 - ((currentHeroStats['Cooldown Reduction'] || 0) / 100);
    
    // Process each ability
    hero.abilities.forEach(ability => {
        const abilityEl = document.createElement('div');
        abilityEl.className = 'persistent-ability-item';
        
        // Ability header with icon
        const abilityIcon = getAbilityIconPath(hero.name, ability.name);
        
        let abilityHTML = `
            <div class="persistent-ability-header">
                <div class="persistent-ability-icon">
                    <img src="${abilityIcon}" alt="${ability.name}" onerror="this.src='images/ability-placeholder.png'">
                </div>
                <div class="persistent-ability-name">${ability.name}</div>
            </div>
            <div class="persistent-ability-stats">
        `;
        
        // Process ability stats
        let damagePerShot = 0;
        let attacksPerSecond = 0;
        let cooldownTime = 0;
        let hasDamageStats = false;
        let hasAttackSpeedStats = false;
        
        ability.stats.forEach(stat => {
            // Try to extract numeric values
            const numMatch = stat.value.match(/(\d+(\.\d+)?)/);
            
            if (numMatch) {
                const baseValue = parseFloat(numMatch[1]);
                let modifiedValue = baseValue;
                let modifier = 0;
                let isModified = false;
                
                // Apply modifiers based on stat type
                if (stat.label.includes('Damage')) {
                    modifiedValue = baseValue * weaponPowerMod;
                    modifier = modifiedValue - baseValue;
                    isModified = Math.abs(modifier) > 0.01;
                    
                    // Track for DPS calculation
                    if (stat.label.includes('per shot') || !stat.label.includes('per')) {
                        damagePerShot = modifiedValue;
                        hasDamageStats = true;
                    }
                } 
                else if (stat.label.includes('Healing')) {
                    modifiedValue = baseValue * abilityPowerMod;
                    modifier = modifiedValue - baseValue;
                    isModified = Math.abs(modifier) > 0.01;
                } 
                else if (stat.label.includes('Cooldown')) {
                    modifiedValue = baseValue * cooldownMod;
                    modifier = modifiedValue - baseValue;
                    isModified = Math.abs(modifier) > 0.01;
                    cooldownTime = modifiedValue;
                }
                else if (stat.label.includes('Fire Rate') || stat.label.includes('per second')) {
                    modifiedValue = baseValue * attackSpeedMod;
                    modifier = modifiedValue - baseValue;
                    isModified = Math.abs(modifier) > 0.01;
                    attacksPerSecond = modifiedValue;
                    hasAttackSpeedStats = true;
                }
                
                // Format values
                const formattedBase = baseValue.toFixed(1).replace(/\.0$/, '');
                const formattedMod = modifier.toFixed(1).replace(/\.0$/, '');
                const formattedValue = modifiedValue.toFixed(1).replace(/\.0$/, '');
                
                // Create stat HTML
                const statClass = isModified ? 'persistent-ability-stat modified' : 'persistent-ability-stat';
                const modifierHTML = isModified ? 
                    `<span class="stat-bonus ${modifier >= 0 ? 'positive' : 'negative'}">(${modifier >= 0 ? '+' : ''}${formattedMod})</span>` : '';
                
                abilityHTML += `
                    <div class="${statClass}">
                        <div class="ability-stat-label">${stat.label}</div>
                        <div class="ability-stat-value">
                            ${formattedValue} ${modifierHTML}
                        </div>
                    </div>
                `;
            } else {
                // Non-numeric stat
                abilityHTML += `
                    <div class="persistent-ability-stat">
                        <div class="ability-stat-label">${stat.label}</div>
                        <div class="ability-stat-value">${stat.value}</div>
                    </div>
                `;
            }
        });
        
        abilityHTML += `</div>`;
        
        // Add DPS calculation if we have both damage and attack speed
        if (hasDamageStats && hasAttackSpeedStats) {
            const dps = damagePerShot * attacksPerSecond;
            abilityHTML += `
                <div class="dps-calculation">
                    <span class="dps-label">Effective DPS:</span>
                    <span class="dps-value">${dps.toFixed(1)}</span>
                    <div class="dps-formula">${damagePerShot.toFixed(1)} damage × ${attacksPerSecond.toFixed(2)} attacks/sec</div>
                </div>
            `;
        }
        // Add time-to-kill calculation for ultimate abilities
        else if (ability.name.includes('Ultimate') && damagePerShot > 0) {
            // Assuming 200 HP target for calculation
            const targetHP = 200;
            const timeToKill = targetHP / damagePerShot;
            
            abilityHTML += `
                <div class="dps-calculation">
                    <span class="dps-label">Time to Kill (200 HP):</span>
                    <span class="dps-value">${timeToKill.toFixed(2)} seconds</span>
                </div>
            `;
        }
        
        abilityEl.innerHTML = abilityHTML;
        abilitiesList.appendChild(abilityEl);
    });
}

    
    // Update selection summary
    function updateSelectionSummary() {
        const powersCounter = document.getElementById('powers-counter');
        const itemsCounter = document.getElementById('items-counter');
        const totalCostDisplay = document.getElementById('total-cost');
        const selectedPowersList = document.getElementById('selected-powers-list');
        const selectedItemsList = document.getElementById('selected-items-list');
        
        // Update counters
        powersCounter.textContent = selectedPowers.length;
        itemsCounter.textContent = selectedItems.length;
        
        // Calculate total cost
        const totalCost = selectedItems.reduce((total, item) => total + item.cost, 0);
        totalCostDisplay.textContent = totalCost;
        
        // Update selected powers list with icons
        if (selectedPowers.length === 0) {
            selectedPowersList.innerHTML = '<div class="empty-selection">No powers selected yet</div>';
        } else {
            selectedPowersList.innerHTML = '';
            selectedPowers.forEach(power => {
                const iconFileName = getPowerIconFileName(power.name);
                const powerElement = document.createElement('div');
                powerElement.className = 'summary-item';
                powerElement.dataset.id = power.id;
                powerElement.innerHTML = `
                    <div class="summary-item-icon">
                        <img src="images/icons/${iconFileName}" alt="${power.name}" onerror="handleImageError(this)" />
                    </div>
                    ${power.name}
                    <span class="remove-btn" data-remove-power="${power.id}">✕</span>
                `;
                selectedPowersList.appendChild(powerElement);
            });
            
            // Add remove event listeners
            document.querySelectorAll('[data-remove-power]').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const powerId = btn.dataset.removePower;
                    removePower(powerId);
                });
            });
            updatePersistentBuildSummary();
            updatePersistentStats();
        }
        
        // Update selected items list with icons
        if (selectedItems.length === 0) {
            selectedItemsList.innerHTML = '<div class="empty-selection">No items selected yet</div>';
        } else {
            selectedItemsList.innerHTML = '';
            selectedItems.forEach(item => {
                const iconFileName = getIconFileName(item.name);
                const itemElement = document.createElement('div');
                itemElement.className = 'summary-item';
                itemElement.dataset.id = item.id;
                itemElement.innerHTML = `
                    <div class="summary-item-icon">
                        <img src="images/icons/${iconFileName}" alt="${item.name}" onerror="handleImageError(this)" />
                    </div>
                    ${item.name} (<span class="item-cost">${item.cost}</span>)
                    <span class="remove-btn" data-remove-item="${item.id}">✕</span>
                `;
                selectedItemsList.appendChild(itemElement);
            });
            
            // Add remove event listeners
            document.querySelectorAll('[data-remove-item]').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const itemId = btn.dataset.removeItem;
                    removeItem(itemId);
                });
            });
        }
        
        // Set up image error handlers for new images
        setupImageErrorHandlers();
        updateStatsFromItems();
    updateAbilityStats();
    updatePersistentBuildSummary();
    updatePersistentStats();
    updatePersistentAbilityStats();
    }
    function updatePersistentLists() {
        const persistentPowersList = document.getElementById('persistent-powers-list');
        const persistentItemsList = document.getElementById('persistent-items-list');
        
        if (persistentPowersList) {
            if (selectedPowers.length === 0) {
                persistentPowersList.innerHTML = '<div class="empty-selection">No powers selected</div>';
            } else {
                persistentPowersList.innerHTML = '';
                selectedPowers.forEach(power => {
                    const iconFileName = getPowerIconFileName(power.name);
                    const powerElement = document.createElement('div');
                    powerElement.className = 'persistent-power-item';
                    powerElement.dataset.id = power.id;
                    powerElement.innerHTML = `
                        <div class="persistent-power-icon">
                            <img src="images/icons/${iconFileName}" alt="${power.name}" onerror="handleImageError(this)" />
                        </div>
                        <span>${power.name}</span>
                        <div class="persistent-remove" data-remove-power="${power.id}">×</div>
                    `;
                    persistentPowersList.appendChild(powerElement);
                });
                
                // Add remove event listeners
                document.querySelectorAll('[data-remove-power]').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        const powerId = btn.dataset.removePower;
                        removePower(powerId);
                    });
                });
            }
        }
        
        if (persistentItemsList) {
            if (selectedItems.length === 0) {
                persistentItemsList.innerHTML = '<div class="empty-selection">No items selected</div>';
            } else {
                persistentItemsList.innerHTML = '';
                selectedItems.forEach(item => {
                    const iconFileName = getIconFileName(item.name);
                    const itemElement = document.createElement('div');
                    itemElement.className = 'persistent-item-item';
                    itemElement.dataset.id = item.id;
                    itemElement.innerHTML = `
                        <div class="persistent-item-icon">
                            <img src="images/icons/${iconFileName}" alt="${item.name}" onerror="handleImageError(this)" />
                        </div>
                        <span>${item.name}</span>
                        <span class="persistent-item-cost">${item.cost}</span>
                        <div class="persistent-remove" data-remove-item="${item.id}">×</div>
                    `;
                    persistentItemsList.appendChild(itemElement);
                });
                
                // Add remove event listeners
                document.querySelectorAll('[data-remove-item]').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        const itemId = btn.dataset.removeItem;
                        removeItem(itemId);
                    });
                });
            }
        }
    }
    function getStatColorClass(statName) {
        if (statName === 'Health') return 'stat-health';
        if (statName === 'Armor') return 'stat-armor';
        if (statName === 'Shield') return 'stat-shield';
        if (statName === 'Weapon Power' || statName === 'Weapon Lifesteal') return 'stat-weapon';
        if (statName === 'Ability Power' || statName === 'Ability Lifesteal') return 'stat-ability';
        if (statName === 'Move Speed') return 'stat-survival';
        if (statName === 'Cooldown Reduction') return 'stat-cooldown';
        return '';
    }    
    // Fix the order of operations to ensure elements exist before updating
function updatePersistentBuildSummary() {
    if (!selectedHero) return;
    ensurePersistentBuildSummary();
    
    const hero = heroes[selectedHero];
    
    // Update hero info first
    const persistentHeroName = document.getElementById('persistent-hero-name');
    const persistentHeroRole = document.getElementById('persistent-hero-role');
    const persistentHeroIcon = document.querySelector('.persistent-hero-icon');
    
    if (persistentHeroName) persistentHeroName.textContent = hero.name;
    if (persistentHeroRole) {
        persistentHeroRole.textContent = hero.role;
        persistentHeroRole.className = `persistent-hero-role ${hero.role}`;
    }
    if (persistentHeroIcon) {
        persistentHeroIcon.innerHTML = `<img src="${getHeroIconPath(hero.name)}" alt="${hero.name}" onerror="handleImageError(this)" />`;
    }
    
    // Make sure the counts are updated
    const persistentPowersCount = document.getElementById('persistent-powers-count');
    const persistentItemsCount = document.getElementById('persistent-items-count');
    const persistentTotalCost = document.getElementById('persistent-total-cost');
    
    if (persistentPowersCount) persistentPowersCount.textContent = selectedPowers.length;
    if (persistentItemsCount) persistentItemsCount.textContent = selectedItems.length;
    
    // Calculate total cost
    const totalCost = selectedItems.reduce((total, item) => total + item.cost, 0);
    if (persistentTotalCost) persistentTotalCost.textContent = totalCost;
    
    // Update powers and items lists
    updatePersistentLists();
    
    // Initialize the ability carousel only after ensuring the elements exist
    setTimeout(() => {
        initAbilityCarousel();
        updateAllStats();
    }, 50);
}
    
    // Remove power
    function removePower(powerId) {
        selectedPowers = selectedPowers.filter(power => power.id !== powerId);
        
        // Unselect the power card
        const powerCard = document.querySelector(`.power-card[data-power="${powerId}"]`);
        if (powerCard) {
            powerCard.classList.remove('selected');
        }
        
        updateSelectionSummary();
    }
    // Update function to match the HTML element IDs
// The updated persistent stats function that matches your HTML IDs
function updatePersistentStats() {
    if (!selectedHero) return;
    
    const hero = heroes[selectedHero];
    
    // Update health value
    const healthValue = currentHeroStats['Health'] || hero.health;
    const healthElement = document.getElementById('persistent-health');
    if (healthElement) {
        healthElement.textContent = healthValue;
    }
    
    // Update percentage-based stats with the correct IDs from your HTML
    const statMappings = [
        { stat: 'Weapon Power', valueId: 'weapon-power-value', baseValue: 100, maxValue: 200 },
        { stat: 'Ability Power', valueId: 'ability-power-value', baseValue: 100, maxValue: 200 },
        { stat: 'Attack Speed', valueId: 'attack-speed-value', baseValue: 100, maxValue: 200 },
        { stat: 'Cooldown Reduction', valueId: 'cooldown-value', baseValue: 0, maxValue: 50 },
        { stat: 'Max Ammo', valueId: 'max-ammo-value', baseValue: 100, maxValue: 200 },
        { stat: 'Weapon Lifesteal', valueId: 'weapon-lifesteal-value', baseValue: 0, maxValue: 50 },
        { stat: 'Ability Lifesteal', valueId: 'ability-lifesteal-value', baseValue: 0, maxValue: 50 },
        { stat: 'Move Speed', valueId: 'move-speed-value', baseValue: 100, maxValue: 150 },
        { stat: 'Reload Speed', valueId: 'reload-speed-value', baseValue: 0, maxValue: 50 },
        { stat: 'Melee Damage', valueId: 'melee-damage-value', baseValue: 0, maxValue: 50 },
        { stat: 'Critical Damage', valueId: 'critical-damage-value', baseValue: 0, maxValue: 50 }
    ];
    
    statMappings.forEach(mapping => {
        const currentValue = currentHeroStats[mapping.stat] || mapping.baseValue;
        const diff = currentValue - mapping.baseValue;
        
        // Update the value element
        const valueElement = document.getElementById(mapping.valueId);
        if (valueElement) {
            valueElement.textContent = diff !== 0 ? `${diff > 0 ? '+' : ''}${diff}%` : '0%';
        }
        
        // Update the bar width
        const barId = mapping.valueId.replace('-value', '-bar');
        const barElement = document.getElementById(barId);
        if (barElement) {
            // Calculate percentage (0-100%)
            const percentage = ((currentValue - mapping.baseValue) / (mapping.maxValue - mapping.baseValue)) * 100;
            const clampedPercentage = Math.min(100, Math.max(0, percentage)); // Clamp between 0-100
            barElement.style.width = `${clampedPercentage}%`;
        }
    });
    
    // Update health bar segments
    updateHealthBarSegments(healthValue);
}
// Function to update the health bar segments
// Improved health bar segments function
function updateHealthBarSegments(healthValue) {
    const lifeBarContainer = document.getElementById('life-bar-container');
    if (!lifeBarContainer) return;
    
    // Clear existing segments
    lifeBarContainer.innerHTML = '';
    
    // Create 10 segments
    const segmentsTotal = 10;
    const maxHealth = 500; // Base value for 100% width
    const healthPerSegment = maxHealth / segmentsTotal;
    
    for (let i = 0; i < segmentsTotal; i++) {
        const segment = document.createElement('div');
        segment.className = 'life-segment';
        
        // Fill segments based on current health
        if (i * healthPerSegment < healthValue) {
            segment.classList.add('life-filled');
        } else {
            segment.classList.add('life-empty');
        }
        
        lifeBarContainer.appendChild(segment);
    }
}
    // Function to initialize ability carousel
    function initAbilityCarousel() {
        if (!selectedHero) return;
        
        // Add a small delay to ensure DOM elements exist
    setTimeout(() => {
        const hero = heroes[selectedHero];
        const carousel = document.getElementById('ability-carousel');
        const indicator = document.getElementById('ability-indicator');
        
        if (!carousel || !indicator) return;
        
        
        
        // Clear existing content
        carousel.innerHTML = '';
        indicator.innerHTML = '';
        
        // Add slides for each ability
        hero.abilities.forEach((ability, index) => {
            // Create slide
            const slide = document.createElement('div');
            slide.className = `ability-slide ${index === 0 ? 'active' : ''}`;
            slide.setAttribute('data-index', index);
            
            // Get ability icon
            const abilityIconPath = getAbilityIconPath(hero.name, ability.name);
            
            // Generate enhanced stats HTML using our improved function
            try {
                const statsHTML = generateModifiedAbilityHTML(ability, currentHeroStats, heroBaseStats[selectedHero]);
                
                // Create slide content
                slide.innerHTML = `
                    <div class="ability-header">
                        <div class="ability-icon">
                            <img src="${abilityIconPath}" alt="${ability.name}" 
                                onerror="this.parentNode.innerHTML='${ability.name.charAt(0)}'"/>
                        </div>
                        <div class="ability-name">${ability.name}</div>
                    </div>
                    <div class="ability-description">${ability.description}</div>
                    <div class="ability-stats">
                        ${statsHTML}
                    </div>
                `;
            } catch (error) {
                console.error(`Error generating ability stats for ${ability.name}:`, error);
                
                // Fallback to simple display without stats calculation
                slide.innerHTML = `
                    <div class="ability-header">
                        <div class="ability-icon">
                            <img src="${abilityIconPath}" alt="${ability.name}" 
                                onerror="this.parentNode.innerHTML='${ability.name.charAt(0)}'"/>
                        </div>
                        <div class="ability-name">${ability.name}</div>
                    </div>
                    <div class="ability-description">${ability.description}</div>
                    <div class="ability-stats">
                        ${ability.stats.map(stat => `
                            <div class="ability-stat">
                                <label>${stat.label}:</label>
                                <span>${stat.value}</span>
                            </div>
                        `).join('')}
                    </div>
                `;
            }
            
            carousel.appendChild(slide);
            
            // Create indicator dot
            const dot = document.createElement('div');
            dot.className = `indicator-dot ${index === 0 ? 'active' : ''}`;
            dot.setAttribute('data-index', index);
            indicator.appendChild(dot);
        });
        
        // Set up navigation
        document.getElementById('prev-ability')?.addEventListener('click', () => {
            navigateAbility('prev');
        });
        
        document.getElementById('next-ability')?.addEventListener('click', () => {
            navigateAbility('next');
        });
        
        // Add click handler for indicator dots
        document.querySelectorAll('.indicator-dot').forEach(dot => {
            dot.addEventListener('click', () => {
                const index = parseInt(dot.getAttribute('data-index'));
                showAbilitySlide(index);
            });
        });
        
        // Setup expandable stats after they're added to DOM
        setTimeout(() => {
            setupExpandableStats();
        }, 100);
        // Rest of your carousel initialization code...
    }, 100);
    }
    

    function navigateAbility(direction) {
        const slides = document.querySelectorAll('.ability-slide');
        if (!slides.length) return;
        
        const currentSlide = document.querySelector('.ability-slide.active');
        if (!currentSlide) return;
        
        // Get current index
        let currentIndex = parseInt(currentSlide.getAttribute('data-index'));
        
        // Calculate next index
        let nextIndex;
        if (direction === 'next') {
            nextIndex = (currentIndex + 1) % slides.length;
        } else {
            nextIndex = (currentIndex - 1 + slides.length) % slides.length;
        }
        
        // Show the next slide
        showAbilitySlide(nextIndex);
    }
    
    function showAbilitySlide(index) {
        const slides = document.querySelectorAll('.ability-slide');
        const dots = document.querySelectorAll('.indicator-dot');
        
        // Make sure index is valid
        if (index < 0 || index >= slides.length) {
            console.error(`Invalid slide index: ${index}`);
            return;
        }
        
        // Update slides
        slides.forEach(slide => {
            slide.classList.remove('active');
        });
        slides[index].classList.add('active');
        
        // Update indicators
        dots.forEach(dot => {
            dot.classList.remove('active');
        });
        dots[index].classList.add('active');
    }

// Function to show a specific ability slide
function showAbilitySlide(index) {
    const slides = document.querySelectorAll('.ability-slide');
    const dots = document.querySelectorAll('.indicator-dot');
    
    // Validate index
    if (index < 0 || index >= slides.length) {
        console.error(`Invalid slide index: ${index}`);
        return;
    }
    
    // Update slides
    slides.forEach((slide, i) => {
        if (i === index) {
            slide.classList.add('active');
        } else {
            slide.classList.remove('active');
        }
    });
    
    // Update indicators
    dots.forEach((dot, i) => {
        if (i === index) {
            dot.classList.add('active');
        } else {
            dot.classList.remove('active');
        }
    });
    
    // Log the ACTUAL index we're showing, not some string
    console.log(`Showing slide ${index}`);
}
    // Remove item
    function removeItem(itemId) {
        selectedItems = selectedItems.filter(item => item.id !== itemId);
        
        // Unselect the item card
        const itemCard = document.querySelector(`.item-card[data-item="${itemId}"]`);
        if (itemCard) {
            itemCard.classList.remove('selected');
        }
        
        updateSelectionSummary();
        updateStatsFromItems();
    }

    // Function to show toast notification
    // Update showToast function
function showToast(message, type = 'success') {
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toast-message');
    
    // Set message and type
    toastMessage.textContent = message;
    toast.className = 'toast'; // Reset classes
    toast.classList.add(`toast-${type}`);
    
    // Update icon
    const icon = toast.querySelector('i');
    if (icon) {
        if (type === 'success') {
            icon.className = 'fas fa-check-circle';
        } else if (type === 'error') {
            icon.className = 'fas fa-exclamation-circle';
        } else if (type === 'info') {
            icon.className = 'fas fa-info-circle';
        }
    }
    
    // Show toast
    toast.classList.add('show');
    
    // Auto hide after 3 seconds
    setTimeout(() => {
        toast.classList.remove('show');
    }, 3000);
}
    
    // Function to save current build
    function saveCurrentBuild() {
        if (!selectedHero || (selectedPowers.length === 0 && selectedItems.length === 0)) {
            showToast('Please select a hero and at least one Power or Item to save a build.', 'error');
            return;
        }
        
        // Prompt for build name
        const buildName = prompt('Enter a name for your build:', `${heroes[selectedHero].name} Build`);
        
        if (!buildName) return; // User cancelled
        
        // Create build object
        const build = {
            id: Date.now().toString(),
            name: buildName,
            hero: selectedHero,
            powers: selectedPowers,
            items: selectedItems,
            stats: { ...currentHeroStats },
            date: new Date().toISOString()
        };
        
        // Get existing builds from localStorage
        let savedBuilds = JSON.parse(localStorage.getItem('stadiumBuilds') || '[]');
        
        // Add new build
        savedBuilds.push(build);
        postBuildToDiscord(build);
        // Save back to localStorage
        localStorage.setItem('stadiumBuilds', JSON.stringify(savedBuilds));
        
        // Show success message
        showToast(`Build "${buildName}" saved successfully!`);
        
        // Update saved builds panel if open
        if (document.getElementById('saved-builds-panel').style.display === 'block') {
            loadSavedBuilds();
        }
    }
    
    // Function to load saved builds
    function loadSavedBuilds() {
        const savedBuildsList = document.getElementById('saved-builds-list');
        const savedBuildsPanel = document.getElementById('saved-builds-panel');
        
        // Get saved builds from localStorage
        const savedBuilds = JSON.parse(localStorage.getItem('stadiumBuilds') || '[]');
        
        // Clear existing list
        savedBuildsList.innerHTML = '';
        
        if (savedBuilds.length === 0) {
            savedBuildsList.innerHTML = '<div class="empty-selection">No saved builds yet</div>';
            return;
        }
        
        // Sort builds by date (newest first)
        savedBuilds.sort((a, b) => new Date(b.date) - new Date(a.date));
        
        // Add each build to the list
        savedBuilds.forEach(build => {
            const hero = heroes[build.hero];
            if (!hero) return; // Skip if hero not found
            
            // Get role-specific class
            let roleClass = '';
            if (hero.role === 'Tank') {
                roleClass = 'tank-badge';
            } else if (hero.role === 'Damage') {
                roleClass = 'damage-badge';
            } else if (hero.role === 'Support') {
                roleClass = 'support-badge';
            }
            
            // Calculate total cost
            const totalCost = build.items.reduce((total, item) => total + item.cost, 0);
            
            // Create build element
            const buildElement = document.createElement('div');
            buildElement.className = 'saved-build-item';
            buildElement.dataset.buildId = build.id;
            
            buildElement.innerHTML = `
                <div class="saved-build-header">
                    <div class="saved-build-hero">
                        <div class="saved-build-hero-icon">
                            <img src="${getHeroIconPath(hero.name)}" alt="${hero.name}" 
                                onerror="this.src='https://placehold.co/32x32/0088FF/FFFFFF?text=${hero.name.charAt(0)}'" />
                        </div>
                        <div>
                            <div class="saved-build-name">${build.name}</div>
                            <div class="saved-build-role">${hero.role}</div>
                        </div>
                    </div>
                    <div class="saved-build-actions">
                        <button class="saved-build-delete" title="Delete build" data-build-id="${build.id}">
                            <i class="fas fa-trash"></i>
                        </button>
                        <button class="saved-build-load" title="Load build" data-build-id="${build.id}">
                            <i class="fas fa-download"></i>
                        </button>
                    </div>
                </div>
                <div class="saved-build-stats">
                    <div class="saved-build-stat">
                        <i class="fas fa-bolt"></i> ${build.powers.length}
                    </div>
                    <div class="saved-build-stat">
                        <i class="fas fa-shopping-cart"></i> ${build.items.length}
                    </div>
                </div>
                <div class="saved-build-cost">
                    Total: <span class="item-cost">${totalCost}</span>
                </div>
            `;
            
            savedBuildsList.appendChild(buildElement);
        });
        
        // Add event listeners
        document.querySelectorAll('.saved-build-delete').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const buildId = btn.dataset.buildId;
                deleteSavedBuild(buildId);
            });
        });
        
        document.querySelectorAll('.saved-build-load').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const buildId = btn.dataset.buildId;
                loadBuild(buildId);
            });
        });
        
        // Make entire item clickable to load build
        document.querySelectorAll('.saved-build-item').forEach(item => {
            item.addEventListener('click', () => {
                const buildId = item.dataset.buildId;
                loadBuild(buildId);
            });
        });
        
        // Show the panel
        savedBuildsPanel.style.display = 'block';
    }
    
    // Function to delete a saved build
    function deleteSavedBuild(buildId) {
        // Confirm deletion
        if (!confirm('Are you sure you want to delete this build?')) {
            return;
        }
        
        // Get saved builds
        let savedBuilds = JSON.parse(localStorage.getItem('stadiumBuilds') || '[]');
        
        // Find build name before removing
        const buildToDelete = savedBuilds.find(build => build.id === buildId);
        const buildName = buildToDelete ? buildToDelete.name : 'Build';
        
        // Remove build
        savedBuilds = savedBuilds.filter(build => build.id !== buildId);
        
        // Save back to localStorage
        localStorage.setItem('stadiumBuilds', JSON.stringify(savedBuilds));
        
        // Show success message
        showToast(`"${buildName}" deleted successfully!`);
        
        // Reload the list
        loadSavedBuilds();
    }
    
    // Function to load a build
    function loadBuild(buildId) {
        // Get saved builds
        const savedBuilds = JSON.parse(localStorage.getItem('stadiumBuilds') || '[]');
        
        // Find the build
        const build = savedBuilds.find(build => build.id === buildId);
        
        if (!build) {
            showToast('Build not found!', 'error');
            return;
        }
        
        // Reset current selections
        selectedPowers = [];
        selectedItems = [];
        
        // Select the hero
        document.querySelectorAll('.hero-card').forEach(card => {
            if (card.dataset.hero === build.hero) {
                card.click();
            }
        });
        
        // Need to wait a bit for hero data to load
        setTimeout(() => {
            // Select powers
            build.powers.forEach(power => {
                const powerCard = document.querySelector(`.power-card[data-power="${power.id}"]`);
                if (powerCard && !powerCard.classList.contains('selected')) {
                    powerCard.click();
                }
            });
            
            // Select items
            build.items.forEach(item => {
                const itemCard = document.querySelector(`.item-card[data-item="${item.id}"]`);
                if (itemCard && !itemCard.classList.contains('selected')) {
                    itemCard.click();
                }
            });
            
            // Show success message
            showToast(`Build "${build.name}" loaded successfully!`);
            
            // Hide saved builds panel
            document.getElementById('saved-builds-panel').style.display = 'none';
        }, 100);
    }
    
    // Function to export build as text
    function exportBuildAsText() {
        if (!selectedHero || (selectedPowers.length === 0 && selectedItems.length === 0)) {
            showToast('Please select a hero and at least one Power or Item to share a build.', 'error');
            return null;
        }
        
        const hero = heroes[selectedHero];
        
        // Calculate total cost
        const totalCost = selectedItems.reduce((total, item) => total + item.cost, 0);
        
        // Create JSON representation of build
        const buildData = {
            version: '1.0',
            hero: selectedHero,
            powers: selectedPowers,
            items: selectedItems
        };
        
        // Encode as base64 to make it more compact
        const buildCode = btoa(JSON.stringify(buildData));
        
        // Create human-readable summary
        let buildText = `STADITECH BUILDER - ${hero.name} Build\n`;
        buildText += `========================================\n`;
        buildText += `Hero: ${hero.name} (${hero.role})\n`;
        buildText += `Total Cost: ${totalCost} Stadium Cash\n\n`;
        
        if (selectedPowers.length > 0) {
            buildText += `POWERS:\n`;
            selectedPowers.forEach(power => {
                buildText += `- ${power.name}\n`;
            });
            buildText += `\n`;
        }
        
        if (selectedItems.length > 0) {
            buildText += `ITEMS:\n`;
            selectedItems.forEach(item => {
                buildText += `- ${item.name} (${item.cost})\n`;
            });
            buildText += `\n`;
        }
        
        buildText += `========================================\n`;
        buildText += `Import code: ${buildCode}\n`;
        buildText += `Created with Staditech Builder`;
        
        return buildText;
    }
    
    // Function to share build
    function shareBuild() {
        if (!selectedHero) {
            showToast('Please select a hero first.', 'error');
            return;
        }
        
        if (selectedPowers.length === 0 && selectedItems.length === 0) {
            showToast('Please select at least one Power or Item for your build.', 'error');
            return;
        }
        
        const hero = heroes[selectedHero];
        
        // Calculate total cost
        const totalCost = selectedItems.reduce((total, item) => total + item.cost, 0);
        
        // Get role-specific class
        let roleClass = '';
        if (hero.role === 'Tank') {
            roleClass = 'build-tank';
        } else if (hero.role === 'Damage') {
            roleClass = 'build-damage';
        } else if (hero.role === 'Support') {
            roleClass = 'build-support';
        }
        
        // Export as text for copying
        const buildText = exportBuildAsText();
        if (!buildText) return;
        
        // Update the hidden textarea for copying
        const buildCodeText = document.getElementById('build-code-text');
        buildCodeText.value = buildText;
        
        // Hero image path
        const heroImagePath = getHeroIconPath(hero.name);
        
        // Create enhanced build code HTML
        let buildCodeHTML = `
            <div class="build-header">
                <div class="build-hero-icon">
                    <img src="${heroImagePath}" alt="${hero.name}" 
                        onerror="this.src='https://placehold.co/64x64/0088FF/FFFFFF?text=${hero.name.charAt(0)}'" />
                </div>
                <div class="build-hero-info">
                    <h3>${hero.name} Stadium Build</h3>
                    <div class="build-hero-role ${roleClass}">${hero.role}</div>
                </div>
            </div>
            
            <div class="build-stats-grid">
        `;
        
        // Display health, armor, shield stats
        const healthValue = currentHeroStats['Health'] || hero.health;
        const armorValue = currentHeroStats['Armor'] || hero.armor;
        const shieldValue = currentHeroStats['Shield'] || hero.shield;
        
        const healthDiff = healthValue - hero.health;
        const armorDiff = armorValue - hero.armor;
        const shieldDiff = shieldValue - hero.shield;
        
        buildCodeHTML += `
            <div class="build-stat-item">
                <span class="stat-label">Health:</span>
                <span class="stat-value stat-health">${healthValue}${healthDiff !== 0 ? 
                    `<span class="stat-bonus">(${healthDiff > 0 ? '+' : ''}${healthDiff})</span>` : ''}
                </span>
            </div>
        `;
        
        if (hero.armor > 0 || armorValue > 0) {
            buildCodeHTML += `
                <div class="build-stat-item">
                    <span class="stat-label">Armor:</span>
                    <span class="stat-value stat-armor">${armorValue}${armorDiff !== 0 ? 
                        `<span class="stat-bonus">(${armorDiff > 0 ? '+' : ''}${armorDiff})</span>` : ''}
                    </span>
                </div>
            `;
        }
        
        if (hero.shield > 0 || shieldValue > 0) {
            buildCodeHTML += `
                <div class="build-stat-item">
                    <span class="stat-label">Shield:</span>
                    <span class="stat-value stat-shield">${shieldValue}${shieldDiff !== 0 ? 
                        `<span class="stat-bonus">(${shieldDiff > 0 ? '+' : ''}${shieldDiff})</span>` : ''}
                    </span>
                </div>
            `;
        }
        
        // Display percentage-based stats that have been modified
        const displayPercentageStats = [
            { name: 'Weapon Power', styleClass: 'stat-weapon' },
            { name: 'Ability Power', styleClass: 'stat-ability' },
            { name: 'Attack Speed', styleClass: 'stat-weapon' },
            { name: 'Move Speed', styleClass: 'stat-survival' },
            { name: 'Cooldown Reduction', styleClass: 'stat-cooldown' },
            { name: 'Weapon Lifesteal', styleClass: 'stat-weapon' },
            { name: 'Ability Lifesteal', styleClass: 'stat-ability' }
        ];
                // Generate build URL for sharing
        const buildData = {
            hero: selectedHero,
            powers: selectedPowers.map(p => p.id),
            items: selectedItems.map(i => i.id)
        };
        const encodedData = btoa(JSON.stringify(buildData));
        const shareURL = `${window.location.origin}${window.location.pathname}?build=${encodedData}`;
        
        postToDiscord(shareURL);
        
        displayPercentageStats.forEach(stat => {
            const baseValue = heroBaseStats[selectedHero][stat.name] || 0;
            const currentValue = currentHeroStats[stat.name] || baseValue;
            const diff = currentValue - baseValue;
            
            if (diff !== 0) {
                buildCodeHTML += `
                    <div class="build-stat-item">
                        <span class="stat-label">${stat.name}:</span>
                        <span class="stat-value ${stat.styleClass}">${currentValue}%
                            <span class="stat-bonus">(${diff > 0 ? '+' : ''}${diff}%)</span>
                        </span>
                    </div>
                `;
            }
        });
        
        buildCodeHTML += `</div>`;
        
        // Add selections section
        buildCodeHTML += `<div class="build-selections">`;
        
        // Powers section
        if (selectedPowers.length > 0) {
            buildCodeHTML += `
                <div class="build-section">
                    <h4>Powers</h4>
                    <div class="build-powers-list">
            `;
            
            selectedPowers.forEach(power => {
                const iconFileName = getPowerIconFileName(power.name);
                buildCodeHTML += `
                    <div class="build-power-item">
                        <div class="summary-item-icon">
                            <img src="images/icons/${iconFileName}" alt="${power.name}" onerror="handleImageError(this)" />
                        </div>
                        <span>${power.name}</span>
                    </div>
                `;
            });
            
            buildCodeHTML += `
                    </div>
                </div>
            `;
        }
        
        // Items section
        if (selectedItems.length > 0) {
            buildCodeHTML += `
                <div class="build-section">
                    <h4>Items</h4>
                    <div class="build-items-list">
            `;
            
            selectedItems.forEach(item => {
                const iconFileName = getIconFileName(item.name);
                buildCodeHTML += `
                    <div class="build-item-item">
                        <div class="summary-item-icon">
                            <img src="images/icons/${iconFileName}" alt="${item.name}" onerror="handleImageError(this)" />
                        </div>
                        <span>${item.name}</span>
                        <span class="item-cost">${item.cost}</span>
                    </div>
                `;
            });
            
            buildCodeHTML += `
                    </div>
                </div>
            `;
        }
        
        buildCodeHTML += `</div>`;
        
        buildCodeHTML += `
        <div class="build-footer">
            <div class="build-total-cost">
                Total Cost: <span class="item-cost">${totalCost}</span> Stadium Cash
            </div>
            <div class="build-buttons">
                <button class="copy-build-btn" id="copy-build-btn">
                    <i class="fas fa-copy"></i> Copy Build Text
                </button>
                <button class="share-url-btn" id="share-url-btn">
                    <i class="fas fa-link"></i> Share URL
                </button>
                <button class="save-build-btn" id="save-build-btn">
                    <i class="fas fa-save"></i> Save Build
                </button>
            </div>
        </div>
    `;
    
    // Update the build code display
    const buildCodeDisplay = document.getElementById('build-code');
    buildCodeDisplay.innerHTML = buildCodeHTML;
    buildCodeDisplay.style.display = 'block';
    
    // Add event listeners to the new buttons
    document.getElementById('copy-build-btn').addEventListener('click', copyBuildToClipboard);
    document.getElementById('save-build-btn').addEventListener('click', saveCurrentBuild);
    document.getElementById('share-url-btn').addEventListener('click', shareBuildViaURL);
    
    // Set up image error handlers for new images
    setupImageErrorHandlers();
    
    // Scroll to build code
    buildCodeDisplay.scrollIntoView({ behavior: 'smooth' });
}
    // Function to copy build to clipboard
    function copyBuildToClipboard() {
        const buildCodeText = document.getElementById('build-code-text');
        
        // Select the text
        buildCodeText.select();
        buildCodeText.setSelectionRange(0, 99999); // For mobile devices
        
        // Copy to clipboard
        navigator.clipboard.writeText(buildCodeText.value)
            .then(() => {
                showToast('Build copied to clipboard!');
            })
            .catch(err => {
                console.error('Failed to copy build: ', err);
                showToast('Failed to copy build.', 'error');
            });
    }
    
    // Function to import build from text
    function importBuild() {
        const importText = document.getElementById('import-textarea').value.trim();
        
        if (!importText) {
            showToast('Please enter a build code to import.', 'error');
            return;
        }
        
        try {
            // Find the import code in the text
            const codeRegex = /Import code: ([A-Za-z0-9+/=]+)/;
            const codeMatch = importText.match(codeRegex);
            
            let buildCode;
            if (codeMatch && codeMatch[1]) {
                // Code found in formatted text
                buildCode = codeMatch[1];
            } else {
                // Try to use the whole text as a code
                buildCode = importText;
            }
            
            // Decode the build
            const buildData = JSON.parse(atob(buildCode));
            
            // Verify version and required fields
            if (!buildData.version || !buildData.hero || !buildData.powers || !buildData.items) {
                throw new Error('Invalid build format');
            }
            
            // Reset current selections
            selectedPowers = [];
            selectedItems = [];
            
            // Select the hero
            document.querySelectorAll('.hero-card').forEach(card => {
                if (card.dataset.hero === buildData.hero) {
                    card.click();
                }
            });
            
            // Need to wait a bit for hero data to load
            setTimeout(() => {
                // Select powers
                buildData.powers.forEach(power => {
                    const powerCard = document.querySelector(`.power-card[data-power="${power.id}"]`);
                    if (powerCard && !powerCard.classList.contains('selected')) {
                        powerCard.click();
                    }
                });
                
                // Select items
                buildData.items.forEach(item => {
                    const itemCard = document.querySelector(`.item-card[data-item="${item.id}"]`);
                    if (itemCard && !itemCard.classList.contains('selected')) {
                        itemCard.click();
                    }
                });
                
                // Show success message
                showToast('Build imported successfully!');
                
                // Close import modal
                document.getElementById('import-modal').style.display = 'none';
                
                // Clear textarea
                document.getElementById('import-textarea').value = '';
            }, 100);
        } catch (error) {
            console.error('Failed to import build: ', error);
            showToast('Failed to import build. Invalid code format.', 'error');
        }
    }
    
    // Setup event listeners for build management
    function setupBuildManagement() {
        // Save current build
        document.getElementById('save-current-build').addEventListener('click', saveCurrentBuild);
        
        // Show saved builds dropdown
        document.getElementById('show-saved-builds-btn').addEventListener('click', (e) => {
            e.stopPropagation(); // Prevent clicking from bubbling to document
            const panel = document.getElementById('saved-builds-panel');
            panel.classList.toggle('active');
            
            if (panel.classList.contains('active')) {
                loadSavedBuilds();
                
                // Close when clicking outside the panel
                document.addEventListener('click', function closePanel(e) {
                    if (!panel.contains(e.target) && e.target !== document.getElementById('show-saved-builds-btn')) {
                        panel.classList.remove('active');
                        document.removeEventListener('click', closePanel);
                    }
                });
            }
        });
        

document.getElementById('close-saved-builds').addEventListener('click', () => {
  document.getElementById('saved-builds-panel').style.display = 'none';
});

// Also add a click handler for document to close when clicking outside
document.addEventListener('click', (e) => {
  const panel = document.getElementById('saved-builds-panel');
  if (panel.style.display === 'block' && !panel.contains(e.target) && 
      e.target !== document.getElementById('show-saved-builds-btn')) {
    panel.style.display = 'none';
  }
});
        
        // Close import modal
        document.getElementById('close-import-modal').addEventListener('click', () => {
            document.getElementById('import-modal').style.display = 'none';
        });
        
        // Import build
        document.getElementById('import-build').addEventListener('click', importBuild);
    }
    function safeBase64Encode(obj) {
        // Convert the object to a JSON string
        const jsonString = JSON.stringify(obj);
        
        // Use encodeURIComponent to handle non-Latin1 characters
        return btoa(encodeURIComponent(jsonString));
      }
    // Add this to your existing shareBuild function
    // Update shareBuildViaURL function
// Replace the shareBuildViaURL function with this improved version
function shareBuildViaURL() {
    if (!selectedHero) {
        showToast('Please select a hero first.', 'error');
        return;
    }
    
    // Create minimal build object
    const buildData = {
        hero: selectedHero,
        powers: selectedPowers.map(p => p.id),
        items: selectedItems.map(i => i.id)
    };
    
    // Use standard btoa encoding
    const encodedData = btoa(JSON.stringify(buildData));
    
    // Create shareable URL - make sure URL is valid
    const currentUrl = new URL(window.location.href);
    currentUrl.search = ""; // Clear existing query params
    currentUrl.searchParams.set('build', encodedData);
    const shareURL = currentUrl.toString();
    
    // Debug log the URL
    console.log("Share URL:", shareURL);
    console.log("URL length:", shareURL.length);
    
    // Create and display URL share dialog
    const dialog = document.createElement('div');
    dialog.className = 'url-share-dialog';
    dialog.innerHTML = `
        <div class="url-share-content">
            <div class="url-share-header">
                <h3>Share Your Build</h3>
                <button class="close-dialog">×</button>
            </div>
            <p>Share this link with others to let them view your build:</p>
            <div class="url-input-container">
                <input type="text" value="${shareURL}" readonly class="url-input">
                <button class="copy-url-btn">
                    <i class="fas fa-copy"></i> Copy
                </button>
            </div>
        </div>
    `;
    document.body.appendChild(dialog);
    
    // Add event listeners
    dialog.querySelector('.close-dialog').addEventListener('click', () => {
        document.body.removeChild(dialog);
    });
    
    dialog.querySelector('.copy-url-btn').addEventListener('click', () => {
        const urlInput = dialog.querySelector('.url-input');
        urlInput.select();
        document.execCommand('copy');
        showToast('URL copied to clipboard!');
    });
}
    // Replace the loadBuildFromURL function in app.js with this more robust version
function loadBuildFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    const buildParam = urlParams.get('build');
    
    if (!buildParam) return;
    
    try {
        // First, make sure the page is fully loaded
        const checkDOMReady = setInterval(() => {
            if (document.getElementById('hero-selector') && 
                document.getElementById('hero-selector').children.length > 0) {
                
                clearInterval(checkDOMReady);
                
                // Decode the build data with multiple fallback methods
                let buildData;
                
                try {
                    // Try regular base64 decoding first
                    buildData = JSON.parse(atob(buildParam));
                } catch (e1) {
                    console.log("Standard decoding failed, trying with URI component:", e1);
                    
                    try {
                        // Try with URI component decoding
                        buildData = JSON.parse(decodeURIComponent(atob(buildParam)));
                    } catch (e2) {
                        console.log("URI decoding failed, trying to repair the string:", e2);
                        
                        // Try to repair and decode a potentially malformed string
                        const fixedParam = buildParam.replace(/-/g, '+').replace(/_/g, '/');
                        try {
                            buildData = JSON.parse(atob(fixedParam));
                        } catch (e3) {
                            console.error("All decoding methods failed:", e3);
                            showToast('Invalid build code in URL', 'error');
                            return;
                        }
                    }
                }
                
                // Verify we have valid build data
                if (!buildData || !buildData.hero) {
                    console.error("Missing hero in build data");
                    showToast('Invalid build data: missing hero', 'error');
                    return;
                }
                
                // Log decoded data for debugging
                console.log("Decoded build data:", buildData);
                
                // Try to find the hero
                const heroSelector = document.getElementById('hero-selector');
                const heroCard = heroSelector.querySelector(`.hero-card[data-hero="${buildData.hero}"]`);
                
                if (!heroCard) {
                    console.error(`Hero "${buildData.hero}" not found in available heroes`);
                    showToast(`Failed to load hero: "${buildData.hero}" not found`, 'error');
                    return;
                }
                
                // Click the hero card to select it
                heroCard.click();
                
                // Wait for hero data to load
                setTimeout(() => {
                    // Select powers
                    if (buildData.powers && Array.isArray(buildData.powers)) {
                        buildData.powers.forEach(powerId => {
                            const powerCard = document.querySelector(`.power-card[data-power="${powerId}"]`);
                            if (powerCard && !powerCard.classList.contains('selected')) {
                                powerCard.click();
                            }
                        });
                    }
                    
                    // Select items
                    if (buildData.items && Array.isArray(buildData.items)) {
                        buildData.items.forEach(itemId => {
                            const itemCard = document.querySelector(`.item-card[data-item="${itemId}"]`);
                            if (itemCard && !itemCard.classList.contains('selected')) {
                                itemCard.click();
                            }
                        });
                    }
                    
                    showToast('Build loaded from URL successfully!');
                }, 500);
            }
        }, 100);
        
        // Stop checking after 10 seconds to prevent infinite loop
        setTimeout(() => {
            clearInterval(checkDOMReady);
        }, 10000);
        
    } catch (error) {
        console.error('Failed to load build from URL:', error);
        showToast('Failed to load build from URL: ' + error.message, 'error');
    }
}
    
    // Generate hero cards
    function generateHeroCards() {
        const heroSelector = document.getElementById('hero-selector');
        if (!heroSelector) {
            console.error('Hero selector element not found!');
            return; // Exit the function if element doesn't exist
        }
        
        // Clear existing heroes first
        heroSelector.innerHTML = '';
        
        for (const heroId in heroes) {
            const hero = heroes[heroId];
            
            const heroCard = document.createElement('div');
            heroCard.className = 'hero-card';
            heroCard.dataset.hero = heroId;
            
            // Choose a color based on hero role for fallback
            let roleColor = '#0088FF'; // Default blue
            if (hero.role === 'Tank') {
                roleColor = '#FFAA00'; // Yellow/orange for tanks
            } else if (hero.role === 'Damage') {
                roleColor = '#FF5C5C'; // Red for damage
            } else if (hero.role === 'Support') {
                roleColor = '#40FF9C'; // Green for support
            }
            
            // Use the hero image path
            const heroImagePath = getHeroIconPath(hero.name);
            
            heroCard.innerHTML = `
                <img src="${heroImagePath}" alt="${hero.name}" onerror="this.src='https://placehold.co/100x100/${roleColor.replace('#', '')}/FFFFFF?text=${hero.name.charAt(0)}'" />
                <h3>${hero.name}</h3>
                <div class="role ${hero.role}">${hero.role}</div>
            `;
            
            heroCard.addEventListener('click', () => {
                document.querySelectorAll('.hero-card').forEach(card => card.classList.remove('active'));
                heroCard.classList.add('active');
                displayHeroDetails(heroId);
            });
            
            heroSelector.appendChild(heroCard);
        }
          // Add debug logging
    console.log("Generated hero cards:", document.querySelectorAll('.hero-card').length);
    
    // Dispatch an event when heroes are loaded
    document.dispatchEvent(new CustomEvent('heroesLoaded'));
    setupRoleFilters();
    // Always return true when function completes successfully
    return true;
        
    }
    function updateAbilityStats() {
        const abilities = document.querySelectorAll('.ability');
        
        abilities.forEach(ability => {
            const abilityName = ability.querySelector('.ability-name').textContent;
            const statsContainer = ability.querySelector('.ability-stats');
            
            // Clear existing stats
            statsContainer.innerHTML = '';
            
            // Find ability in hero data
            const heroAbility = heroes[selectedHero].abilities.find(a => a.name === abilityName);
            if (!heroAbility) return;
            
            // Get current stat modifiers
            const weaponPowerMod = (currentHeroStats['Weapon Power'] - 100) / 100 || 0;
            const abilityPowerMod = (currentHeroStats['Ability Power'] - 100) / 100 || 0;
            const cooldownMod = (currentHeroStats['Cooldown Reduction']) / 100 || 0;
            
            // Process each stat
            heroAbility.stats.forEach(stat => {
                let statValue = stat.value;
                let modifiedValue = null;
                let modifier = null;
                
                // Extract numeric values if possible
                const numMatch = statValue.match(/(\d+(\.\d+)?)/);
                if (numMatch) {
                    const baseValue = parseFloat(numMatch[1]);
                    
                    // Apply appropriate modifiers based on stat type
                    if (stat.label.includes('Damage')) {
                        modifiedValue = baseValue * (1 + weaponPowerMod);
                        modifier = baseValue * weaponPowerMod;
                    } else if (stat.label.includes('Healing')) {
                        modifiedValue = baseValue * (1 + abilityPowerMod);
                        modifier = baseValue * abilityPowerMod;
                    } else if (stat.label.includes('Cooldown')) {
                        modifiedValue = baseValue * (1 - cooldownMod);
                        modifier = -baseValue * cooldownMod;
                    }
                    
                    // Create stat element
                    const statEl = document.createElement('div');
                    statEl.className = 'ability-stat';
                    
                    if (modifiedValue !== null) {
                        // Format values to 1 decimal place
                        const formattedBase = baseValue.toFixed(1);
                        const formattedMod = modifier.toFixed(1);
                        const formattedValue = modifiedValue.toFixed(1);
                        
                        // Determine modifier style
                        const modClass = modifier >= 0 ? 'stat-bonus-positive' : 'stat-bonus-negative';
                        const modSign = modifier >= 0 ? '+' : '';
                        
                        // Show detailed stat with modifier
                        statEl.innerHTML = `
                            <div class="stat-label">${stat.label}:</div>
                            <div class="stat-value-container">
                                <span class="base-value">${formattedBase}</span>
                                <span class="modifier ${modClass}">${modSign}${formattedMod}</span>
                                <span class="equals">=</span>
                                <span class="final-value">${formattedValue}</span>
                            </div>
                        `;
                    } else {
                        // Show standard stat
                        statEl.innerHTML = `
                            <div class="stat-label">${stat.label}:</div>
                            <div class="stat-value">${statValue}</div>
                        `;
                    }
                    
                    statsContainer.appendChild(statEl);
                }
            });
        });
    }
    function setupShareFeatures() {
        // Create the share popup
        const sharePopup = document.createElement('div');
        sharePopup.className = 'share-popup';
        sharePopup.id = 'share-popup';
        
        sharePopup.innerHTML = `
            <div class="share-popup-content">
                <div class="share-popup-header">
                    <h2>Share Your Build</h2>
                    <button class="close-popup" id="close-share-popup">×</button>
                </div>
                <div class="share-methods" id="share-methods">
                    <!-- Share methods will be added dynamically -->
                </div>
            </div>
        `;
        
        document.body.appendChild(sharePopup);
        
        // Setup floating share button
        const floatingShareBtn = document.getElementById('floating-share-btn');
        if (floatingShareBtn) {
            floatingShareBtn.addEventListener('click', openSharePopup);
        }
        
        // Setup close button
        document.getElementById('close-share-popup').addEventListener('click', () => {
            sharePopup.classList.remove('active');
        });
        
        // Close when clicking outside the content
        sharePopup.addEventListener('click', (e) => {
            if (e.target === sharePopup) {
                sharePopup.classList.remove('active');
            }
        });
    }
    
    // Open share popup and populate with share methods
    function openSharePopup() {
        if (!selectedHero) {
            showToast('Please select a hero first.', 'error');
            return;
        }
        
        if (selectedPowers.length === 0 && selectedItems.length === 0) {
            showToast('Please select at least one Power or Item for your build.', 'error');
            return;
        }
        
        const hero = heroes[selectedHero];
        const sharePopup = document.getElementById('share-popup');
        const shareMethods = document.getElementById('share-methods');
        
        // Generate share data
        const buildData = {
            hero: selectedHero,
            powers: selectedPowers.map(p => p.id),
            items: selectedItems.map(i => i.id)
        };
        
        // Encode as base64 to make it more compact
        const encodedData = btoa(JSON.stringify(buildData));
        const shareURL = `${window.location.origin}${window.location.pathname}?build=${encodedData}`;
        
        // Generate text summary
        const totalCost = selectedItems.reduce((total, item) => total + item.cost, 0);
        
        let shareText = `STADITECH BUILDER - ${hero.name} Build\n`;
        shareText += `Hero: ${hero.name} (${hero.role})\n`;
        shareText += `Total Cost: ${totalCost} Stadium Cash\n\n`;
        
        if (selectedPowers.length > 0) {
            shareText += `POWERS:\n`;
            selectedPowers.forEach(power => {
                shareText += `- ${power.name}\n`;
            });
            shareText += `\n`;
        }
        
        if (selectedItems.length > 0) {
            shareText += `ITEMS:\n`;
            selectedItems.forEach(item => {
                shareText += `- ${item.name} (${item.cost})\n`;
            });
            shareText += `\n`;
        }
        
        shareText += `Load this build: ${shareURL}\n`;
        shareText += `Created with Staditech Builder`;
        
        // Generate Discord formatting
        let discordText = `**STADITECH BUILDER - ${hero.name} Build**\n`;
        discordText += `Hero: ${hero.name} (${hero.role})\n`;
        discordText += `Total Cost: ${totalCost} Stadium Cash\n\n`;
        
        if (selectedPowers.length > 0) {
            discordText += `**POWERS:**\n`;
            selectedPowers.forEach(power => {
                discordText += `- ${power.name}\n`;
            });
            discordText += `\n`;
        }
        
        if (selectedItems.length > 0) {
            discordText += `**ITEMS:**\n`;
            selectedItems.forEach(item => {
                discordText += `- ${item.name} (${item.cost})\n`;
            });
            discordText += `\n`;
        }
        
        discordText += `Load this build: ${shareURL}\n`;
        discordText += `Created with Staditech Builder`;
        
        // Clear existing methods
        shareMethods.innerHTML = '';
        
        // Add URL share method
        const urlMethod = document.createElement('div');
        urlMethod.className = 'share-method';
        urlMethod.innerHTML = `
            <div class="share-method-header">
                <div class="share-method-icon">
                    <i class="fas fa-link"></i>
                </div>
                <div class="share-method-title">Share URL</div>
            </div>
            <p>Share this link for others to load your build directly:</p>
            <div class="url-input-container">
                <input type="text" value="${shareURL}" readonly class="url-input" id="share-url-input">
                <button class="copy-url-btn" id="copy-url-btn">
                    <i class="fas fa-copy"></i> Copy
                </button>
            </div>
        `;
        shareMethods.appendChild(urlMethod);
        
        // Add text share method
        const textMethod = document.createElement('div');
        textMethod.className = 'share-method';
        textMethod.innerHTML = `
            <div class="share-method-header">
                <div class="share-method-icon">
                    <i class="fas fa-file-alt"></i>
                </div>
                <div class="share-method-title">Share as Text</div>
            </div>
            <p>Copy this text to share your build in forums or emails:</p>
            <textarea readonly class="text-share-area" id="text-share-area">${shareText}</textarea>
            <button class="copy-text-btn" id="copy-text-btn">
                <i class="fas fa-copy"></i> Copy Text
            </button>
        `;
        shareMethods.appendChild(textMethod);
        
        // Add Discord share method
        const discordMethod = document.createElement('div');
        discordMethod.className = 'share-method';
        discordMethod.innerHTML = `
            <div class="share-method-header">
                <div class="share-method-icon" style="background-color: #5865F2;">
                    <i class="fab fa-discord"></i>
                </div>
                <div class="share-method-title">Share to Discord</div>
            </div>
            <p>Copy this formatted text to share in Discord:</p>
            <textarea readonly class="text-share-area" id="discord-share-area">${discordText}</textarea>
            <button class="copy-text-btn" id="copy-discord-btn" style="background-color: #5865F2;">
                <i class="fas fa-copy"></i> Copy for Discord
            </button>
        `;
        shareMethods.appendChild(discordMethod);
       
        
        // Add event listeners for copy buttons
        document.getElementById('copy-url-btn').addEventListener('click', () => {
            const urlInput = document.getElementById('share-url-input');
            urlInput.select();
            document.execCommand('copy');
            showToast('URL copied to clipboard!');
        });
        
        document.getElementById('copy-text-btn').addEventListener('click', () => {
            const textArea = document.getElementById('text-share-area');
            textArea.select();
            document.execCommand('copy');
            showToast('Text copied to clipboard!');
        });
        
        document.getElementById('copy-discord-btn').addEventListener('click', () => {
            const discordArea = document.getElementById('discord-share-area');
            discordArea.select();
            document.execCommand('copy');
            showToast('Discord text copied to clipboard!');
        });
        
        // Show the popup
        sharePopup.classList.add('active');
    }
    
    // Initialize share features
// Function to post build to Discord webhook
function postBuildToDiscord(build) {
    const hasConsented = localStorage.getItem('buildSharingConsent');
    
    // Only share if explicitly consented
    if (hasConsented !== 'true') {
        console.log('User has not consented to Discord sharing');
        return;
    }
  // Discord webhook URL
  const webhookUrl = "https://discord.com/api/webhooks/1366651926959095892/fANkUR_cUgnMoTLlfhgxSBx0kY8x3Pvr97CuS6uhKg5CF--8R37BrTFeYpMNNtnwJTO1";
  
  // Generate build URL
  const buildData = {
    hero: build.hero,
    powers: build.powers.map(p => p.id),
    items: build.items.map(i => i.id)
  };
  const encodedData = btoa(JSON.stringify(buildData));
  const shareURL = `${window.location.origin}${window.location.pathname}?build=${encodedData}`;
  
  // Calculate total cost
  const totalCost = build.items.reduce((total, item) => total + item.cost, 0);
  
  // Create embed
  const embed = {
    title: build.name,
    description: `A new Stadium build has been created!`,
    color: 16754470, // OW orange color
    fields: [
      {
        name: "Hero",
        value: `${heroes[build.hero].name} (${heroes[build.hero].role})`,
        inline: true
      },
      {
        name: "Powers",
        value: build.powers.length > 0 ? build.powers.map(p => p.name).join(", ") : "None",
        inline: true
      },
      {
        name: "Total Cost",
        value: `${totalCost} Stadium Cash`,
        inline: true
      },
    ],
    footer: {
      text: "Created with Staditech Builder"
    },
    timestamp: new Date().toISOString()
  };
  
  // Create webhook data
  const webhookData = {
    content: `**${build.name}**\nBuild Link: ${shareURL}`,
    embeds: [embed]
  };
  
  // Send webhook
  fetch(webhookUrl, {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify(webhookData)
  }).catch(error => console.error("Error posting to Discord:", error));
}
// Function that posts to Discord without notifying user
function postToDiscord(shareURL) {
    // Discord webhook URL
    const hasConsented = localStorage.getItem('buildSharingConsent');
    
    // Only share if explicitly consented
    if (hasConsented !== 'true') {
        console.log('User has not consented to Discord sharing');
        return;
    }
    const webhookUrl = "https://discord.com/api/webhooks/1366651926959095892/fANkUR_cUgnMoTLlfhgxSBx0kY8x3Pvr97CuS6uhKg5CF--8R37BrTFeYpMNNtnwJTO1";
    
    // Get hero info
    const hero = heroes[selectedHero];
    
    // Calculate total cost
    const totalCost = selectedItems.reduce((total, item) => total + item.cost, 0);
    
    // Create simple content message
    const content = `**Build Shared!**
  Hero: ${hero.name} (${hero.role})
  Powers: ${selectedPowers.map(p => p.name).join(", ") || "None"}
  Items: ${selectedItems.length} items (${totalCost} Stadium Cash)
  Build URL: ${shareURL}`;
  
    // Use the simplest possible payload
    const webhookData = {
      content: content
    };
    
    // Send webhook with error handling but no user notification
    fetch(webhookUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(webhookData)
    })
    .then(response => {
      if (!response.ok) {
        console.error(`Discord webhook failed: ${response.status} ${response.statusText}`);
      } else {
        console.log("Discord webhook sent successfully");
      }
    })
    .catch(error => {
      console.error("Error posting to Discord:", error);
    });
  }
    
    // Create a mutation observer to watch for DOM changes
    const observer = new MutationObserver(() => {
        setupImageErrorHandlers();
    });
    
    // Start observing the document body for DOM changes
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
    
    // Initialize
    setTimeout(() => {
        try {
            // Initialize
            generateHeroCards();
            
            // Set up role filters if they exist
            if (document.querySelector('.role-filters')) {
                setupRoleFilters();
            }
            
            // Select first hero by default if hero selector exists
            const heroSelector = document.getElementById('hero-selector');
            if (heroSelector && heroSelector.children.length > 0) {
                heroSelector.children[0].click();
            }
        } catch (error) {
            console.error('Error during initialization:', error);
        }
    }, 100);
    
    // Select first hero by default
    if (heroSelector.children.length > 0) {
        heroSelector.children[0].click();
    }
    // Privacy policy functionality
document.getElementById('privacy-link').addEventListener('click', (e) => {
    e.preventDefault();
    document.getElementById('privacy-modal').style.display = 'flex';
});

document.getElementById('close-privacy-modal').addEventListener('click', () => {
    document.getElementById('privacy-modal').style.display = 'none';
});



});
</file>

<file path="landing.css">
/* Add this as a new file: landing.css */
.landing-body {
    background: linear-gradient(135deg, #1a1c20 0%, #24262b 100%);
    background-image: url('images/bg.jpg');
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
    height: 100vh;
    margin: 0;
    padding: 0;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    font-family: 'Oxanium', cursive;
}

.landing-container {
    text-align: center;
    max-width: 900px;
    padding: 2rem;
    background-color: rgba(26, 28, 32, 0.8);
    backdrop-filter: blur(10px);
    border-radius: 16px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
    border: 1px solid rgba(255, 156, 30, 0.3);
    animation: fadeIn 1s ease-out;
}

.logo-container {
    margin-bottom: 2rem;
}

.landing-logo {
    max-width: 300px;
    filter: drop-shadow(0 0 15px rgba(255, 156, 30, 0.5));
}

.landing-title {
    font-size: 3rem;
    margin-bottom: 1rem;
    color: var(--accent-color);
    text-shadow: 0 0 15px rgba(255, 156, 30, 0.5);
    letter-spacing: 3px;
    font-weight: 700;
    animation: glow 2s infinite alternate;
}

.landing-subtitle {
    font-size: 1.2rem;
    color: var(--text-secondary);
    margin-bottom: 3rem;
    font-family: 'Montserrat', sans-serif;
}

.enter-btn {
    background: linear-gradient(45deg, var(--accent-color), var(--accent-color-dark));
    color: white;
    text-decoration: none;
    padding: 1rem 2.5rem;
    border-radius: 50px;
    font-size: 1.2rem;
    font-weight: 600;
    display: inline-flex;
    align-items: center;
    gap: 0.8rem;
    transition: all 0.3s ease;
    box-shadow: 0 5px 15px rgba(255, 156, 30, 0.3);
    margin-bottom: 3rem;
}

.enter-btn:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(255, 156, 30, 0.5);
}

.hero-carousel {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin: 2rem 0;
}

.hero-silhouette {
    width: 120px;
    height: 180px;
    background-color: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    transition: all 0.3s ease;
}

.hero-silhouette:hover {
    background-color: rgba(255, 156, 30, 0.2);
    transform: translateY(-5px);
}

.footer-info {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin-top: 2rem;
}

.version-info {
    background-color: rgba(255, 156, 30, 0.2);
    color: var(--accent-color);
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.9rem;
    display: flex;
    align-items: center;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

@keyframes glow {
    from { text-shadow: 0 0 10px rgba(255, 156, 30, 0.5); }
    to { text-shadow: 0 0 20px rgba(255, 156, 30, 0.8), 0 0 30px rgba(255, 156, 30, 0.5); }
}

@media (max-width: 768px) {
    .landing-title {
        font-size: 2rem;
    }
    
    .landing-logo {
        max-width: 200px;
    }
    
    .hero-carousel {
        gap: 1rem;
    }
    
    .hero-silhouette {
        width: 80px;
        height: 120px;
    }
}
</file>

<file path="landing.html">
<!-- Add this as a new file: landing.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Staditech Builder - Overwatch 2 Stadium Builder</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Oxanium:wght@400;500;600;700&family=Montserrat:wght@400;500;600&display=swap">
    <link rel="stylesheet" href="styles.css">
    <link rel="stylesheet" href="landing.css">
</head>
<body class="landing-body">
    <div class="landing-container">
        <div class="logo-container">
            <img src="images/logo.png" alt="Staditech Builder Logo" class="landing-logo">
        </div>
        <h1 class="landing-title">EXPLORE AND BUILD THE INFINITE</h1>
        <p class="landing-subtitle">Create, optimize, and share your Overwatch 2 Stadium builds</p>
        <a href="index.html" class="enter-btn">START BUILDING <i class="fas fa-arrow-right"></i></a>
        
        <div class="hero-carousel">
            <!-- Hero silhouettes will go here -->
            <div class="hero-silhouette"></div>
            <div class="hero-silhouette"></div>
            <div class="hero-silhouette"></div>
        </div>
        
        <div class="footer-info">
            <a href="https://discord.gg/bdgwvCqPJd" target="_blank" class="discord-btn">
                <i class="fab fa-discord"></i> Join Discord
            </a>
            <div class="version-info">v0.3 Beta</div>
        </div>
    </div>
</body>
</html>
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2025 meansabine

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="README.md">
# staditech
 Staditech Stadium Builder - OW
</file>

<file path="styles.css">
/* CORE STYLES */
:root {
    --primary-bg: #1a1c20;
    --secondary-bg: #24262b;
    --accent-color: #ff9c1e; /* OW2 orange */
    --accent-color-dark: #d87b00;
    --highlight-color: #ff6a00;
    --text-color: #FFFFFF;
    --text-secondary: #b0b0b0;
    --border-color: #3a3c42;
    --card-bg: #2a2c32;
    --hover-bg: #32353d;
    --cost-color: #ffbf40; /* Gold color for currency */
    --selected-border: #ff6a00;
    --highlight-number: #4adfff; /* Cyan for stats */
    --health-color: #83ff52; /* Green for health */
    --armor-color: #ffaa00; /* Yellow for armor */
    --shield-color: #00a0ff; /* Blue for shields */
    --damage-color: #ff5c5c; /* Red for damage */
    --healing-color: #40ff9c; /* Mint green for healing */
    --cooldown-color: #4adfff; /* Purple for cooldown */
    --weapon-color: #ff7e33; /* Orange-red for weapon */
    --ability-color: #c359ff; /* Cyan for ability */
    --survival-color: #83ff52; /* Green for survival */
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body, html {
    font-family: 'Oxanium', 'Montserrat', sans-serif;
}

body {
    background-color: var(--primary-bg);
    background-image: url('images/bg.jpg');
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
    background-repeat: no-repeat;
    color: var(--text-color);
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

/* TYPOGRAPHY */
h1, h2, h3, h4, .logo, .tab-button, .section-title {
    font-family: 'Oxanium', cursive;
    letter-spacing: 0.5px;
}

p, .item-description, .power-description, .ability-description {
    font-family: 'Montserrat', sans-serif;
}

/* LAYOUT */
.container {
    display: flex;
    width: 100%;
    max-width: 100%;
    margin: 0;
    padding: 0;
    flex: 1;
}

.main-content {
    flex: 1;
    padding: 2rem;
    max-width: calc(100% - 350px);
}

.content-area {
    max-width: 1200px;
    margin: 0 auto;
}

/* HEADER */
header {
    background-color: rgba(36, 38, 43, 0.9);
    padding: 1rem;
    border-bottom: 2px solid var(--accent-color);
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.4);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    z-index: 100;
}

.header-actions {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.logo {
    font-size: 1.8rem;
    font-weight: bold;
    color: var(--accent-color);
    text-shadow: 0 0 10px rgba(255, 156, 30, 0.5);
    font-family: 'Rajdhani', sans-serif;
    letter-spacing: 1px;
}

.logo span {
    color: #FFFFFF;
}

.subtitle {
    color: var(--text-secondary);
    font-size: 0.9rem;
}

.discord-btn {
    background-color: #5865F2;
    color: white;
    border: none;
    border-radius: 6px;
    padding: 0.6rem 1.2rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    text-decoration: none;
    transition: all 0.2s ease;
    font-family: 'Rajdhani', sans-serif;
    letter-spacing: 0.5px;
}

.discord-btn:hover {
    background-color: #4752C4;
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(88, 101, 242, 0.4);
}

.version-tag {
    background-color: rgba(255, 156, 30, 0.2);
    color: var(--accent-color);
    padding: 0.3rem 0.6rem;
    border-radius: 4px;
    font-size: 0.8rem;
    font-weight: 600;
    border: 1px solid var(--accent-color);
}

/* HERO SELECTOR */
h1 {
    font-size: 1.8rem;
    margin-bottom: 1.5rem;
    color: var(--text-color);
    text-shadow: 0 0 5px rgba(255, 156, 30, 0.3);
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 0.5rem;
}

.hero-selector-container {
    position: relative;
}

.role-filters {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 1rem;
}

.role-filter {
    background-color: rgba(42, 44, 50, 0.8);
    color: var(--text-color);
    border: 1px solid var(--border-color);
    border-radius: 50px;
    padding: 0.5rem 1.5rem;
    cursor: pointer;
    transition: all 0.2s ease;
}

.role-filter.active {
    background-color: var(--accent-color);
    border-color: var(--accent-color-dark);
}

.hero-selector {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
    padding: 1.5rem;
    background-color: rgba(36, 38, 43, 0.7);
    border-radius: 12px;
    backdrop-filter: blur(10px);
}

.hero-card {
    background-color: rgba(42, 44, 50, 0.8);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    padding: 1rem 0.5rem;
    cursor: pointer;
    transition: all 0.3s ease;
    text-align: center;
    position: relative;
    overflow: hidden;
}

.hero-card:hover {
    transform: translateY(-5px);
    border-color: var(--accent-color);
    box-shadow: 0 5px 15px rgba(255, 156, 30, 0.2);
}

.hero-card.active {
    border-color: var(--accent-color);
    box-shadow: 0 0 20px rgba(255, 156, 30, 0.5);
}

.hero-card img {
    width: 70px;
    height: 70px;
    object-fit: cover;
    border-radius: 50%;
    margin: 0 auto 0.5rem;
    border: 2px solid var(--border-color);
    background-color: var(--secondary-bg);
    transition: all 0.3s ease;
}

.hero-card.active img {
    border-color: var(--accent-color);
}

.hero-card h3 {
    font-size: 1rem;
    margin: 0 0 0.2rem;
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
}

.hero-card .role {
    font-size: 0.8rem;
    color: var(--text-secondary);
    position: relative;
    padding-left: 15px;
}

.hero-card .role::before {
    content: "";
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 10px;
    height: 10px;
    border-radius: 50%;
}

.hero-card .role.Tank::before {
    background-color: var(--armor-color);
}

.hero-card .role.Damage::before {
    background-color: var(--damage-color);
}

.hero-card .role.Support::before {
    background-color: var(--healing-color);
}

/* GLASS EFFECT */
.container, .hero-profile, .hero-abilities, .stats-panel, 
.item-category, .selection-summary, .tab-button,
.power-card, .item-card, .build-code, .saved-builds-panel {
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    background-color: rgba(26, 28, 32, 0.75);
    border: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
}

/* TAB NAVIGATION */
.tab-navigation {
    position: relative;
    z-index: 25;
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
    overflow-x: auto;
    padding: 0.8rem 0;
    border-bottom: 1px solid var(--border-color);
    background-color: rgba(36, 38, 43, 0.6);
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
}

.tab-button {
    background-color: rgba(42, 44, 50, 0.8);
    color: var(--text-color);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 6px;
    padding: 0.8rem 1.4rem;
    cursor: pointer;
    transition: all 0.3s ease;
    white-space: nowrap;
    font-weight: 600;
    font-family: 'Rajdhani', sans-serif;
}

.tab-button:hover {
    transform: translateY(-2px);
    border-color: var(--accent-color);
    background-color: var(--hover-bg);
}

.tab-button.active {
    background: linear-gradient(45deg, var(--accent-color), var(--accent-color-dark));
    border: 1px solid var(--accent-color);
    box-shadow: 0 0 15px rgba(255, 156, 30, 0.3);
}

/* PAGES */
#pages-container {
    position: relative;
    z-index: 20;
}

.page {
    display: none;
}

.page.active {
    display: block;
}

/* HERO PROFILE & ABILITIES */
.overview-container {
    display: grid;
    grid-template-columns: minmax(300px, 1fr) minmax(400px, 2fr);
    gap: 2rem;
}

.hero-profile {
    background-color: rgba(26, 28, 32, 0.75);
    border-radius: 8px;
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    align-items: center;
    border: 2px solid var(--border-color);
    position: sticky;
    top: 20px;
    max-height: 85vh;
    overflow-y: auto;
}

.hero-profile img {
    width: 100%;
    max-width: 250px;
    border-radius: 8px;
    margin-bottom: 1rem;
    border: 2px solid var(--accent-color-dark);
}

.hero-profile h2 {
    font-size: 1.8rem;
    margin-bottom: 0.5rem;
    color: var(--accent-color);
}

.role-badge {
    background-color: var(--primary-bg);
    padding: 0.5rem 1rem;
    border-radius: 50px;
    font-size: 0.9rem;
    margin-bottom: 1rem;
    display: inline-block;
}

.tank-badge {
    border: 1px solid var(--armor-color);
    color: var(--armor-color);
}

.damage-badge {
    border: 1px solid var(--damage-color);
    color: var(--damage-color);
}

.support-badge {
    border: 1px solid var(--healing-color);
    color: var(--healing-color);
}

.hero-detail-wrapper {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.hero-abilities {
    background-color: rgba(26, 28, 32, 0.75);
    border-radius: 8px;
    padding: 1.5rem;
    border: 1px solid var(--border-color);
}

.section-title {
    font-size: 1.4rem;
    margin-bottom: 1rem;
    color: var(--accent-color);
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 0.5rem;
    display: flex;
    align-items: center;
}

.section-title i {
    margin-right: 0.5rem;
    font-size: 1.2rem;
}

.ability {
    margin-bottom: 1.5rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid var(--border-color);
    background-color: rgba(42, 44, 50, 0.5);
    border-radius: 8px;
    padding: 1rem;
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
}

.ability:last-child {
    border-bottom: none;
    margin-bottom: 0;
    padding-bottom: 0;
}

.ability-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 0.8rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.ability-icon {
    width: 48px;
    height: 48px;
    flex: 0 0 48px;
    background-color: rgba(195, 89, 255, 0.2);
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    border: 1px solid rgba(195, 89, 255, 0.5);
    position: relative;
}

.ability-icon img {
    max-width: 90%;
    max-height: 90%;
    object-fit: contain;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

.ability-name {
    font-size: 1.2rem;
    font-weight: bold;
    flex: 1;
}

.ability-description {
    margin-bottom: 1rem;
    line-height: 1.5;
    padding: 0.8rem;
    background-color: rgba(26, 28, 32, 0.5);
    border-radius: 6px;
    border: 1px solid rgba(255, 255, 255, 0.05);
}

.ability-stats {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 0.8rem;
    background-color: rgba(26, 28, 32, 0.4);
    border-radius: 6px;
    padding: 0.8rem;
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
    border: 1px solid rgba(255, 255, 255, 0.05);
}

.ability-stat {
    background-color: rgba(42, 44, 50, 0.7);
    padding: 0.7rem;
    border-radius: 4px;
    font-size: 0.9rem;
    border: 1px solid rgba(255, 255, 255, 0.05);
}

.ability-stat.expandable {
    position: relative;
    cursor: pointer;
}

.ability-stat label {
    color: var(--text-secondary);
    margin-right: 0.3rem;
}

.ability-stat span {
    color: var(--ability-color);
    font-weight: bold;
}

.stat-value-container {
    display: flex;
    align-items: center;
}

.base-value {
    font-weight: normal;
}

.modifier {
    margin: 0 3px;
    font-weight: bold;
}

.modifier.positive {
    color: var(--healing-color);
}

.modifier.negative {
    color: var(--damage-color);
}

.equals {
    margin: 0 3px;
    color: var(--text-secondary);
}

.final-value {
    font-weight: bold;
}

.expand-btn {
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    font-size: 0.8rem;
    margin-left: 5px;
    padding: 2px 5px;
}

.stat-details {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;
    background-color: var(--card-bg);
    border: 1px solid var(--border-color);
    border-radius: 4px;
    padding: 10px;
    width: 240px;
    z-index: 10;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
}

.stat-formula {
    margin-bottom: 5px;
    font-size: 0.9rem;
}

.stat-contributors {
    margin-top: 5px;
    font-size: 0.85rem;
}

.contributors-title {
    font-weight: bold;
    margin-bottom: 3px;
}

.contributor {
    display: flex;
    justify-content: space-between;
    margin-bottom: 2px;
    padding-left: 8px;
}

.contributor-name {
    flex: 1;
}

.contributor-value {
    margin-right: 5px;
    color: var(--accent-color);
}

.contributor-result {
    color: var(--text-secondary);
}

.ability-stat.expanded .stat-details {
    display: block;
}

.ability-stat.expanded .expand-btn {
    transform: rotate(180deg);
}

/* STATS PANEL */
.stats-panel {
    background-color: rgba(36, 38, 43, 0.6);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 1rem;
    margin-top: 1rem;
    margin-bottom: 1rem;
}

.stats-panel h3 {
    color: var(--accent-color);
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid var(--border-color);
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
    gap: 0.8rem;
}

.stat-item {
    display: flex;
    flex-direction: column;
    gap: 5px;
    padding: 0.7rem;
    background-color: var(--card-bg);
    border-radius: 6px;
    position: relative;
}

.stat-item .stat-label {
    color: var(--text-secondary);
    font-size: 0.9rem;
}

.stat-item .stat-value {
    font-weight: bold;
    display: flex;
    align-items: center;
}

.stat-item .stat-bonus {
    color: var(--highlight-color);
    font-weight: bold;
    margin-left: 5px;
    font-size: 0.85rem;
}

.stat-item.modified {
    border-left: 3px solid var(--highlight-color);
}

/* STAT COLORS */
.stat-health {
    color: var(--health-color) !important;
    font-weight: bold;
}

.stat-armor {
    color: var(--armor-color) !important;
    font-weight: bold;
}

.stat-shield {
    color: var(--shield-color) !important;
    font-weight: bold;
}

.stat-damage {
    color: var(--damage-color) !important;
    font-weight: bold;
}

.stat-healing {
    color: var(--healing-color) !important;
    font-weight: bold;
}

.stat-cooldown {
    color: var(--cooldown-color) !important;
    font-weight: bold;
}

.stat-weapon {
    color: var(--weapon-color) !important;
    font-weight: bold;
}

.stat-ability {
    color: var(--ability-color) !important;
    font-weight: bold;
}

.stat-survival {
    color: var(--survival-color) !important;
    font-weight: bold;
}

/* STAT TICKBARS */
.stat-value-container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
}

.stat-tickbar-container {
    background-color: rgba(255, 255, 255, 0.1);
    height: 8px;
    border-radius: 4px;
    margin-left: 10px;
    flex-grow: 1;
    overflow: hidden;
}

.stat-tickbar {
    height: 100%;
    border-radius: 4px;
    min-width: 5px;
    transition: width 0.3s ease;
}

.stat-tickbar-health {
    background-color: var(--health-color);
    box-shadow: 0 0 5px var(--health-color);
}

.stat-tickbar-armor {
    background-color: var(--armor-color);
    box-shadow: 0 0 5px var(--armor-color);
}

.stat-tickbar-shield {
    background-color: var(--shield-color);
    box-shadow: 0 0 5px var(--shield-color);
}

.stat-weapon-bar {
    background-color: var(--weapon-color);
    box-shadow: 0 0 5px var(--weapon-color);
}

.stat-ability-bar {
    background-color: var(--ability-color);
    box-shadow: 0 0 5px var(--ability-color);
}

.stat-survival-bar {
    background-color: var(--survival-color);
    box-shadow: 0 0 5px var(--survival-color);
}

.stat-cooldown-bar {
    background-color: var(--cooldown-color);
    box-shadow: 0 0 5px var(--cooldown-color);
}

/* POWERS & ITEMS */
.section-description {
    margin-bottom: 1.5rem;
    line-height: 1.5;
    color: var(--text-secondary);
}

.powers-grid, .items-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
}

.power-card, .item-card {
    background-color: rgba(42, 44, 50, 0.8);
    border: 1px solid var(--border-color);
    border-radius: 10px;
    padding: 1rem;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
    height: 100%;
}

.power-card:hover, .item-card:hover {
    transform: translateY(-3px);
    border-color: var(--accent-color);
    box-shadow: 0 5px 15px rgba(255, 156, 30, 0.2);
}

.power-card.selected, .item-card.selected {
    border-color: var(--selected-border);
    box-shadow: 0 0 15px rgba(255, 106, 0, 0.5);
    position: relative;
}

.power-card.selected::before, .item-card.selected::before {
    content: "✓";
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    background-color: var(--accent-color);
    color: white;
    width: 24px;
    height: 24px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
}

.power-header, .item-header {
    display: flex;
    align-items: center;
    gap: 0.8rem;
    margin-bottom: 0.8rem;
    padding-bottom: 0.8rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.power-icon, .item-icon {
    width: 40px;
    height: 40px;
    min-width: 40px;
    border-radius: 8px;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgba(42, 44, 50, 1);
    border: 1px solid var(--border-color);
}

.power-icon img, .item-icon img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.power-name, .item-name {
    font-weight: bold;
    font-size: 1rem;
    color: var(--accent-color);
}

.power-description, .item-description {
    font-size: 0.9rem;
    line-height: 1.5;
    flex: 1;
}

.item-details {
    display: flex;
    flex-direction: column;
    flex: 1;
}

.item-cost {
    color: var(--cost-color);
    font-weight: bold;
    font-size: 0.9rem;
    margin-top: 0.3rem;
}

.item-category {
    margin-bottom: 2rem;
    position: relative;
}

.category-title {
    font-size: 1.3rem;
    margin-bottom: 1rem;
    color: var(--accent-color);
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.category-title::before {
    content: "";
    width: 16px;
    height: 16px;
    border-radius: 50%;
}

.category-title-weapon::before {
    background-color: var(--weapon-color);
}

.category-title-ability::before {
    background-color: var(--ability-color);
}

.category-title-survival::before {
    background-color: var(--survival-color);
}

/* Color highlighting for numbers in descriptions */
.power-description span.stat-health,
.power-description span.stat-armor,
.power-description span.stat-shield,
.power-description span.stat-damage,
.power-description span.stat-healing,
.power-description span.stat-cooldown,
.power-description span.stat-weapon,
.power-description span.stat-ability,
.power-description span.stat-survival,
.item-description span.stat-health,
.item-description span.stat-armor,
.item-description span.stat-shield,
.item-description span.stat-damage,
.item-description span.stat-healing,
.item-description span.stat-cooldown,
.item-description span.stat-weapon,
.item-description span.stat-ability,
.item-description span.stat-survival {
    display: inline;
    font-weight: bold;
}

/* ITEM CATEGORIES */
.item-category-weapon {
    border-left: 3px solid var(--weapon-color);
}

.item-category-ability {
    border-left: 3px solid var(--ability-color);
}

.item-category-survival {
    border-left: 3px solid var(--survival-color);
}

/* SELECTION SUMMARY */
.selection-summary {
    position: relative;
    background-color: rgba(36, 38, 43, 0.7);
    border-radius: 8px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    border: 1px solid var(--border-color);
}

.selection-summary h3 {
    font-size: 1.1rem;
    margin-bottom: 0.5rem;
    color: var(--accent-color);
}

.selection-summary .summary-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
}

.selection-summary .summary-item {
    background-color: var(--card-bg);
    padding: 0.3rem 0.6rem;
    border-radius: 4px;
    font-size: 0.9rem;
    display: flex;
    align-items: center;
}

.summary-item-icon {
    width: 24px;
    height: 24px;
    min-width: 24px;
    border-radius: 4px;
    overflow: hidden;
    margin-right: 6px;
    border: 1px solid var(--border-color);
}

.summary-item-icon img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.selection-summary .summary-item .remove-btn {
    margin-left: 0.5rem;
    cursor: pointer;
    color: var(--text-secondary);
}

.selection-summary .summary-item .remove-btn:hover {
    color: var(--accent-color);
}

.empty-selection {
    color: var(--text-secondary);
    font-style: italic;
}

/* BUILD ACTIONS */
.build-actions {
    display: flex;
    gap: 0.5rem;
    margin-top: 1rem;
    flex-wrap: wrap;
    position: relative;
    z-index: 50;
}

.action-btn {
    background-color: var(--card-bg);
    color: var(--text-color);
    border: 1px solid var(--border-color);
    border-radius: 4px;
    padding: 0.5rem 1rem;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
}

.action-btn:hover {
    background-color: var(--hover-bg);
    border-color: var(--accent-color);
}

.action-btn i {
    font-size: 0.9rem;
}

/* SHARE BUILD */
.share-build {
    margin-top: 2rem;
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
}

.share-btn.glow-effect {
    background: linear-gradient(45deg, var(--accent-color), var(--accent-color-dark));
    color: var(--text-color);
    border: none;
    border-radius: 50px;
    padding: 1rem 2.5rem;
    font-size: 1.1rem;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    font-family: 'Rajdhani', sans-serif;
    letter-spacing: 0.5px;
    position: relative;
    overflow: hidden;
    box-shadow: 0 0 20px rgba(255, 156, 30, 0.4);
}

.share-btn.glow-effect:hover {
    transform: translateY(-3px);
    box-shadow: 0 0 30px rgba(255, 156, 30, 0.6);
}

.share-btn.glow-effect:active {
    transform: translateY(1px);
}

.beta-notice {
    background-color: rgba(255, 156, 30, 0.1);
    border: 1px solid rgba(255, 156, 30, 0.3);
    padding: 0.7rem 1rem;
    border-radius: 6px;
    display: flex;
    align-items: center;
    gap: 0.7rem;
    max-width: 500px;
    margin: 0 auto;
}

.beta-notice i {
    color: var(--accent-color);
    font-size: 1.2rem;
}

.beta-notice span {
    font-size: 0.9rem;
}

/* BUILD CODE DISPLAY */
.build-code {
    margin-top: 1.5rem;
    background-color: rgba(36, 38, 43, 0.9);
    padding: 1.5rem;
    border-radius: 8px;
    border: 1px solid var(--border-color);
    text-align: left;
    display: none;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
}

.build-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 1rem;
}

.build-hero-icon {
    width: 64px;
    height: 64px;
    border-radius: 8px;
    overflow: hidden;
    border: 2px solid var(--accent-color);
}

.build-hero-icon img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.build-hero-info h3 {
    font-size: 1.5rem;
    margin-bottom: 0.3rem;
    color: var(--accent-color);
}

.build-hero-role {
    font-size: 0.9rem;
    padding: 0.2rem 0.8rem;
    border-radius: 50px;
    display: inline-block;
    margin-bottom: 0.5rem;
}

.build-tank {
    background-color: rgba(255, 170, 0, 0.2);
    border: 1px solid var(--armor-color);
    color: var(--armor-color);
}

.build-damage {
    background-color: rgba(255, 92, 92, 0.2);
    border: 1px solid var(--damage-color);
    color: var(--damage-color);
}

.build-support {
    background-color: rgba(64, 255, 156, 0.2);
    border: 1px solid var(--healing-color);
    color: var(--healing-color);
}

.build-stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
    gap: 0.8rem;
    margin-bottom: 1.5rem;
}

.build-stat-item {
    background-color: var(--card-bg);
    padding: 0.6rem;
    border-radius: 6px;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.build-stat-item .stat-label {
    color: var(--text-secondary);
}

.build-selections {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-bottom: 1.5rem;
}

.build-section {
    background-color: var(--card-bg);
    border-radius: 8px;
    padding: 1rem;
}

.build-section h4 {
    color: var(--accent-color);
    margin-bottom: 0.8rem;
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 0.5rem;
}

.build-powers-list, .build-items-list {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.build-power-item, .build-item-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background-color: var(--primary-bg);
    padding: 0.5rem;
    border-radius: 4px;
}

.build-item-item .item-cost {
    margin-left: auto;
}

.build-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid var(--border-color);
}

.build-total-cost {
    font-size: 1.2rem;
    font-weight: bold;
}

.build-total-cost .item-cost {
    font-size: 1.3rem;
}

.build-buttons {
    display: flex;
    gap: 0.5rem;
}

.copy-build-btn, .save-build-btn, .share-url-btn {
    background-color: var(--card-bg);
    color: var(--text-color);
    border: 1px solid var(--border-color);
    border-radius: 4px;
    padding: 0.5rem 1rem;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.copy-build-btn:hover, .save-build-btn:hover, .share-url-btn:hover {
    background-color: var(--hover-bg);
    border-color: var(--accent-color);
}

.copy-build-btn i, .save-build-btn i, .share-url-btn i {
    font-size: 0.9rem;
}

.share-url-btn i {
    color: var(--accent-color);
}

/* SAVED BUILDS PANEL */
.dropdown-panel {
    position: absolute;
    top: 100%;
    right: 0;
    z-index: 100;
    width: 80%;
    max-width: 600px;
    max-height: 500px;
    overflow-y: auto;
    display: none;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.4);
    border-radius: 8px;
    margin-top: 10px;
    transform-origin: top right;
    transform: translateY(0);
}

@keyframes fadeInDown {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.dropdown-panel.active {
    display: block;
    animation: fadeInDown 0.3s ease forwards;
}

.saved-builds-panel {
    background-color: rgba(36, 38, 43, 0.9);
    padding: 1rem;
    border-radius: 8px;
    border: 1px solid var(--border-color);
}

.saved-builds-title {
    color: var(--accent-color);
    margin-bottom: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.saved-builds-title button {
    background-color: var(--card-bg);
    color: var(--text-color);
    border: 1px solid var(--border-color);
    border-radius: 4px;
    padding: 0.3rem 0.5rem;
    font-size: 0.8rem;
    cursor: pointer;
    transition: all 0.2s ease;
}

.saved-builds-title button:hover {
    background-color: var(--hover-bg);
    border-color: var(--accent-color);
}

.saved-builds-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
}

.saved-build-item {
    background-color: var(--card-bg);
    border-radius: 6px;
    padding: 0.8rem;
    cursor: pointer;
    transition: all 0.2s ease;
    border: 1px solid var(--border-color);
}

.saved-build-item:hover {
    border-color: var(--accent-color);
    background-color: var(--hover-bg);
}

.saved-build-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
}

.saved-build-hero {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.saved-build-hero-icon {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    overflow: hidden;
    border: 1px solid var(--accent-color);
}

.saved-build-hero-icon img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.saved-build-name {
    font-weight: bold;
    font-size: 0.9rem;
}

.saved-build-role {
    font-size: 0.7rem;
    color: var(--text-secondary);
}

.saved-build-actions {
    display: flex;
    gap: 0.3rem;
}

.saved-build-delete, .saved-build-load {
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    font-size: 0.9rem;
    padding: 0.2rem;
    transition: all 0.2s ease;
}

.saved-build-delete:hover {
    color: var(--damage-color);
}

.saved-build-load:hover {
    color: var(--accent-color);
}

.saved-build-stats {
    display: flex;
    gap: 1rem;
    margin-bottom: 0.5rem;
    font-size: 0.8rem;
}

.saved-build-stat {
    display: flex;
    gap: 0.3rem;
}

.saved-build-cost {
    margin-top: 0.5rem;
    text-align: right;
    font-size: 0.8rem;
}

/* IMPORT BUILD MODAL */
.import-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    display: none;
}

.import-modal-content {
    background-color: var(--secondary-bg);
    padding: 2rem;
    border-radius: 8px;
    width: 90%;
    max-width: 600px;
    max-height: 90vh;
    overflow-y: auto;
    position: relative;
}

.import-modal-title {
    color: var(--accent-color);
    margin-bottom: 1rem;
    font-size: 1.2rem;
}

.import-modal-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: none;
    border: none;
    color: var(--text-secondary);
    font-size: 1.2rem;
    cursor: pointer;
    transition: all 0.2s ease;
}

.import-modal-close:hover {
    color: var(--accent-color);
}

.import-textarea {
    width: 100%;
    height: 200px;
    background-color: var(--primary-bg);
    color: var(--text-color);
    border: 1px solid var(--border-color);
    border-radius: 4px;
    padding: 0.8rem;
    resize: none;
    margin-bottom: 1rem;
    font-family: monospace;
}

.import-build-btn {
    background-color: var(--accent-color);
    color: var(--text-color);
    border: none;
    border-radius: 4px;
    padding: 0.7rem 1.5rem;
    cursor: pointer;
    transition: all 0.2s ease;
    font-weight: bold;
}

.import-build-btn:hover {
    background-color: var(--accent-color-dark);
}

/* URL SHARE DIALOG */
.url-share-dialog {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    backdrop-filter: blur(5px);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    animation: fadeIn 0.2s ease;
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

.url-share-content {
    background-color: var(--secondary-bg);
    border-radius: 8px;
    padding: 1.5rem;
    width: 90%;
    max-width: 500px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.4);
    animation: scaleIn 0.2s ease;
}

@keyframes scaleIn {
    from { transform: scale(0.9); }
    to { transform: scale(1); }
}

.url-share-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid var(--border-color);
}

.url-share-header h3 {
    color: var(--accent-color);
    margin: 0;
}

.close-dialog {
    background: none;
    border: none;
    color: var(--text-secondary);
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0.3rem;
    line-height: 1;
}

.close-dialog:hover {
    color: var(--accent-color);
}

.url-input-container {
    display: flex;
    margin-top: 1rem;
}

.url-input {
    flex: 1;
    background-color: var(--primary-bg);
    color: var(--text-color);
    border: 1px solid var(--border-color);
    border-radius: 4px 0 0 4px;
    padding: 0.8rem;
    font-family: monospace;
    font-size: 0.9rem;
}

/* TOAST NOTIFICATIONS */
.toast {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    background-color: rgba(36, 38, 43, 0.9);
    color: var(--text-color);
    padding: 0.8rem 1.5rem;
    border-radius: 4px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    z-index: 1000;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transform: translateY(100px);
    opacity: 0;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.toast.show {
    transform: translateY(0);
    opacity: 1;
}

.toast i {
    font-size: 1.2rem;
}

.toast-success {
    border-left: 4px solid var(--health-color);
}

.toast-success i {
    color: var(--health-color);
}

.toast-error {
    border-left: 4px solid var(--damage-color);
}

.toast-error i {
    color: var(--damage-color);
}

.toast-info {
    border-left: 4px solid var(--accent-color);
}

.toast-info i {
    color: var(--accent-color);
}

/* FLOATING SHARE BUTTON */
.floating-share-btn {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    width: 60px;
    height: 60px;
    background: linear-gradient(45deg, var(--accent-color), var(--accent-color-dark));
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    cursor: pointer;
    z-index: 90;
    transition: all 0.3s ease;
}

.floating-share-btn:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(255, 156, 30, 0.5);
}

.floating-share-btn:active {
    transform: translateY(0);
}

/* SHARE POPUP */
.share-popup {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    backdrop-filter: blur(5px);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
}

.share-popup.active {
    opacity: 1;
    visibility: visible;
}

.share-popup-content {
    background-color: var(--secondary-bg);
    border-radius: 12px;
    padding: 2rem;
    width: 90%;
    max-width: 600px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.4);
    transform: scale(0.9);
    transition: transform 0.3s ease;
    border: 1px solid rgba(255, 156, 30, 0.3);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
}

.share-popup.active .share-popup-content {
    transform: scale(1);
}

.share-popup-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding-bottom: 0.8rem;
    border-bottom: 1px solid var(--border-color);
}

.share-popup-header h2 {
    color: var(--accent-color);
    margin: 0;
    font-family: 'Rajdhani', sans-serif;
}

.close-popup {
    background: none;
    border: none;
    color: var(--text-secondary);
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0.3rem;
    line-height: 1;
}

.close-popup:hover {
    color: var(--accent-color);
}

.share-methods {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.share-method {
    padding: 1.2rem;
    border-radius: 8px;
    background-color: rgba(26, 28, 32, 0.6);
    border: 1px solid var(--border-color);
}

.share-method-header {
    display: flex;
    align-items: center;
    gap: 0.8rem;
    margin-bottom: 1rem;
}

.share-method-icon {
    width: 40px;
    height: 40px;
    background-color: var(--accent-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
}

.share-method-title {
    font-weight: bold;
    font-size: 1.1rem;
    color: var(--accent-color);
}

.text-share-area {
    width: 100%;
    height: 150px;
    background-color: var(--primary-bg);
    color: var(--text-color);
    border: 1px solid var(--border-color);
    border-radius: 4px;
    padding: 0.8rem;
    font-family: monospace;
    font-size: 0.9rem;
    resize: none;
    margin-top: 0.8rem;
}

.copy-text-btn {
    background-color: var(--accent-color);
    margin-top: 0.5rem;
    color: var(--text-color);
    border: none;
    border-radius: 4px;
    padding: 0.7rem 1rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: bold;
}

.copy-text-btn:hover {
    background-color: var(--accent-color-dark);
}

/* PERSISTENT BUILD SUMMARY */
.persistent-build-summary {
    width: 330px;
    position: sticky;
    top: 20px;
    height: calc(100vh - 90px);
    margin-top: 20px;
    overflow-y: auto;
    background-color: rgba(36, 38, 43, 0.95);
    border-radius: 12px;
    border: 1px solid var(--accent-color);
    padding: 1.5rem;
    backdrop-filter: blur(10px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
}

.persistent-hero-info {
    display: flex;
    align-items: center;
    gap: 1rem;
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 1rem;
    margin-bottom: 1rem;
}

.persistent-hero-icon {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    overflow: hidden;
    border: 2px solid var(--accent-color);
}

.persistent-hero-icon img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.persistent-hero-details h3 {
    margin: 0 0 0.2rem;
    color: var(--accent-color);
}

.persistent-hero-role {
    display: inline-block;
    padding: 0.2rem 0.5rem;
    border-radius: 50px;
    font-size: 0.8rem;
    background-color: rgba(42, 44, 50, 0.8);
}

.persistent-hero-role.Tank {
    color: var(--armor-color);
    border: 1px solid var(--armor-color);
}

.persistent-hero-role.Damage {
    color: var(--damage-color);
    border: 1px solid var(--damage-color);
}

.persistent-hero-role.Support {
    color: var(--healing-color);
    border: 1px solid var(--healing-color);
}

.stats-section {
    margin-bottom: 1rem;
    background-color: rgba(15, 25, 35, 0.7);
    border-radius: 8px;
    padding: 0.8rem;
}

.stat-row {
    display: flex;
    align-items: center;
    padding: 4px 0;
    margin-bottom: 5px;
}

.stat-icon {
    width: 20px;
    margin-right: 5px;
}

.stat-icon img {
    width: 100%;
    height: auto;
}

.stat-name {
    width: 120px;
    font-size: 0.8rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.stat-bar-container {
    flex: 1;
    height: 6px;
    border-radius: 3px;
    overflow: hidden;
    background-color: rgba(26, 28, 32, 0.7);
}

.stat-value {
    width: 40px;
    text-align: right;
    font-size: 0.85rem;
    margin-left: 5px;
}

.life-bar-container {
    display: flex;
    height: 12px;
    background-color: #1a1c20;
    border-radius: 6px;
    overflow: hidden;
    flex: 1;
    gap:.5px;
}

.life-segment {
    height: 8px;
    width: 10%;
}

.life-filled {
    background-color: #4040ff;
}

.life-empty {
    background-color: #444444;
}

.ability-navigation {
    position: relative;
    margin-top: 1rem;
    border-top: 1px solid var(--border-color);
    padding-top: 1rem;
}

.ability-carousel {
    overflow: hidden;
    position: relative;
}

.ability-slide {
    display: none;
    animation: fadeEffect 0.5s;
    padding: 10px;
    background-color: rgba(26, 28, 32, 0.5);
    border-radius: 8px;
    margin-bottom: 10px;
}

.ability-slide.active {
    display: block;
}

@keyframes fadeEffect {
    from {opacity: 0.4;}
    to {opacity: 1;}
}

.nav-arrows {
    display: flex;
    justify-content: space-between;
    margin-top: 0.5rem;
}

.nav-arrow {
    background-color: rgba(255, 156, 30, 0.2);
    color: var(--accent-color);
    border: none;
    border-radius: 50%;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
}

.nav-arrow:hover {
    background-color: var(--accent-color);
    color: white;
}

.ability-indicator {
    display: flex;
    justify-content: center;
    gap: 5px;
    margin-top: 0.5rem;
}

.indicator-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: var(--border-color);
    cursor: pointer;
}

.indicator-dot.active {
    background-color: var(--accent-color);
}

.persistent-build-details {
    margin-top: 1rem;
}

.persistent-powers, .persistent-items {
    margin-bottom: 1rem;
}

.persistent-powers-header, .persistent-items-header {
    display: flex;
    justify-content: space-between;
    font-size: 0.9rem;
    color: var(--text-secondary);
    margin-bottom: 0.5rem;
}

.persistent-total-cost {
    color: var(--cost-color);
    font-weight: bold;
}

.persistent-powers-list, .persistent-items-list {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    max-height: 150px;
    overflow-y: auto;
}

.persistent-power-item, .persistent-item-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background-color: rgba(42, 44, 50, 0.8);
    padding: 0.6rem;
    border-radius: 4px;
    font-size: 0.8rem;
    position: relative;
}

.persistent-power-item span, .persistent-item-item span {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 180px;
}

.persistent-power-icon, .persistent-item-icon {
    width: 20px;
    height: 20px;
    border-radius: 4px;
    overflow: hidden;}
    .persistent-power-icon, .persistent-item-icon {
        width: 20px;
        height: 20px;
        border-radius: 4px;
        overflow: hidden;
    }
    
    .persistent-power-icon img, .persistent-item-icon img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    .persistent-item-cost {
        margin-left: auto;
        color: var(--cost-color);
        font-size: 0.75rem;
        min-width: 45px;
        text-align: right;
    }
    
    .persistent-remove {
        position: absolute;
        right: -8px;
        top: -8px;
        background-color: var(--damage-color);
        color: white;
        width: 16px;
        height: 16px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.6rem;
        cursor: pointer;
        opacity: 0;
        transition: all 0.2s ease;
    }
    
    .persistent-power-item:hover .persistent-remove,
    .persistent-item-item:hover .persistent-remove {
        opacity: 1;
    }
    
    .persistent-actions {
        display: flex;
        gap: 0.5rem;
    }
    
    .persistent-action-btn {
        flex: 1;
        background-color: rgba(42, 44, 50, 0.8);
        color: var(--text-color);
        border: 1px solid var(--border-color);
        border-radius: 4px;
        padding: 0.5rem;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.3rem;
        font-size: 0.9rem;
    }
    
    .persistent-action-btn:hover {
        background-color: var(--hover-bg);
        border-color: var(--accent-color);
    }
    
    /* PRIVACY POLICY MODAL */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        display: none;
        backdrop-filter: blur(5px);
    }
    
    .modal-content {
        background-color: var(--secondary-bg);
        padding: 2rem;
        border-radius: 8px;
        width: 90%;
        max-width: 700px;
        max-height: 80vh;
        overflow-y: auto;
        position: relative;
        border: 1px solid var(--accent-color);
    }
    
    .modal-title {
        color: var(--accent-color);
        margin-bottom: 1.5rem;
        font-size: 1.4rem;
        border-bottom: 1px solid var(--border-color);
        padding-bottom: 0.5rem;
    }
    
    .modal-close {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: none;
        border: none;
        color: var(--text-secondary);
        font-size: 1.2rem;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .modal-close:hover {
        color: var(--accent-color);
    }
    
    .privacy-content {
        line-height: 1.6;
    }
    
    .privacy-content h4 {
        color: var(--accent-color);
        margin: 1.5rem 0 0.5rem;
    }
    
    .privacy-content ul {
        margin-left: 1.5rem;
        margin-bottom: 1rem;
    }
    
    /* CONSENT POPUP */
    .consent-popup {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8);
        backdrop-filter: blur(5px);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 2000;
    }
    
    .consent-content {
        background-color: var(--secondary-bg);
        border-radius: 12px;
        padding: 2rem;
        width: 90%;
        max-width: 500px;
        border: 2px solid var(--accent-color);
        box-shadow: 0 0 30px rgba(255, 156, 30, 0.3);
        text-align: center;
        position: relative;
    }
    
    .popup-logo {
        font-size: 1.8rem;
        font-weight: bold;
        color: var(--accent-color);
        text-shadow: 0 0 10px rgba(255, 156, 30, 0.5);
        font-family: 'Rajdhani', sans-serif;
        letter-spacing: 1px;
        margin-bottom: 1rem;
    }
    
    .consent-buttons {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-top: 1.5rem;
    }
    
    .consent-btn {
        padding: 0.8rem 1.5rem;
        border-radius: 50px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        font-family: 'Rajdhani', sans-serif;
    }
    
    .consent-accept {
        background: linear-gradient(45deg, var(--accent-color), var(--accent-color-dark));
        color: white;
        border: none;
    }
    
    .consent-decline {
        background: transparent;
        color: var(--text-color);
        border: 1px solid var(--border-color);
    }
    
    .consent-accept:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(255, 156, 30, 0.4);
    }
    
    .consent-decline:hover {
        border-color: var(--text-color);
        background-color: rgba(255, 255, 255, 0.1);
    }
    
    .consent-close {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: none;
        border: none;
        color: var(--text-secondary);
        font-size: 1.5rem;
        cursor: pointer;
        z-index: 10;
    }
    
    .consent-close:hover {
        color: var(--text-color);
    }
    
    /* FOOTER */
    footer {
        margin-top: auto;
        padding: 1rem;
        background-color: var(--secondary-bg);
        text-align: center;
        font-size: 0.8rem;
        color: var(--text-secondary);
        border-top: 1px solid var(--border-color);
    }
    
    footer a {
        color: var(--accent-color);
        text-decoration: none;
    }
    
    footer a:hover {
        text-decoration: underline;
    }
    
    /* HIDDEN TEXTAREA */
    .build-code-text {
        position: absolute;
        left: -9999px;
        top: -9999px;
        opacity: 0;
        width: 1px;
        height: 1px;
    }
    
    /* RESPONSIVE DESIGN */
    @media (max-width: 1024px) {
        .container {
            flex-direction: column;
        }
        
        .main-content {
            max-width: 100%;
        }
        
        .persistent-build-summary {
            width: calc(100% - 40px);
            position: relative;
            margin: 20px auto;
            height: auto;
            max-height: none;
        }
        
        .overview-container {
            grid-template-columns: 1fr;
        }
        
        .hero-profile {
            position: static;
            max-height: none;
        }
    }
    
    @media (max-width: 768px) {
        .powers-grid, .items-grid {
            grid-template-columns: 1fr;
        }
        
        .tab-navigation {
            flex-wrap: wrap;
            justify-content: center;
        }
        
        .tab-button {
            flex: 1 1 auto;
            text-align: center;
            min-width: 120px;
        }
        
        .stats-grid {
            grid-template-columns: 1fr;
        }
        
        .build-selections {
            grid-template-columns: 1fr;
        }
        
        .build-stats-grid {
            grid-template-columns: 1fr 1fr;
        }
        
        .saved-builds-list {
            grid-template-columns: 1fr;
        }
        
        .build-buttons {
            flex-direction: column;
        }
        
        .floating-share-btn {
            width: 50px;
            height: 50px;
            font-size: 1.2rem;
            bottom: 1.5rem;
            right: 1.5rem;
        }
        
        .share-popup-content {
            padding: 1.5rem;
        }
    }
    /* Add this to styles.css */
.category-container {
    margin-bottom: 2.5rem;
}

.category-header {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
    border-bottom: 1px solid rgba(255, 156, 30, 0.3);
    padding-bottom: 0.5rem;
}

.category-icon {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    margin-right: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
}

.weapon-icon { background-color: rgba(255, 126, 51, 0.2); color: #ff7e33; }
.ability-icon { background-color: rgba(74, 223, 255, 0.2); color: #4adfff; }
.survival-icon { background-color: rgba(131, 255, 82, 0.2); color: #83ff52; }

.category-title {
    font-size: 1.3rem;
    font-weight: 600;
    margin: 0;
}

.items-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
}

.item-card {
    background-color: rgba(42, 44, 50, 0.7);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 1rem;
    transition: all 0.3s ease;
}

.item-card:hover {
    transform: translateY(-3px);
    border-color: var(--accent-color);
    box-shadow: 0 5px 15px rgba(255, 156, 30, 0.2);
}

.item-card.selected {
    border-color: var(--accent-color);
    box-shadow: 0 0 15px rgba(255, 106, 0, 0.5);
}

.item-header {
    display: flex;
    align-items: center;
    margin-bottom: 0.8rem;
}

.item-icon {
    width: 42px;
    height: 42px;
    border-radius: 8px;
    margin-right: 0.8rem;
    background-color: #1a1c20;
    border: 1px solid rgba(255, 255, 255, 0.1);
    overflow: hidden;
    flex-shrink: 0;
}

.item-details {
    flex: 1;
}

.item-name {
    font-weight: 600;
    margin-bottom: 0.2rem;
    font-size: 1.1rem;
}

.item-cost {
    color: var(--cost-color);
    font-weight: 600;
}

.item-description {
    font-size: 0.9rem;
    line-height: 1.5;
    color: var(--text-secondary);
}
/* Add this to styles.css */
.tab-navigation {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
    border-bottom: 1px solid rgba(255, 156, 30, 0.3);
    padding-bottom: 1rem;
}

.tab-button {
    background-color: rgba(42, 44, 50, 0.7);
    color: var(--text-color);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 0.8rem 1.2rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    transition: all 0.3s ease;
}

.tab-button:hover {
    background-color: rgba(58, 60, 66, 0.8);
    transform: translateY(-2px);
}

.tab-button.active {
    background: linear-gradient(45deg, var(--accent-color), var(--accent-color-dark));
    border-color: var(--accent-color-dark);
    box-shadow: 0 4px 12px rgba(255, 156, 30, 0.3);
}

.tab-button i {
    font-size: 1rem;
}
/* Add to styles.css - Improved item card spacing */
.items-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: 1.5rem; /* Increased gap between items */
    padding: 0.5rem;
}

.item-card {
    background-color: rgba(42, 44, 50, 0.7);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 10px; /* Slightly rounded corners */
    padding: 1.25rem; /* Increased padding inside cards */
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
    height: 100%;
    min-height: 140px; /* Minimum height to prevent tiny cards */
}

.item-header {
    display: flex;
    align-items: center;
    gap: 1rem; /* More space between icon and text */
    margin-bottom: 1rem; /* More space below header */
    padding-bottom: 0.75rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
}

.item-icon {
    width: 48px; /* Larger icon */
    height: 48px;
    border-radius: 8px;
    overflow: hidden;
    flex-shrink: 0;
}

.item-details {
    display: flex;
    flex-direction: column;
    gap: 0.25rem; /* Space between name and cost */
}

.item-name {
    font-size: 1.1rem;
    font-weight: 600;
    line-height: 1.2;
}

.item-description {
    font-size: 0.95rem;
    line-height: 1.6; /* Increased line height for readability */
    color: var(--text-secondary);
    margin-top: 0.5rem;
}
/* Add to styles.css - Improved power card spacing */
.powers-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem; /* Increased gap between power cards */
    padding: 0.5rem;
}

.power-card {
    background-color: rgba(42, 44, 50, 0.7);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    padding: 1.25rem; /* Increased padding */
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
    height: 100%;
    min-height: 140px; /* Minimum height */
}

.power-header {
    display: flex;
    align-items: center;
    gap: 1rem; /* More space between icon and text */
    margin-bottom: 1rem;
    padding-bottom: 0.75rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
}

.power-icon {
    width: 48px; /* Larger icon */
    height: 48px;
    border-radius: 8px;
    overflow: hidden;
    flex-shrink: 0;
    background-color: rgba(255, 156, 30, 0.15);
    display: flex;
    align-items: center;
    justify-content: center;
}

.power-name {
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--accent-color);
}

.power-description {
    font-size: 0.95rem;
    line-height: 1.6; /* Increased line height */
    color: var(--text-secondary);
}
/* Update the tab navigation with left padding */
.tab-navigation {
    display: flex;
    gap: 0.75rem;
    margin-bottom: 2rem; /* Increased bottom margin */
    padding: 0 0 1rem 1.5rem; /* Added left padding of 1.5rem */
    border-bottom: 1px solid rgba(255, 156, 30, 0.3);
    overflow-x: auto; /* Allow horizontal scrolling on smaller screens */
}

.tab-button {
    background-color: rgba(42, 44, 50, 0.7);
    color: var(--text-color);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 0.9rem 1.4rem; /* Increased padding inside buttons */
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.6rem;
    cursor: pointer;
    transition: all 0.3s ease;
    white-space: nowrap; /* Prevent text from wrapping */
}

/* Ensure consistent spacing in the main content area */
.pages-container {
    padding: 0 1.5rem; /* Add consistent padding to match tab navigation */
}

.page {
    padding: 1rem 0; /* Add vertical padding to pages */
}

.page-title {
    margin-bottom: 1.5rem;
    font-size: 1.6rem;
    color: var(--accent-color);
}

.section-description {
    margin-bottom: 2rem;
    line-height: 1.6;
    color: var(--text-secondary);
    max-width: 800px;
}
/* Update the tab navigation to add space on top */
.tab-navigation {
    display: flex;
    gap: 0.75rem;
    margin: 2rem 0; /* Added top margin */
    padding: 0 0 1rem 1.5rem;
    border-bottom: 1px solid rgba(255, 156, 30, 0.3);
    overflow-x: auto;
    position: sticky;
    top: 0;
    background-color: rgba(26, 28, 32, 0.9);
    backdrop-filter: blur(8px);
    z-index: 100;
}
/* Fix for tab navigation top spacing */
.tab-navigation {
    margin-top: 2rem; /* Add space above tabs */
    padding-top: 1rem; /* Add internal padding above tabs */
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--border-color);
}

/* Add space to the pages container for better visual flow */
#pages-container {
    padding-top: 1.5rem; /* Adds space between tabs and content */
}
.ability {
    margin-bottom: 2rem;
    padding: 1.5rem;
    background-color: rgba(36, 38, 43, 0.8);
    border-radius: 10px;
    border-left: 3px solid var(--ability-color);
    transition: all 0.2s ease;
}

.ability:hover {
    background-color: rgba(42, 44, 50, 0.9);
    transform: translateX(3px);
}

.ability-header {
    gap: 1.25rem;
    margin-bottom: 1rem;
}

.ability-icon {
    width: 56px;
    height: 56px;
    flex: 0 0 56px;
}
/* Add to styles.css */
.ability-stat.dps-calculation {
    grid-column: 1 / -1; /* Span all columns */
    border-top: 1px solid rgba(255, 156, 30, 0.3);
    padding-top: 10px;
    margin-top: 10px;
    background-color: rgba(36, 38, 43, 0.7);
}

.dps-formula {
    color: var(--text-secondary);
    font-size: 0.85rem;
    margin-left: 8px;
    font-style: italic;
}

.stat-value-container {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
}

.base-value {
    font-weight: normal;
}

.modifier {
    margin-left: 6px;
    font-size: 0.9rem;
}

.modifier.positive {
    color: var(--healing-color);
}

.modifier.negative {
    color: var(--damage-color);
}

.stat-details {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;
    z-index: 100;
    background-color: var(--card-bg);
    border: 1px solid var(--border-color);
    border-radius: 6px;
    padding: 12px;
    width: 250px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
}

.stat-formula {
    margin-bottom: 10px;
    font-size: 0.9rem;
    line-height: 1.4;
    color: var(--text-secondary);
}

.expand-btn {
    background: none;
    border: none;
    color: var(--text-secondary);
    font-size: 12px;
    margin-left: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.expand-btn:hover {
    color: var(--accent-color);
}

.ability-stat.expandable {
    position: relative;
    cursor: pointer;
}

.ability-stat.expandable:hover {
    background-color: rgba(58, 60, 66, 0.5);
}

.ability-stat.expanded .stat-details {
    display: block;
}

.ability-stat.expanded .expand-btn {
    transform: rotate(180deg);
}
/* Add to styles.css */
.ability-slide .ability-stats {
    display: flex;
    flex-direction: column;
    gap: 0.6rem;
    padding: 0.8rem;
    background-color: rgba(26, 28, 32, 0.5);
    border-radius: 6px;
    margin-top: 0.5rem;
}

.ability-slide .ability-stat {
    background-color: rgba(42, 44, 50, 0.7);
    padding: 0.6rem;
    border-radius: 4px;
    font-size: 0.85rem;
    display: flex;
    flex-direction: column;
}

.ability-slide .ability-stat label {
    color: var(--text-secondary);
    margin-bottom: 0.2rem;
}

/* Mobile optimizations */
@media (max-width: 768px) {
    .ability-slide .ability-stat {
        font-size: 0.8rem;
        padding: 0.5rem;
    }
    
    .ability-slide .ability-stats {
        padding: 0.6rem;
    }
    
    .dps-formula {
        display: block;
        margin-top: 0.3rem;
        margin-left: 0;
    }
}
/* Add to styles.css */
.ability-stat {
    position: relative;
    padding: 0.7rem;
    background-color: rgba(42, 44, 50, 0.7);
    border-radius: 6px;
    border: 1px solid rgba(255, 255, 255, 0.05);
    transition: all 0.2s ease;
}

.ability-stat.expandable {
    cursor: pointer;
}

.ability-stat.expandable:hover {
    background-color: rgba(58, 60, 66, 0.7);
}

.ability-stat label {
    display: block;
    margin-bottom: 0.3rem;
    color: var(--text-secondary);
    font-size: 0.9rem;
}

.ability-stat .stat-value-container {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    position: relative;
}

.ability-stat .base-value {
    font-weight: 500;
}

.ability-stat .modifier {
    font-size: 0.9rem;
    font-weight: 500;
}

.ability-stat .modifier.positive {
    color: var(--healing-color);
}

.ability-stat .modifier.negative {
    color: var(--damage-color);}
    .logo-container {
        display: flex;
        align-items: center;
    }
    
    .header-logo {
        height: 40px;
        margin-right: 10px;
    }
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }
    
    .spinner {
        width: 60px;
        height: 60px;
        border: 5px solid rgba(255, 156, 30, 0.3);
        border-radius: 50%;
        border-top-color: var(--accent-color);
        animation: spin 1s infinite linear;
    }
    
    @keyframes spin {
        to { transform: rotate(360deg); }
    }
    /* Update in styles.css */
.saved-builds-panel {
    z-index: 1000; /* Increase z-index */
    position: absolute;
    top: 100%;
    right: 0;
    max-height: 80vh;
    overflow-y: auto;
    background-color: rgba(36, 38, 43, 0.95);
    border: 1px solid var(--accent-color);
    width: 90%;
    max-width: 600px;
}
/* Update the saved builds panel styling in styles.css */
.saved-builds-panel {
    position: fixed; /* Change from absolute to fixed */
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%); /* Center in viewport */
    z-index: 1050; /* Higher z-index to ensure it's on top */
    width: 90%;
    max-width: 600px;
    max-height: 80vh;
    overflow-y: auto;
    background-color: rgba(36, 38, 43, 0.95);
    border-radius: 12px;
    border: 2px solid var(--accent-color);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
    padding: 1.5rem;
    display: none; /* Hidden by default */
  }
  
  /* Add overlay background for better modal experience */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    backdrop-filter: blur(3px);
    z-index: 1040;
    display: none;
  }
  
  /* Improve the selected items display */
  .summary-item {
    background-color: rgba(42, 44, 50, 0.8);
    border-radius: 6px;
    padding: 0.5rem 0.75rem;
    display: flex;
    align-items: center;
    position: relative;
    margin-bottom: 0.5rem;
  }
  
  .summary-item .remove-btn {
    position: absolute;
    right: 0.5rem;
    top: 50%;
    transform: translateY(-50%);
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    background-color: rgba(255, 92, 92, 0.2);
    color: var(--damage-color);
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .summary-item .remove-btn:hover {
    background-color: var(--damage-color);
    color: white;
  }
  
  /* Make costs more visible */
  .item-cost {
    color: var(--cost-color);
    font-weight: bold;
    background-color: rgba(255, 191, 64, 0.1);
    padding: 0.1rem 0.4rem;
    border-radius: 4px;
    border: 1px solid rgba(255, 191, 64, 0.3);
  }
</file>

</repository_files>
